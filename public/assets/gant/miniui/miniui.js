

mini = {
    components: {},
    uids: {},
    ux: {},

    isReady: false,


    byClass: function (cls, el) {
        if (typeof el == "string") el = mini.byId(el);
        return jQuery("." + cls, el)[0];
    },
    getComponents: function () {
        var cs = [];
        for (var id in mini.components) {
            var c = mini.components[id];
            cs.push(c);
        }
        return cs;
    },
    get: function (id) {
        if (!id) return null;
        if (mini.isControl(id)) return id;
        if (typeof id == "string") {
            if (id.charAt(0) == '#') id = id.substr(1);
        }
        if (typeof id == "string") return mini.components[id];
        else {
            var control = mini.uids[id.uid];
            if (control && control.el == id) return control;
        }
        return null;
    },
    getbyUID: function (uid) {
        return mini.uids[uid];
    },
    findControls: function (fn, scope) {
        if (!fn) return [];
        scope = scope || mini;
        var controls = [];
        var uids = mini.uids;
        for (var uid in uids) {
            var control = uids[uid];
            var ret = fn.call(scope, control);
            if (ret === true || ret === 1) {
                controls.push(control);
                if (ret === 1) break;
            }
        }
        return controls;
    },
    getChildControls: function (parent) {
        var p = mini.get(parent);
        if (!p) return [];
        var pel = parent.el ? parent.el : parent;
        var controls = mini.findControls(function (control) {
            if (!control.el || parent == control) return false;
            if (mini.isAncestor(pel, control.el) && control.within) return true;
            return false;
        });
        return controls;
    },
    emptyFn: function () { },


    createNameControls: function (obj, pre) {
        if (!obj || !obj.el) return;
        if (!pre) pre = "_";
        var el = obj.el;
        var controls = mini.findControls(function (control) {
            if (!control.el || !control.name) return false;
            if (mini.isAncestor(el, control.el)) return true;
            return false;
        });

        for (var i = 0, l = controls.length; i < l; i++) {
            var c = controls[i];
            var name = pre + c.name;
            if (pre === true) {
                name = c.name[0].toUpperCase() + c.name.substring(1, c.name.length);
            }
            obj[name] = c;
        }

    },
    getsbyName: function (name, parentNode) {
        var isControl = mini.isControl(parentNode);
        var parentControl = parentNode;
        if (parentNode && isControl) {
            parentNode = parentNode.el;
        }
        parentNode = mini.byId(parentNode);
        parentNode = parentNode || document.body;
        var controls = mini.findControls(function (control) {
            if (!control.el) return false;
            if (control.name == name && mini.isAncestor(parentNode, control.el)) return true;
            return false;
        }, this);

        if (isControl && controls.length == 0 && parentControl && parentControl.getbyName) {
            var obj = parentControl.getbyName(name);
            if (obj) controls.push(obj);
        }

        return controls;
    },
    getbyName: function (name, parentNode) {
        return mini.getsbyName(name, parentNode)[0];
    },

    getParams: function (url) {
        if (!url) url = location.href;
        url = url.split("?")[1];
        var params = {};
        if (url) {
            var us = url.split("&");
            for (var i = 0, l = us.length; i < l; i++) {
                var ps = us[i].split("=");

                try {
                    params[ps[0]] = decodeURIComponent(unescape(ps[1]));
                } catch (ex) {

                }
            }
        }
        return params;
    },

    reg: function (cmp) {
        this.components[cmp.id] = cmp;
        this.uids[cmp.uid] = cmp;

    },
    unreg: function (cmp) {
        delete mini.components[cmp.id];
        delete mini.uids[cmp.uid];
    },

    classes: {},
    uiClasses: {},
    getClass: function (className) {
        if (!className) return null;
        return this.classes[className.toLowerCase()];
    },
    getClassByUICls: function (uiCls) {

        return this.uiClasses[uiCls.toLowerCase()];
    },


    idPre: "mini-",
    idIndex: 1,
    newId: function (idPre) {
        return (idPre || this.idPre) + this.idIndex++;
    },

    copyTo: function (to, from) {
        if (to && from) {
            for (var p in from) {
                to[p] = from[p];
            }
        }
        return to;
    },
    copyIf: function (to, from) {
        if (to && from) {
            for (var p in from) {
                if (mini.isNull(to[p])) {
                    to[p] = from[p];
                }
            }
        }
        return to;
    },
    createDelegate: function (fn, scope) {
        if (!fn) return function () { };
        return function () {
            return fn.apply(scope, arguments);
        }
    },

    isControl: function (obj) {
        return !!(obj && obj.isControl);
    },
    isElement: function (obj) {
        return obj && obj.appendChild;
    },
    isDate: function (value) {
        return value && value.getFullYear;
    },
    isArray: function (value) {
        return value && !!value.unshift
    },
    isNull: function (value) {
        return value === null || value === undefined;
    },

    isNumber: function (value) {
        return !isNaN(value) && typeof value == 'number';
    },
    isEquals: function (a, b) {

        if (a !== 0 && b !== 0 && !(a instanceof Array) && !(b instanceof Array)) {
            if ((mini.isNull(a) || a == "") && (mini.isNull(b) || b == "")) return true;
        }


        if (a && b && a.getFullYear && b.getFullYear) return a.getTime() === b.getTime();

        if (typeof a == 'object' && typeof b == 'object') {
            return a === b;
        }

        return String(a) === String(b);
    },
    forEach: function (array, method, scope) {
        var list = array.clone();
        for (var i = 0, l = list.length; i < l; i++) {
            var o = list[i];
            if (method.call(scope, o, i, array) === false) break;
        }
    },
    sort: function (array, fn, scope) {
        scope = scope || array;
        array.sort(fn);

    },

    removeNode: function (el) {
        jQuery(el).remove();
    },
    elWarp: document.createElement("div")








};


if (typeof mini_debugger == "undefined") {
    mini_debugger = true;
}









mini_regClass = function (clazz, className) {
    className = className.toLowerCase();
    if (!mini.classes[className]) {
        mini.classes[className] = clazz;
        clazz.prototype.type = className;
    }
    var uiCls = clazz.prototype.uiCls;
    if (!mini.isNull(uiCls) && !mini.uiClasses[uiCls]) {
        mini.uiClasses[uiCls] = clazz;
    }
}
mini_extend = function (newClass, sp, overrides) {
    if (typeof sp != 'function') return this;

    var sb = newClass, sbp = sb.prototype, spp = sp.prototype;
    if (sb.superclass == spp) return;
    sb.superclass = spp;
    sb.superclass.constructor = sp;

    for (var p in spp) {
        sbp[p] = spp[p];
    }
    if (overrides) {
        for (var p in overrides) {
            sbp[p] = overrides[p];
        }
    }
    return sb;
}
mini.copyTo(mini, {
    extend: mini_extend,
    regClass: mini_regClass,
    debug: false
});


mini.namespace = function (names) {
    if (typeof names != "string") return;
    names = names.split(".");
    var parent = window;
    for (var i = 0, l = names.length; i < l; i++) {
        var name = names[i];
        var obj = parent[name];
        if (!obj) {
            obj = parent[name] = {};
        }
        parent = obj;
    }
}

mini._BindCallbacks = [];
mini._BindEvents = function (fn, scope) {
    mini._BindCallbacks.push([fn, scope]);
    if (!mini._EventTimer) {
        mini._EventTimer = setTimeout(function () {
            mini._FireBindEvents();
        }, 50);
    }
}
mini._FireBindEvents = function () {
    for (var i = 0, l = mini._BindCallbacks.length; i < l; i++) {
        var e = mini._BindCallbacks[i];
        e[0].call(e[1]);
    }
    mini._BindCallbacks = [];
    mini._EventTimer = null;
}

mini._getFunctoin = function (fnName) {
    if (typeof fnName != "string") return null;
    var names = fnName.split(".");
    var fn = null;
    for (var i = 0, l = names.length; i < l; i++) {
        var name = names[i];
        if (!fn) fn = window[name];
        else fn = fn[name];
        if (!fn) break;
    }
    return fn;
}

mini._getMap = function (name, obj) {
    if (!name) return null;
    var index = name.indexOf(".");
    if (index == -1 && name.indexOf("[") == -1) return obj[name];
    if (index == (name.length - 1)) return obj[name];
    var s = "obj." + name;
    try {
        var v = eval(s);
    } catch (e) {
        return null;
    }
    return v;
}
mini._setMap = function (name, value, obj) {
    if (!obj) return;
    if (typeof name != "string") return;

    var names = name.split(".");

    function createArray(obj, name, num, defaultValue) {
        var arr = obj[name];
        if (!arr) {
            arr = obj[name] = [];
        }
        for (var i = 0; i <= num; i++) {
            var arrObj = arr[i];
            if (!arrObj) {
                if (defaultValue === null || defaultValue === undefined) {
                    arrObj = arr[i] = {};
                } else {
                    arrObj = arr[i] = defaultValue;
                }
            }
        }
        return obj[name][num];
    }

    var obj2 = null;
    for (var i = 0, l = names.length; i <= l - 1; i++) {
        var name = names[i];

        if (i == l - 1) {
            if (name.indexOf(']') == -1) {
                obj[name] = value;
            } else {

                var as = name.split("[");
                var n1 = as[0], n2 = parseInt(as[1]);
                createArray(obj, n1, n2, "");
                obj[n1][n2] = value;
            }

            break;
        }

        if (name.indexOf(']') == -1) {

            obj2 = obj[name];
            if (i <= l - 2 && obj2 == null) {
                obj[name] = obj2 = {};
            }
            obj = obj2;
        } else {

            var as = name.split("[");
            var n1 = as[0], n2 = parseInt(as[1]);
            obj = createArray(obj, n1, n2);

        }

    }
    return value;
}












































mini.getAndCreate = function (id) {
    if (!id) return null;
    if (typeof id == "string") return mini.components[id];

    if (typeof id == "object") {
        if (mini.isControl(id)) {
            return id;
        } else if (mini.isElement(id)) {
            return mini.uids[id.uid];
        } else {
            return mini.create(id);
        }
    }
    return null;
};
mini.create = function (uiConfig) {
    if (!uiConfig) return null;
    if (mini.get(uiConfig.id) === uiConfig) return uiConfig;
    var clazz = this.getClass(uiConfig.type);
    if (!clazz) return null;
    var ui = new clazz();
    ui.set(uiConfig);
    return ui;
}










mini.Component = function () {
    this._events = {};

    this.uid = mini.newId(this._idPre);
    this._id = this.uid;
    if (!this.id) {
        this.id = this.uid;
    }
    mini.reg(this);


}
mini.Component.prototype = {
    isControl: true,
    id: null,
    _idPre: "mini-",
    _idSet: false,
    _canFire: true,









    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }
        var _allowLayout = this._allowLayout;
        this._allowLayout = false;

        var renderTo = kv.renderTo || kv.render;
        delete kv.renderTo;
        delete kv.render;

        for (var key in kv) {
            if (key.toLowerCase().indexOf('on') == 0) {

                var fn = kv[key];
                this.on(key.substring(2, key.length).toLowerCase(), fn);
                delete kv[key];
            }
        }


        for (var key in kv) {
            var v = kv[key];
            var n = 'set' + key.charAt(0).toUpperCase() + key.substring(1, key.length);
            var setter = this[n];
            if (setter) {
                setter.call(this, v);
            } else {
                this[key] = v;
            }
        }

        if (renderTo && this.render) {
            this.render(renderTo);
        }

        this._allowLayout = _allowLayout;
        if (this.doLayout) this.doLayout();

        return this;
    },

    fire: function (type, event) {
        if (this._canFire == false) return;
        type = type.toLowerCase();
        var handlers = this._events[type];
        if (handlers) {
            if (!event) event = {};
            if (event && event != this) {
                event.source = event.sender = this;
                if (!event.type) {
                    event.type = type;
                }
            }
            for (var i = 0, l = handlers.length; i < l; i++) {
                var listener = handlers[i];
                if (listener) {
                    listener[0].apply(listener[1], [event]);
                }
            }
        }
    },
    on: function (type, fn, scope) {

        if (typeof fn == "string") {

            var f = mini._getFunctoin(fn);
            if (!f) {

                var id = mini.newId("__str_");
                window[id] = fn;

                eval("fn = function(e){var s = " + id + ";var fn = mini._getFunctoin(s); if(fn) {fn.call(this, e)}else{eval(s);}}");
            } else {
                fn = f;
            }
        }

        if (typeof fn != 'function' || !type) return false;
        type = type.toLowerCase();
        var event = this._events[type];
        if (!event) {
            event = this._events[type] = [];
        }
        scope = scope || this;
        if (!this.findListener(type, fn, scope)) {
            event.push([fn, scope]);
        }
        return this;
    },
    un: function (type, fn, scope) {
        if (typeof fn != 'function') return false;
        type = type.toLowerCase();
        var event = this._events[type];
        if (event) {
            scope = scope || this;
            var listener = this.findListener(type, fn, scope);
            if (listener) {
                event.remove(listener);
            }
        }
        return this;
    },
    findListener: function (type, fn, scope) {
        type = type.toLowerCase();
        scope = scope || this;
        var handlers = this._events[type];
        if (handlers) {
            for (var i = 0, l = handlers.length; i < l; i++) {
                var listener = handlers[i];
                if (listener[0] === fn && listener[1] === scope) return listener;
            }
        }
    },



    setId: function (id) {
        if (!id) throw new Error("id not null");
        if (this._idSet) throw new Error("id just set only one");
        mini["unreg"](this);
        this.id = id;
        if (this.el) this.el.id = id;
        if (this._textEl) this._textEl.id = id + "$text";
        if (this._valueEl) this._valueEl.id = id + "$value";
        this._idSet = true;
        mini.reg(this);
    },
    getId: function () {
        return this.id;
    },
    destroy: function () {
        mini["unreg"](this);
        this.fire("destroy");
    }
}




mini.Control = function () {
    mini.Control.superclass.constructor.call(this);

    this._create();
    this.el.uid = this.uid;

    this._initEvents();



    if (this._clearBorder) {
        this.el.style.borderWidth = "0";
        this.el.style.padding = "0px";
    }
    this.addCls(this.uiCls);
    this.setWidth(this.width);
    this.setHeight(this.height);

    this.el.style.display = this.visible ? this._displayStyle : "none";
}
mini.extend(mini.Control, mini.Component, {
    jsName: null,

    width: "",
    height: "",

    visible: true,
    readOnly: false,
    enabled: true,

    tooltip: "",

    _readOnlyCls: "mini-readonly",
    _disabledCls: "mini-disabled",

    _create: function () {
        this.el = document.createElement("div");
    },
    _initEvents: function () {
    },
    within: function (e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        return false;
    },

    name: "",
    setName: function (value) {
        this.name = value;

    },
    getName: function () {
        return this.name;
    },



    isAutoHeight: function () {
        var v = this.el.style.height;
        return v == "auto" || v == "";
    },
    isAutoWidth: function () {
        var v = this.el.style.width;
        return v == "auto" || v == "";
    },
    isFixedSize: function () {




        var width = this.width;
        var height = this.height;
        if (parseInt(width) + "px" == width && parseInt(height) + "px" == height) return true;
        return false;
    },

    isRender: function (parentNode) {

        return !!(this.el && this.el.parentNode && this.el.parentNode.tagName);
    },
    render: function (parent, position) {
        if (typeof parent === 'string') {
            if (parent == "#body") parent = document.body;
            else parent = mini.byId(parent);
        }
        if (!parent) return;
        if (!position) position = "append";
        position = position.toLowerCase();

        if (position == "before") {
            jQuery(parent).before(this.el);
        } else if (position == "preend") {
            jQuery(parent).preend(this.el);
        } else if (position == "after") {
            jQuery(parent).after(this.el);
        } else {
            parent.appendChild(this.el);
        }


        this.el.id = this.id;

        this.doLayout();
        this.fire("render");
    },













    getEl: function () {
        return this.el;
    },
    setJsName: function (value) {
        this.jsName = value;
        window[value] = this;
    },
    getJsName: function () {
        return this.jsName;
    },
    setTooltip: function (value) {
        this.tooltip = value;
        this.el.title = value;
    },
    getTooltip: function () {
        return this.tooltip;
    },
    _sizeChaned: function () {
        this.doLayout();
    },
    setWidth: function (value) {
        if (parseInt(value) == value) value += "px";
        this.width = value;
        this.el.style.width = value;
        this._sizeChaned();
    },
    getWidth: function (content) {
        var w = content ? jQuery(this.el).width() : jQuery(this.el).outerWidth();
        if (content && this._borderEl) {
            var b2 = mini.getBorders(this._borderEl);
            w = w - b2.left - b2.right;
        }
        return w;
    },
    setHeight: function (value) {
        if (parseInt(value) == value) value += "px";
        this.height = value;
        this.el.style.height = value;
        this._sizeChaned();
    },
    getHeight: function (content) {
        var h = content ? jQuery(this.el).height() : jQuery(this.el).outerHeight();
        if (content && this._borderEl) {
            var b2 = mini.getBorders(this._borderEl);
            h = h - b2.top - b2.bottom;
        }
        return h;
    },
    getBox: function () {
        return mini.getBox(this.el);
    },
    setBorderStyle: function (value) {

        var el = this._borderEl || this.el;
        mini.setStyle(el, value);
        this.doLayout();
    },
    getBorderStyle: function () {
        return this.borderStyle;
    },
    _clearBorder: true,
    setStyle: function (value) {

        this.style = value;
        mini.setStyle(this.el, value);
        if (this._clearBorder) {
            this.el.style.borderWidth = "0";
        }



        this.width = this.el.style.width;
        this.height = this.el.style.height;

        this._sizeChaned();
    },
    getStyle: function () {
        return this.style;
    },
    setCls: function (cls) {

        this.addCls(cls);
    },
    getCls: function () {
        return this.cls;
    },
    addCls: function (cls) {
        mini.addClass(this.el, cls);
    },
    removeCls: function (cls) {
        mini.removeClass(this.el, cls);
    },
    _doReadOnly: function () {
        if (this.readOnly) {
            this.addCls(this._readOnlyCls);
        } else {
            this.removeCls(this._readOnlyCls);
        }
    },
    setReadOnly: function (value) {
        this.readOnly = value;
        this._doReadOnly();
    },
    getReadOnly: function () {
        return this.readOnly;
    },
    getParent: function (uiCls) {
        var doc = document;
        var p = this.el.parentNode;
        while (p != doc && p != null) {
            var pcontrol = mini.get(p);
            if (pcontrol) {
                if (!mini.isControl(pcontrol)) return null;
                if (!uiCls || pcontrol.uiCls == uiCls) return pcontrol;
            }
            p = p.parentNode;
        }
        return null;
    },
    isReadOnly: function () {
        if (this.readOnly || !this.enabled) return true;
        var p = this.getParent();
        if (p) return p.isReadOnly();
        return false;
    },
    setEnabled: function (value) {
        this.enabled = value;
        if (this.enabled) {
            this.removeCls(this._disabledCls);
        } else {
            this.addCls(this._disabledCls);
        }
        this._doReadOnly();
    },
    getEnabled: function () {
        return this.enabled;
    },
    enable: function () {
        this.setEnabled(true);
    },
    disable: function () {
        this.setEnabled(false);
    },
    _displayStyle: "",
    setVisible: function (value) {
        this.visible = value;
        if (this.el) {
            this.el.style.display = value ? this._displayStyle : "none";
            this.doLayout();
        }
    },
    getVisible: function () {
        return this.visible;
    },
    show: function () {
        this.setVisible(true);
    },
    hide: function () {
        this.setVisible(false);
    },
    isDisplay: function (ignoresFn) {

        if (mini.WindowVisible == false) return false;


        var doc = document.body;
        var p = this.el;
        while (1) {
            if (p == null || !p.style) return false;
            if (p && p.style && p.style.display == "none") {

                if (ignoresFn) {

                    if (ignoresFn(p) !== true) return false;
                }
                else return false;
            }
            if (p == doc) return true;

            p = p.parentNode;

        }
        return true;
    },

    _allowUpdate: true,
    beginUpdate: function () {
        this._allowUpdate = false;
    },
    endUpdate: function () {
        this._allowUpdate = true;
        this.doUpdate();
    },
    doUpdate: function () {

    },
    canLayout: function () {

        if (this._allowLayout == false) return false;
        return this.isDisplay();
    },
    doLayout: function () {

    },
    layoutChanged: function () {
        if (this.canLayout() == false) return;
        this.doLayout();
    },

    _destroyChildren: function (removeEl) {
        if (this.el) {
            var cs = mini.getChildControls(this);
            for (var i = 0, l = cs.length; i < l; i++) {
                var control = cs[i];
                if (control.destroyed !== true) {
                    control.destroy(removeEl);
                }
            }
        }
    },
    destroy: function (removeEl) {

        if (this.destroyed !== true) {
            this._destroyChildren(removeEl);
        }

        if (this.el) {
            mini.clearEvent(this.el);


            if (removeEl !== false) {
                var p = this.el.parentNode;
                if (p) p.removeChild(this.el);
            }
        }
        this._borderEl = null;
        this.el = null;
        mini["unreg"](this);
        this.destroyed = true;
        this.fire("destroy");
    },

    focus: function () {
        try {
            var me = this;

            me.el.focus();

        } catch (e) { };
    },
    blur: function () {
        try {
            var me = this;

            me.el.blur();

        } catch (e) { };
    },

    allowAnim: true,
    setAllowAnim: function (value) {
        this.allowAnim = value;
    },
    getAllowAnim: function () {
        return this.allowAnim;
    },


    _getMaskWrapEl: function () {
        return this.el;
    },
    mask: function (options) {
        if (typeof options == "string") options = { html: options };
        options = options || {};
        options.el = this._getMaskWrapEl();
        if (!options.cls) options.cls = this._maskCls;
        mini.mask(options);
    },
    unmask: function () {

        mini.unmask(this._getMaskWrapEl());


    },
    _maskCls: "mini-mask-loading",
    loadingMsg: "Loading...",
    loading: function (msg) {

        this.mask(msg || this.loadingMsg);
    },
    setLoadingMsg: function (value) {
        this.loadingMsg = value;
    },
    getLoadingMsg: function () {
        return this.loadingMsg;
    },

    _getContextMenu: function (value) {
        var ui = value;
        if (typeof value == "string") {
            ui = mini.get(value);
            if (!ui) {
                mini.parse(value);
                ui = mini.get(value);
            }
        } else if (mini.isArray(value)) {
            ui = {
                type: "menu",
                items: value
            };
        } else if (!mini.isControl(value)) {
            ui = mini.create(value);
        }
        return ui;
    },
    __OnHtmlContextMenu: function (e) {
        var ev = {
            popupEl: this.el,
            htmlEvent: e,
            cancel: false
        };
        this.contextMenu.fire("BeforeOpen", ev);
        if (ev.cancel == true) return;
        this.contextMenu.fire("opening", ev);
        if (ev.cancel == true) return;
        this.contextMenu.showAtPos(e.pageX, e.pageY);
        this.contextMenu.fire("Open", ev);
        return false;
    },
    contextMenu: null,
    setContextMenu: function (value) {
        var ui = this._getContextMenu(value);
        if (!ui) return;
        if (this.contextMenu !== ui) {
            this.contextMenu = ui;
            this.contextMenu.owner = this;
            mini.on(this.el, "contextmenu", this.__OnHtmlContextMenu, this);
        }
    },
    getContextMenu: function () {
        return this.contextMenu;
    },
    setDefaultValue: function (value) {
        this.defaultValue = value;
    },
    getDefaultValue: function () {
        return this.defaultValue;
    },
    setValue: function (value) {
        this.value = value;
    },
    getValue: function () {
        return this.value;
    },





    _afterApply: function (el) {





    },
    dataField: "",
    setDataField: function (value) {
        this.dataField = value;
    },
    getDataField: function () {
        return this.dataField;
    },

    getAttrs: function (el) {




        var attrs = {};

        var cls = el.className;
        if (cls) attrs.cls = cls;

        if (el.value) attrs.value = el.value;
        mini._ParseString(el, attrs,
            ["id", "name", "width", "height", "borderStyle", "value", "defaultValue",
            "contextMenu", "tooltip", "ondestroy", "data-options", "dataField"
             ]
        );

        mini._ParseBool(el, attrs,
            ["visible", "enabled", "readOnly"
             ]
        );

        if (el.readOnly && el.readOnly != "false") attrs.readOnly = true;

        var style = el.style.cssText;
        if (style) {
            attrs.style = style;
        }

        if (isIE9) {
            var bg = el.style.background;
            if (bg) {
                if (!attrs.style) attrs.style = "";
                attrs.style += ";background:" + bg;
            }
        }
        if (this.style) {
            if (attrs.style) attrs.style = this.style + ";" + attrs.style;
            else attrs.style = this.style;
        }
        if (this.borderStyle) {
            if (attrs.borderStyle) attrs.borderStyle = this.borderStyle + ";" + attrs.borderStyle;
            else attrs.borderStyle = this.borderStyle;
        }




        var ts = mini._attrs;
        if (ts) {
            for (var i = 0, l = ts.length; i < l; i++) {
                var t = ts[i];
                var name = t[0];
                var type = t[1];
                if (!type) type = "string";
                if (type == "string") mini._ParseString(el, attrs, [name]);
                else if (type == "bool") mini._ParseBool(el, attrs, [name]);
                else if (type == "int") mini._ParseInt(el, attrs, [name]);
            }
        }


        var options = attrs["data-options"];
        if (options) {
            options = eval("(" + options + ")");
            if (options) {

                mini.copyTo(attrs, options);
            }
        }

        return attrs;
    }
});

mini._attrs = null;
mini.regHtmlAttr = function (attr, type) {
    if (!attr) return;
    if (!type) type = "string";
    if (!mini._attrs) mini._attrs = [];
    mini._attrs.push([attr, type]);
}






__mini_setControls = function (controls, contentEl, scope) {
    contentEl = contentEl || this._contentEl;
    scope = scope || this;
    if (!controls) controls = [];
    if (!mini.isArray(controls)) controls = [controls];


    for (var i = 0, l = controls.length; i < l; i++) {
        var c = controls[i];
        if (typeof c == "string") {
            if (c.indexOf("#") == 0) c = mini.byId(c);
        } else if (mini.isElement(c)) {
        } else {
            c = mini.getAndCreate(c);
            c = c.el;
        }
        if (!c) continue;

        mini.append(contentEl, c);


    }


    mini.parse(contentEl);
    scope.doLayout();
    return scope;
}

mini.Container = function () {
    mini.Container.superclass.constructor.call(this);
    this._contentEl = this.el;
}
mini.extend(mini.Container, mini.Control, {
    setControls: __mini_setControls,
    getContentEl: function () {
        return this._contentEl;
    },
    getBodyEl: function () {
        return this._contentEl;
    }
});





mini.ValidatorBase = function () {
    mini.ValidatorBase.superclass.constructor.call(this);
}
mini.extend(mini.ValidatorBase, mini.Control, {
    required: false,
    requiredErrorText: "This field is required.",
    _requiredCls: "mini-required",

    errorText: "",
    _errorCls: "mini-error",
    _invalidCls: "mini-invalid",

    errorMode: "icon",
    validateOnChanged: true,
    validateOnLeave: true,
    _IsValid: true,

    _tryValidate: function () {
        if (this._tryValidateTimer) clearTimeout(this._tryValidateTimer);
        var me = this;
        this._tryValidateTimer = setTimeout(function () {
            me.validate();
        }, 30);
    },
    validate: function () {

        if (this.enabled == false) {
            this.setIsValid(true);
            return true;
        }
        var e = {
            value: this.getValue(),
            errorText: "",
            isValid: true
        };

        if (this.required) {
            if (mini.isNull(e.value) || String(e.value).trim() === "") {
                e.isValid = false;
                e.errorText = this.requiredErrorText;
            }
        }

        this.fire("validation", e);

        this.errorText = e.errorText;
        this.setIsValid(e.isValid);
        return this.isValid();
    },
    isValid: function () {
        return this._IsValid;
    },
    setIsValid: function (value) {

        this._IsValid = value;
        this.doUpdateValid();

    },
    getIsValid: function () {
        return this._IsValid;
    },
    setValidateOnChanged: function (value) {
        this.validateOnChanged = value;
    },
    getValidateOnChanged: function (value) {
        return this.validateOnChanged;
    },
    setValidateOnLeave: function (value) {
        this.validateOnLeave = value;
    },
    getValidateOnLeave: function (value) {
        return this.validateOnLeave;
    },

    setErrorMode: function (value) {
        if (!value) value = "none";
        this.errorMode = value.toLowerCase();
        if (this._IsValid == false) this.doUpdateValid();
    },
    getErrorMode: function () {
        return this.errorMode;
    },
    setErrorText: function (value) {
        this.errorText = value;
        if (this._IsValid == false) this.doUpdateValid();
    },
    getErrorText: function () {
        return this.errorText;
    },
    setRequired: function (value) {
        this.required = value;
        if (this.required) {
            this.addCls(this._requiredCls);
        } else {
            this.removeCls(this._requiredCls);
        }
    },
    getRequired: function () {
        return this.required;
    },
    setRequiredErrorText: function (value) {
        this.requiredErrorText = value;
    },
    getRequiredErrorText: function () {
        return this.requiredErrorText;
    },
    errorIconEl: null,
    getErrorIconEl: function () {
        return this._errorIconEl;
    },
    _RemoveErrorIcon: function () {

    },
    doUpdateValid: function () {
        var me = this;
        this._doUpdateValidTimer = setTimeout(function () {
            me.__doUpdateValid();
        }, 1);
    },
    __doUpdateValid: function () {
        if (!this.el) return;
        this.removeCls(this._errorCls);
        this.removeCls(this._invalidCls);
        this.el.title = "";
        if (this._IsValid == false) {
            switch (this.errorMode) {
                case "icon":
                    this.addCls(this._errorCls);
                    var icon = this.getErrorIconEl();
                    if (icon) icon.title = this.errorText;
                    break;
                case "border":
                    this.addCls(this._invalidCls);
                    this.el.title = this.errorText;
                default:
                    this._RemoveErrorIcon();
                    break;
            }
        } else {
            this._RemoveErrorIcon();
        }
        this.doLayout();
    },
    _OnValueChanged: function () {
        if (this.validateOnChanged) {
            this._tryValidate();
        }
        this.fire("valuechanged", { value: this.getValue() });
    },
    onValueChanged: function (fn, scope) {
        this.on("valuechanged", fn, scope);
    },
    onValidation: function (fn, scope) {
        this.on("validation", fn, scope);
    },
    getAttrs: function (el) {
        var attrs = mini.ValidatorBase.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["onvaluechanged", "onvalidation",
            "requiredErrorText", "errorMode"
             ]
        );

        mini._ParseBool(el, attrs,
            ["validateOnChanged", "validateOnLeave"
             ]
        );

        var required = el.getAttribute("required");
        if (!required) required = el.required;
        if (!required) {
            var o = el.attributes["required"];
            if (o) {
                required = o.value == 'null' ? null : 'true';
            }
        }
        if (required) {
            attrs.required = required != "false" ? true : false;
        }

        return attrs;
    }
});




mini.ListControl = function () {
    this.data = [];
    this._selecteds = [];
    mini.ListControl.superclass.constructor.call(this);
    this.doUpdate();
}
mini.ListControl.ajaxType = "get";
mini.extend(mini.ListControl, mini.ValidatorBase, {
    defaultValue: '',
    value: '',
    valueField: "id",
    textField: "text",
    delimiter: ',',

    data: null,
    url: "",

    _itemCls: "mini-list-item",
    _itemHoverCls: "mini-list-item-hover",
    _itemSelectedCls: "mini-list-item-selected",

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var value = kv.value;
        delete kv.value;
        var url = kv.url;
        delete kv.url;
        var data = kv.data;
        delete kv.data;

        mini.ListControl.superclass.set.call(this, kv);

        if (!mini.isNull(data)) {
            this.setData(data);
        }
        if (!mini.isNull(url)) {
            this.setUrl(url);
        }
        if (!mini.isNull(value)) {
            this.setValue(value);
        }

        return this;
    },

    uiCls: "mini-list",
    _create: function () {

    },
    _initEvents: function () {
        mini._BindEvents(function () {
            mini_onOne(this.el, 'click', this.__OnClick, this);
            mini_onOne(this.el, 'dblclick', this.__OnDblClick, this);

            mini_onOne(this.el, 'mousedown', this.__OnMouseDown, this);
            mini_onOne(this.el, 'mouseup', this.__OnMouseUp, this);
            mini_onOne(this.el, 'mousemove', this.__OnMouseMove, this);
            mini_onOne(this.el, 'mouseover', this.__OnMouseOver, this);
            mini_onOne(this.el, 'mouseout', this.__OnMouseOut, this);

            mini_onOne(this.el, 'keydown', this.__OnKeyDown, this);
            mini_onOne(this.el, 'keyup', this.__OnKeyUp, this);

            mini_onOne(this.el, 'contextmenu', this.__OnContextMenu, this);














        }, this);
    },
    destroy: function (removeEl) {
        if (this.el) {
            this.el.onclick = null;
            this.el.ondblclick = null;
            this.el.onmousedown = null;
            this.el.onmouseup = null;
            this.el.onmousemove = null;
            this.el.onmouseover = null;
            this.el.onmouseout = null;
            this.el.onkeydown = null;
            this.el.onkeyup = null;
            this.el.oncontextmenu = null;
        }
        mini.ListControl.superclass.destroy.call(this, removeEl);
    },

    name: "",
    setName: function (value) {
        this.name = value;
        if (this._valueEl) mini.setAttr(this._valueEl, "name", this.name);
    },

    getItemByEvent: function (event) {
        var domItem = mini.findParent(event.target, this._itemCls);
        if (domItem) {

            var index = parseInt(mini.getAttr(domItem, "index"));

            return this.data[index];
        }
    },
    addItemCls: function (item, cls) {
        var itemEl = this.getItemEl(item);
        if (itemEl) mini.addClass(itemEl, cls);
    },
    removeItemCls: function (item, cls) {
        var itemEl = this.getItemEl(item);
        if (itemEl) mini.removeClass(itemEl, cls);
    },
    getItemEl: function (item) {
        item = this.getItem(item);
        var index = this.data.indexOf(item);
        var id = this._createItemId(index);
        return document.getElementById(id);
    },
    _focusItem: function (item, view) {

        item = this.getItem(item);
        if (!item) return;
        var dom = this.getItemEl(item);
        if (view && dom) {
            this.scrollIntoView(item);
        }
        if (this._focusedItem == item) {
            if (dom) mini.addClass(dom, this._itemHoverCls);
            return;
        }
        this._blurItem();
        this._focusedItem = item;
        if (dom) mini.addClass(dom, this._itemHoverCls);


    },
    _blurItem: function () {
        if (!this._focusedItem) return;

        try {
            var dom = this.getItemEl(this._focusedItem);
            if (dom) {
                mini.removeClass(dom, this._itemHoverCls);
            }
        } catch (e) { };
        this._focusedItem = null;

    },
    getFocusedItem: function () {
        return this._focusedItem;
    },
    getFocusedIndex: function () {
        return this.data.indexOf(this._focusedItem);
    },
    _scrollViewEl: null,
    scrollIntoView: function (item) {
        try {
            var itemEl = this.getItemEl(item);
            var _scrollViewEl = this._scrollViewEl || this.el;
            mini.scrollIntoView(itemEl, _scrollViewEl, false);
        } catch (e) { }
    },

    getItem: function (item) {
        if (typeof item == "object") return item;
        if (typeof item == "number") return this.data[item];
        return this.findItems(item)[0];
    },
    getCount: function () {
        return this.data.length;
    },
    indexOf: function (item) {
        return this.data.indexOf(item);
    },
    getAt: function (index) {
        return this.data[index];
    },
    updateItem: function (item, options) {
        item = this.getItem(item);
        if (!item) return;
        mini.copyTo(item, options);
        this.doUpdate();
    },


    ajaxType: "",
    setAjaxType: function (value) {

        this.ajaxType = value;
    },
    getAjaxType: function () {
        return this.ajaxType;
    },

    load: function (data) {
        if (typeof data == "string") this.setUrl(data);
        else this.setData(data);
    },
    loadData: function (data) {
        this.setData(data);
    },
    setData: function (data) {
        if (typeof data == "string") {
            data = eval(data);
        }
        if (!mini.isArray(data)) data = [];
        this.data = data;






        this.doUpdate();

        if (this.value != "") {
            this.deselectAll();
            var records = this.findItems(this.value);
            this.selects(records);
        }
    },
    getData: function () {
        return this.data.clone();
    },
    setUrl: function (url) {

        this.url = url;
        this._doLoad({});

    },
    getUrl: function () {
        return this.url;
    },
    _doLoad: function (params) {

        try {
            var url = eval(this.url);
            if (url != undefined) {
                this.url = url;
            }
        } catch (e) { }

        var e = {
            url: this.url,
            async: false,
            type: this.ajaxType ? this.ajaxType : mini.ListControl.ajaxType,
            params: params,
            data: params,
            cache: false,
            cancel: false
        };
        this.fire("beforeload", e);
        if (e.data != e.params && e.params != params) {
            e.data = e.params;
        }
        if (e.cancel == true) return;

        var sf = this;
        var url = e.url;
        mini.copyTo(e, {
            success: function (text) {
                var data = null;
                try {
                    data = mini.decode(text);
                } catch (ex) {
                    data = []
                    if (mini_debugger == true) {
                        alert(url + "\njson is error.");
                    }
                }
                if (sf.dataField) {
                    data = mini._getMap(sf.dataField, data);
                }
                if (!data) data = [];
                var ex = { data: data, cancel: false }
                sf.fire("preload", ex);
                if (ex.cancel == true) return;

                sf.setData(ex.data);

                sf.fire("load");

                setTimeout(function () {
                    sf.doLayout();
                }, 100);

            },
            error: function (jqXHR, textStatus, errorThrown) {
                var e = {
                    xmlHttp: jqXHR,
                    errorMsg: jqXHR.responseText,
                    errorCode: jqXHR.status
                };
                if (mini_debugger == true) {
                    alert(url + "\n" + e.errorCode + "\n" + e.errorMsg);
                }

                sf.fire("loaderror", e);
            }
        });

        this._ajaxer = mini.ajax(e);
    },
    setValue: function (value) {
        if (mini.isNull(value)) value = "";
        if (this.value !== value) {

            this.deselectAll();

            this.value = value;
            if (this._valueEl) this._valueEl.value = value;

            var records = this.findItems(this.value);
            this.selects(records);
        }
    },
    getValue: function () {
        return this.value;
    },
    getFormValue: function () {
        return this.value;
    },
    setValueField: function (valueField) {
        this.valueField = valueField;
    },
    getValueField: function () {
        return this.valueField;
    },
    setTextField: function (value) {
        this.textField = value;
    },
    getTextField: function () {
        return this.textField;
    },

    getItemValue: function (item) {
        return String(mini._getMap(this.valueField, item));
    },
    getItemText: function (item) {
        var t = mini._getMap(this.textField, item);
        return mini.isNull(t) ? '' : String(t);
    },
    getValueAndText: function (records) {
        if (mini.isNull(records)) records = [];
        if (!mini.isArray(records)) {
            records = this.findItems(records);
        }
        var values = [];
        var texts = [];
        for (var i = 0, l = records.length; i < l; i++) {
            var record = records[i];
            if (record) {
                values.push(this.getItemValue(record));
                texts.push(this.getItemText(record));
            }
        }
        return [values.join(this.delimiter), texts.join(this.delimiter)];
    },
    findItems: function (value) {
        if (mini.isNull(value) || value === "") return [];
        if (typeof value == 'function') {
            var fn = value;
            var items = [];
            var data = this.data;
            for (var j = 0, k = data.length; j < k; j++) {
                var record = data[j];
                if (fn(record, j) === true) {
                    items.push(record);
                }
            }
            return items;
        }

        var values = String(value).split(this.delimiter);

        var data = this.data;
        var valueRecords = {};
        for (var j = 0, k = data.length; j < k; j++) {
            var record = data[j];
            var v = record[this.valueField];
            valueRecords[v] = record;
        }

        var records = [];
        for (var i = 0, l = values.length; i < l; i++) {
            var v = values[i];
            var record = valueRecords[v];
            if (record) {
                records.push(record);
            }
        }
        return records;
    },


    removeAll: function () {
        var items = this.getData();
        this.removeItems(items);
    },
    addItems: function (items, index) {
        if (!mini.isArray(items)) return;
        if (mini.isNull(index)) index = this.data.length;
        this.data.insertRange(index, items);
        this.doUpdate();
    },
    addItem: function (item, index) {
        if (!item) return;
        if (this.data.indexOf(item) != -1) return;
        if (mini.isNull(index)) index = this.data.length;
        this.data.insert(index, item);
        this.doUpdate();
    },
    removeItems: function (items) {
        if (!mini.isArray(items)) return;
        this.data.removeRange(items);

        this._checkSelecteds();
        this.doUpdate();
    },
    removeItem: function (item) {
        var index = this.data.indexOf(item);
        if (index != -1) {
            this.data.removeAt(index);
            this._checkSelecteds();
            this.doUpdate();
        }
    },
    moveItem: function (item, index) {
        if (!item || !mini.isNumber(index)) return;


        if (index < 0) index = 0;
        if (index > this.data.length) index = this.data.length;
        this.data.remove(item);

        this.data.insert(index, item);
        this.doUpdate();
    },


    _selected: null,
    _selecteds: [],
    multiSelect: false,
    _checkSelecteds: function () {
        for (var i = this._selecteds.length - 1; i >= 0; i--) {
            var record = this._selecteds[i];
            if (this.data.indexOf(record) == -1) {
                this._selecteds.removeAt(i);
            }
        }
        var vts = this.getValueAndText(this._selecteds);
        this.value = vts[0];
        if (this._valueEl) this._valueEl.value = this.value;
    },
    setMultiSelect: function (value) {
        this.multiSelect = value;
    },
    getMultiSelect: function () {
        return this.multiSelect;
    },
    isSelected: function (record) {
        if (!record) return false;
        return this._selecteds.indexOf(record) != -1;
    },
    getSelecteds: function () {
        var arr = this._selecteds.clone();
        var me = this;
        mini.sort(arr, function (a, b) {
            var index1 = me.indexOf(a);
            var index2 = me.indexOf(b);
            if (index1 > index2) return 1;
            if (index1 < index2) return -1;
            return 0;
        });
        return arr;
    },
    setSelected: function (record) {
        if (record) {
            this._selected = record;
            this.select(record);
        }
    },
    getSelected: function () {
        return this._selected;
    },
    select: function (record) {
        record = this.getItem(record);
        if (!record) return;
        if (this.isSelected(record)) return;
        this.selects([record]);
    },
    deselect: function (record) {
        record = this.getItem(record);
        if (!record) return;
        if (!this.isSelected(record)) return;
        this.deselects([record]);
    },
    selectAll: function () {
        var data = this.data.clone();
        this.selects(data);
    },
    deselectAll: function () {
        this.deselects(this._selecteds);
    },
    clearSelect: function () {
        this.deselectAll();
    },
    selects: function (records) {
        if (!records || records.length == 0) return;
        records = records.clone();
        for (var i = 0, l = records.length; i < l; i++) {
            var record = records[i];
            if (!this.isSelected(record)) {
                this._selecteds.push(record);
            }
        }
        var me = this;
        setTimeout(function () {
            me._doSelects();
        }, 1);
    },
    deselects: function (records) {
        if (!records || records.length == 0) return;
        records = records.clone();
        for (var i = records.length - 1; i >= 0; i--) {
            var record = records[i];
            if (this.isSelected(record)) {
                this._selecteds.remove(record);
            }
        }

        var me = this;
        setTimeout(function () {
            me._doSelects();
        }, 1);
    },
    _doSelects: function () {
        var vts = this.getValueAndText(this._selecteds);
        this.value = vts[0];
        if (this._valueEl) this._valueEl.value = this.value;

        for (var i = 0, l = this.data.length; i < l; i++) {
            var record = this.data[i];
            var select = this.isSelected(record);
            if (select) {
                this.addItemCls(record, this._itemSelectedCls);
            } else {
                this.removeItemCls(record, this._itemSelectedCls);
            }
            var index = this.data.indexOf(record);
            var id = this._createCheckId(index);
            var checkbox = document.getElementById(id);
            if (checkbox) checkbox.checked = !!select;
        }
    },
    _OnSelectionChanged: function (records, select) {
        var vts = this.getValueAndText(this._selecteds);
        this.value = vts[0];
        if (this._valueEl) this._valueEl.value = this.value;

        var e = {
            selecteds: this.getSelecteds(),
            selected: this.getSelected(),
            value: this.getValue()
        };
        this.fire("SelectionChanged", e);
    },
    _createCheckId: function (index) {
        return this.uid + "$ck$" + index;
    },
    _createItemId: function (index) {
        return this.uid + "$" + index;
    },


    __OnClick: function (e) {
        this._fireEvent(e, 'Click');
    },
    __OnDblClick: function (e) {
        this._fireEvent(e, 'Dblclick');
    },
    __OnMouseDown: function (e) {
        this._fireEvent(e, 'MouseDown');
    },
    __OnMouseUp: function (e) {
        this._fireEvent(e, 'MouseUp');
    },
    __OnMouseMove: function (e) {
        this._fireEvent(e, 'MouseMove');
    },
    __OnMouseOver: function (e) {
        this._fireEvent(e, 'MouseOver');
    },
    __OnMouseOut: function (e) {
        this._fireEvent(e, 'MouseOut');
    },
    __OnKeyDown: function (e) {
        this._fireEvent(e, 'KeyDown');
    },
    __OnKeyUp: function (e) {
        this._fireEvent(e, 'KeyUp');
    },
    __OnContextMenu: function (e) {
        this._fireEvent(e, 'ContextMenu');
    },
    _fireEvent: function (e, name) {
        if (!this.enabled) return;


        var item = this.getItemByEvent(e);
        if (!item) return;
        var fn = this['_OnItem' + name];
        if (fn) {
            fn.call(this, item, e);
        } else {
            var eve = {
                item: item,
                htmlEvent: e
            };
            this.fire("item" + name, eve);
        }
    },
    _OnItemClick: function (item, e) {

        if (this.isReadOnly() || this.enabled == false || item.enabled === false) {
            e.preventDefault();
            return;
        }

        var value = this.getValue();

        if (this.multiSelect) {
            if (this.isSelected(item)) {
                this.deselect(item);
                if (this._selected == item) {
                    this._selected = null;
                }
            } else {
                this.select(item);
                this._selected = item;
            }
            this._OnSelectionChanged();
        } else {
            if (!this.isSelected(item)) {
                this.deselectAll();
                this.select(item);
                this._selected = item;
                this._OnSelectionChanged();
            }
        }

        if (value != this.getValue()) {
            this._OnValueChanged();
        }

        var e = {
            item: item,
            htmlEvent: e
        };
        this.fire("itemclick", e);
    },
    _blurOnOut: true,
    _OnItemMouseOut: function (item, e) {
        mini.repaint(this.el);
        if (!this.enabled) return;
        if (this._blurOnOut) {
            this._blurItem();
        }
        var e = {
            item: item,
            htmlEvent: e
        };
        this.fire("itemmouseout", e);
    },
    _OnItemMouseMove: function (item, e) {
        mini.repaint(this.el);
        if (!this.enabled || item.enabled === false) return;

        this._focusItem(item);
        var e = {
            item: item,
            htmlEvent: e
        };
        this.fire("itemmousemove", e);
    },
    onItemClick: function (fn, scope) {
        this.on("itemclick", fn, scope);
    },
    onItemMouseDown: function (fn, scope) {
        this.on("itemmousedown", fn, scope);
    },
    onBeforeLoad: function (fn, scope) {
        this.on("beforeload", fn, scope);
    },
    onLoad: function (fn, scope) {
        this.on("load", fn, scope);
    },
    onLoadError: function (fn, scope) {
        this.on("loaderror", fn, scope);
    },
    onPreLoad: function (fn, scope) {
        this.on("preload", fn, scope);
    },

    getAttrs: function (el) {
        var attrs = mini.ListControl.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["url", "data", "value", "textField", "valueField",
            "onitemclick", "onitemmousemove", "onselectionchanged", "onitemdblclick",
            "onbeforeload", "onload", "onloaderror", "ondataload", "ajaxType"
             ]
        );
        mini._ParseBool(el, attrs,
            ["multiSelect"
             ]
        );

        var valueField = attrs.valueField || this.valueField;
        var textField = attrs.textField || this.textField;
        if (el.nodeName.toLowerCase() == "select") {
            var data = [];
            for (var i = 0, l = el.length; i < l; i++) {
                var op = el.options[i];
                var o = {};
                o[textField] = op.text;
                o[valueField] = op.value;

                data.push(o);
            }
            if (data.length > 0) {
                attrs.data = data;
            }
        }

        return attrs;
    }
});


mini._Layouts = {};
mini.layout = function (el, mustLayout) {
    if (!document.body) return;
    function doLayout(el) {
        if (!el) return;
        var control = mini.get(el);
        if (control) {


            if (control.doLayout) {
                if (!mini._Layouts[control.uid]) {
                    mini._Layouts[control.uid] = control;







                    if (mustLayout !== false || control.isFixedSize() == false) {
                        control.doLayout(false);
                    }

                    delete mini._Layouts[control.uid];
                }
            }
        } else {
            var cs = el.childNodes;
            if (cs) {
                for (var i = 0, l = cs.length; i < l; i++) {
                    var cel = cs[i];
                    doLayout(cel);
                }
            }
        }
    }

    if (!el) el = document.body;
    doLayout(el);

    if (el == document.body) {
        mini.layoutIFrames();
    }
}



mini.applyTo = function (el) {
    el = mini.byId(el);
    if (!el) return this;
    if (mini.get(el)) throw new Error("not applyTo a mini control");


    var config = this.getAttrs(el);
    delete config._applyTo;

    if (mini.isNull(config.defaultValue) && !mini.isNull(config.value)) {
        config.defaultValue = config.value;
    }
    if (mini.isNull(config.defaultText) && !mini.isNull(config.text)) {
        config.defaultText = config.text;
    }

    var p = el.parentNode;
    if (p && this.el != el) {




        p.replaceChild(this.el, el);




    }

    this.set(config);




    this._afterApply(el);

    return this;
}
mini._doParse = function (el) {
    if (!el) return;
    var nodeName = el.nodeName.toLowerCase();
    if (!nodeName) return;

    var className = el.className;
    if (className && className.split) {
        var control = mini.get(el);
        if (!control) {
            var classes = className.split(" ");
            for (var i = 0, l = classes.length; i < l; i++) {
                var cls = classes[i];
                var clazz = mini.getClassByUICls(cls);
                if (clazz) {
                    mini.removeClass(el, cls);
                    var ui = new clazz();
                    mini.applyTo.call(ui, el);
                    el = ui.el;
                    break;
                }
            }
        }
    }

    if (nodeName == "select"
            || mini.hasClass(el, "mini-menu")
            || mini.hasClass(el, "mini-datagrid")
            || mini.hasClass(el, "mini-treegrid")
            || mini.hasClass(el, "mini-tree")
            || mini.hasClass(el, "mini-button")
            || mini.hasClass(el, "mini-textbox")
            || mini.hasClass(el, "mini-buttonedit")
        ) {
        return;
    }

    var children = mini.getChildNodes(el, true);
    for (var i = 0, l = children.length; i < l; i++) {
        var node = children[i];
        if (node.nodeType == 1) {
            if (node.parentNode == el) {
                mini._doParse(node);
            }
        }
    }
}
mini._Removes = [];
mini._firstParse = true;
mini.parse = function (el, layout) {
    if (mini._firstParse) {
        mini._firstParse = false;

        var doms = document.getElementsByTagName("iframe");
        for (var i = 0, l = doms.length; i < l; i++) {
            var d = doms[i];
            d._onload = d.onload;
            d._src = d.src;
            d.onload = function () { };
            d.src = "";
        }
        setTimeout(function () {
            for (var i = 0, l = doms.length; i < l; i++) {
                var d = doms[i];
                if (d._src) {
                    d.onload = d._onload;
                    d.src = d._src;
                    d._src = null;
                }
            }
        }, 10);

    }


    if (typeof el == "string") {
        var id = el;
        el = mini.byId(id);
        if (!el) el = document.body;







    }
    if (el && !mini.isElement(el)) el = el.el;
    if (!el) el = document.body;


    var visible = mini.WindowVisible;
    if (isIE) {
        mini.WindowVisible = false;
    }


    mini._doParse(el);

    mini.WindowVisible = visible;








    mini.layout(el);
}
mini._ParseString = function (el, config, attrs) {
    for (var i = 0, l = attrs.length; i < l; i++) {
        var property = attrs[i];

        var value = mini.getAttr(el, property);
        if (value) {
            config[property] = value;
        }
    }
}
mini._ParseBool = function (el, config, attrs) {
    for (var i = 0, l = attrs.length; i < l; i++) {
        var property = attrs[i];
        var value = mini.getAttr(el, property);
        if (value) {
            config[property] = value == "true" ? true : false;
        }
    }
}
mini._ParseInt = function (el, config, attrs) {
    for (var i = 0, l = attrs.length; i < l; i++) {
        var property = attrs[i];
        var value = parseInt(mini.getAttr(el, property));
        if (!isNaN(value)) {
            config[property] = value;
        }
    }
}









































mini._ParseColumns = function (el) {
    var columns = [];
    var cs = mini.getChildNodes(el);
    for (var i = 0, l = cs.length; i < l; i++) {
        var node = cs[i];
        var jq = jQuery(node);

        var column = {};

        var editor = null, filter = null;


        var subCs = mini.getChildNodes(node);
        if (subCs) {
            for (var ii = 0, li = subCs.length; ii < li; ii++) {
                var subNode = subCs[ii];
                var property = jQuery(subNode).attr("property");
                if (!property) continue;
                property = property.toLowerCase();
                if (property == "columns") {
                    column.columns = mini._ParseColumns(subNode);
                    jQuery(subNode).remove();
                }
                if (property == "editor" || property == "filter") {

                    var className = subNode.className;
                    var classes = className.split(" ");
                    for (var i3 = 0, l3 = classes.length; i3 < l3; i3++) {
                        var cls = classes[i3];
                        var clazz = mini.getClassByUICls(cls);
                        if (clazz) {
                            var ui = new clazz();

                            if (property == "filter") {
                                filter = ui.getAttrs(subNode);
                                filter.type = ui.type;
                            } else {
                                editor = ui.getAttrs(subNode);
                                editor.type = ui.type;
                            }
                            break;
                        }
                    }

                    jQuery(subNode).remove();
                }
            }
        }

        column.header = node.innerHTML;
        mini._ParseString(node, column,
            ["name", "header", "field", "editor", "filter", "renderer", "width", "type", "renderer",
                "headerAlign", "align", "headerCls", "cellCls", "headerStyle", "cellStyle"
                , "displayField"
                , "dateFormat", "listFormat", "mapFormat",
                'trueValue', "falseValue", "dataType", 'vtype', "currencyUnit",
                "summaryType", "summaryRenderer", "groupSummaryType", "groupSummaryRenderer",
                "defaultValue", "defaultText", "decimalPlaces", "data-options"
             ]
        );
        mini._ParseBool(node, column,
            ["visible", "readOnly", "allowSort", "allowResize", "allowMove", "allowDrag", "autoShowPopup",
            "unique", "autoEscape"
             ]
        );

        if (editor) column.editor = editor;
        if (filter) column.filter = filter;

        if (column.dataType) column.dataType = column.dataType.toLowerCase();

        if (column.defaultValue === "true") column.defaultValue = true;
        if (column.defaultValue === "false") column.defaultValue = false;

        columns.push(column);



        var options = column["data-options"];
        if (options) {
            options = eval("(" + options + ")");
            if (options) {

                mini.copyTo(column, options);
            }
        }
    }
    return columns;
}




mini._Columns = {};
mini._getColumn = function (columnType) {
    var columnFn = mini._Columns[columnType.toLowerCase()];
    if (!columnFn) return {};
    return columnFn();
}


mini.IndexColumn = function (config) {
    return mini.copyTo({ width: 30, cellCls: "", align: "center", draggable: false, allowDrag: true,
        init: function (grid) {
            grid.on("addrow", this.__OnIndexChanged, this);
            grid.on("removerow", this.__OnIndexChanged, this);
            grid.on("moverow", this.__OnIndexChanged, this);


            if (grid.isTree) {
                grid.on("loadnode", this.__OnIndexChanged, this);
                this._gridUID = grid.uid;
                this._rowIdField = "_id";
            }
        },
        getNumberId: function (record) {
            return this._gridUID + "$number$" + record[this._rowIdField];
        },
        createNumber: function (grid, rowIndex) {
            if (mini.isNull(grid.pageIndex)) {
                return rowIndex + 1;
            }
            else return (grid.pageIndex * grid.pageSize) + rowIndex + 1;
        },
        renderer: function (e) {
            var grid = e.sender;
            if (this.draggable) {
                if (!e.cellStyle) e.cellStyle = "";
                e.cellStyle += ";cursor:move;";
            }
            var s = '<div id="' + this.getNumberId(e.record) + '">';
            if (mini.isNull(grid.pageIndex)) s += e.rowIndex + 1;
            else s += (grid.pageIndex * grid.pageSize) + e.rowIndex + 1;
            s += '</div>';
            return s;
        },
        __OnIndexChanged: function (e) {
            var grid = e.sender;

            var records = grid.toArray();

            for (var i = 0, l = records.length; i < l; i++) {
                var record = records[i];
                var id = this.getNumberId(record);
                var ck = document.getElementById(id);
                if (ck) ck.innerHTML = this.createNumber(grid, i);
            }

        }
    }, config);
}
mini._Columns["indexcolumn"] = mini.IndexColumn;


mini.CheckColumn = function (config) {
    return mini.copyTo(
        { width: 30, cellCls: "mini-checkcolumn", headerCls: "mini-checkcolumn",
            _multiRowSelect: true,
            header: function (column) {


                var id = this.uid + "checkall";
                var s = '<input type="checkbox" id="' + id + '" />';
                if (this.multiSelect == false) s = "";
                return s;
            },
            getCheckId: function (record) {
                return this._gridUID + "$checkcolumn$" + record[this._rowIdField];
            },
            init: function (grid) {
                grid.on("selectionchanged", this.__OnSelectionChanged, this);
                grid.on("HeaderCellClick", this.__OnHeaderCellClick, this);
            },
            renderer: function (e) {
                var id = this.getCheckId(e.record);
                var selected = e.sender.isSelected ? e.sender.isSelected(e.record) : false;

                var type = "checkbox";

                var grid = e.sender;
                if (grid.multiSelect == false) type = "radio";

                return '<input type="' + type + '" id="' + id + '" ' + (selected ? "checked" : "") + ' hidefocus style="outline:none;" onclick="return false"/>';
            },
            __OnHeaderCellClick: function (e) {
                var grid = e.sender;
                if (e.column != this) return;
                var id = grid.uid + "checkall";
                var ck = document.getElementById(id);
                if (ck) {

                    if (grid.getMultiSelect()) {
                        if (ck.checked) {
                            grid.selectAll();
                        } else {
                            grid.deselectAll();
                        }
                    } else {
                        grid.deselectAll();
                        if (ck.checked) {
                            grid.select(0);
                        }
                    }
                    grid.fire("checkall");
                }
            },
            __OnSelectionChanged: function (e) {
                var grid = e.sender;
                var records = grid.toArray();

                for (var i = 0, l = records.length; i < l; i++) {
                    var record = records[i];
                    var select = grid.isSelected(record);
                    var id = grid.uid + "$checkcolumn$" + record[grid._rowIdField];
                    var ck = document.getElementById(id);

                    if (ck) ck.checked = select;
                }
                var me = this;
                if (!this._timer) {
                    this._timer = setTimeout(function () {
                        me._doCheckState(grid);
                        me._timer = null;
                    }, 10);
                }
            },
            _doCheckState: function (grid) {


                var id = grid.uid + "checkall";
                var ck = document.getElementById(id);
                if (ck && grid._getSelectAllCheckState) {

                    var state = grid._getSelectAllCheckState();
                    if (state == "has") {
                        ck.indeterminate = true;
                        ck.checked = true;
                    } else {
                        ck.indeterminate = false;
                        ck.checked = state;
                    }
                }
            }
        }, config);
};
mini._Columns["checkcolumn"] = mini.CheckColumn;


mini.ExpandColumn = function (config) {
    return mini.copyTo({ width: 30, cellCls: "", align: "center", draggable: false, cellStyle: "padding:0",
        renderer: function (e) {
            return '<a class="mini-grid-ecIcon" href="javascript:#" onclick="return false"></a>';
        },
        init: function (grid) {
            grid.on("cellclick", this.__OnCellClick, this);
        },
        __OnCellClick: function (e) {
            var grid = e.sender;
            if (e.column == this && grid.isShowRowDetail) {
                if (mini.findParent(e.htmlEvent.target, "mini-grid-ecIcon")) {
                    var isShow = grid.isShowRowDetail(e.record);
                    if (grid.autoHideRowDetail) {
                        grid.hideAllRowDetail();
                    }

                    if (isShow) {
                        grid.hideRowDetail(e.record);
                    } else {
                        grid.showRowDetail(e.record);
                    }
                }
            }
        }
    }, config);
}
mini._Columns["expandcolumn"] = mini.ExpandColumn;


mini.CheckBoxColumn = function (config) {
    return mini.copyTo({
        _type: "checkboxcolumn",
        header: "#", headerAlign: "center", cellCls: "mini-checkcolumn", trueValue: true, falseValue: false,
        readOnly: false,
        getCheckId: function (record) {
            return this._gridUID + "$checkbox$" + record[this._rowIdField];
        },
        getCheckBoxEl: function (record) {
            return document.getElementById(this.getCheckId(record));
        },
        renderer: function (e) {
            var id = this.getCheckId(e.record);
            var v = mini._getMap(e.field, e.record);
            var checked = v == this.trueValue ? true : false;
            var type = "checkbox";


            return '<input type="' + type + '" id="' + id + '" ' + (checked ? "checked" : "") + ' hidefocus style="outline:none;" onclick="return false;"/>';
        },




        init: function (grid) {
            this.grid = grid;
            function oneditchange(e) {

                if (grid.isReadOnly() || this.readOnly) return;
                e.value = mini._getMap(e.field, e.record);
                grid.fire("cellbeginedit", e);

                if (e.cancel !== true) {




                    var v = mini._getMap(e.column.field, e.record);
                    var value = v == this.trueValue ? this.falseValue : this.trueValue;
                    if (grid._OnCellCommitEdit) {
                        grid._OnCellCommitEdit(e.record, e.column, value);






                    }
                }
            }
            function onEdit(e) {

                if (e.column == this) {

                    var id = this.getCheckId(e.record);
                    var ck = e.htmlEvent.target;
                    if (ck.id == id) {
                        if (grid.allowCellEdit) {
                            e.cancel = false;
                            oneditchange.call(this, e);
                        } else {
                            if (grid.isEditingRow && grid.isEditingRow(e.record)) {
                                setTimeout(function () {
                                    ck.checked = !ck.checked;
                                }, 1);
                            }
                        }
                    }
                }
            }
            grid.on("cellclick", onEdit, this);
            mini.on(this.grid.el, "keydown", function (e) {
                if (e.keyCode == 32 && grid.allowCellEdit) {
                    var currentCell = grid.getCurrentCell();
                    if (!currentCell) return;
                    var ex = { record: currentCell[0], column: currentCell[1] };
                    ex.field = ex.column.field;
                    oneditchange.call(this, ex);
                    e.preventDefault();
                }
            }, this);


            var tv = parseInt(this.trueValue), fv = parseInt(this.falseValue);
            if (!isNaN(tv)) this.trueValue = tv;
            if (!isNaN(fv)) this.falseValue = fv;
        }
    }, config);
};
mini._Columns["checkboxcolumn"] = mini.CheckBoxColumn;



mini.RadioButtonColumn = function (config) {
    return mini.copyTo({
        _type: "radiobuttoncolumn",
        header: "", headerAlign: "center", cellCls: "mini-checkcolumn", trueValue: true, falseValue: false,
        readOnly: false,
        getCheckId: function (record) {
            return this._gridUID + "$radio$" + record[this._rowIdField];
        },
        getCheckBoxEl: function (record) {
            return document.getElementById(this.getCheckId(record));
        },
        renderer: function (e) {
            var grid = e.sender;
            var id = this.getCheckId(e.record);
            var v = mini._getMap(e.field, e.record);
            var checked = v == this.trueValue ? true : false;
            var type = "radio";
            var name = grid._id + e.column.field;

            var disabled = '';



            var s = '<div style="position:relative;">';
            s += '<input name="' + name + '" type="' + type + '" id="' + id + '" ' + (checked ? "checked" : "") + ' hidefocus style="outline:none;" onclick="return false;" style="position:relative;z-index:1;"/>';
            if (!grid.allowCellEdit) {
                if (!grid.isEditingRow(e.record)) {
                    s += '<div class="mini-grid-radio-mask"></div>';
                }
            }
            s += '</div>';
            return s;
        },




        init: function (grid) {
            this.grid = grid;

            function oneditchange(e) {
                if (grid.isReadOnly() || this.readOnly) return;
                e.value = mini._getMap(e.field, e.record);
                grid.fire("cellbeginedit", e);

                if (e.cancel !== true) {
                    var v = mini._getMap(e.column.field, e.record);
                    if (v == this.trueValue) return;
                    var value = v == this.trueValue ? this.falseValue : this.trueValue;


                    var data = grid.getData();

                    for (var i = 0, l = data.length; i < l; i++) {
                        var row = data[i];
                        if (row == e.record) continue;
                        var v = mini._getMap(e.column.field, row);
                        if (v != this.falseValue) {




                            grid.updateRow(row, e.column.field, this.falseValue);
                        }
                    }

                    if (grid._OnCellCommitEdit) {
                        grid._OnCellCommitEdit(e.record, e.column, value);
                    }
                }
            }
            function onEdit(e) {
                if (e.column == this) {
                    var id = this.getCheckId(e.record);
                    var ck = e.htmlEvent.target;
                    if (ck.id == id) {
                        if (grid.allowCellEdit) {
                            e.cancel = false;
                            oneditchange.call(this, e);
                        } else {
                            if (grid.isEditingRow && grid.isEditingRow(e.record)) {
                                var that = this;
                                setTimeout(function () {
                                    ck.checked = true;


                                    var data = grid.getData();
                                    for (var i = 0, l = data.length; i < l; i++) {
                                        var row = data[i];
                                        if (row == e.record) continue;
                                        var field = e.column.field;
                                        var v = mini._getMap(field, row);
                                        if (v != that.falseValue) {
                                            if (row != e.record) {
                                                if (grid._dataSource) {
                                                    mini._setMap(e.column.field, that.falseValue, row);
                                                    grid._dataSource._setModified(row, field, v);
                                                } else {
                                                    var o = {};
                                                    mini._setMap(field, that.falseValue, o);
                                                    grid._doUpdateRow(row, o);
                                                }
                                            }
                                        }
                                    }


                                }, 1);
                            }
                        }
                    }
                }
            }
            grid.on("cellclick", onEdit, this);

            mini.on(this.grid.el, "keydown", function (e) {
                if (e.keyCode == 32 && grid.allowCellEdit) {
                    var currentCell = grid.getCurrentCell();
                    if (!currentCell) return;
                    if (currentCell[1] != this) return;
                    var ex = { record: currentCell[0], column: currentCell[1] };
                    ex.field = ex.column.field;
                    oneditchange.call(this, ex);
                    e.preventDefault();
                }
            }, this);


            var tv = parseInt(this.trueValue), fv = parseInt(this.falseValue);
            if (!isNaN(tv)) this.trueValue = tv;
            if (!isNaN(fv)) this.falseValue = fv;
        }
    }, config);
};
mini._Columns["radiobuttoncolumn"] = mini.RadioButtonColumn;



mini.ComboBoxColumn = function (config) {
    return mini.copyTo(
        {
            renderer: function (e) {
                var value = !mini.isNull(e.value) ? String(e.value) : "";
                var values = value.split(",");

                var valueField = "id", textField = "text";
                var valueMaps = {};

                var editor = e.column.editor;
                if (editor && editor.type == "combobox") {
                    var combo = this.__editor;
                    if (!combo) {

                        if (mini.isControl(editor)) {
                            combo = editor;
                        } else {
                            editor = mini.clone(editor);
                            combo = mini.create(editor);
                        }
                        this.__editor = combo;
                    }

                    valueField = combo.getValueField();
                    textField = combo.getTextField();

                    valueMaps = this._valueMaps;
                    if (!valueMaps) {
                        valueMaps = {};
                        var data = combo.getData();
                        for (var i = 0, l = data.length; i < l; i++) {
                            var o = data[i];
                            valueMaps[o[valueField]] = o;
                        }
                        this._valueMaps = valueMaps;
                    }
                }

                var texts = [];
                for (var i = 0, l = values.length; i < l; i++) {
                    var id = values[i];
                    var o = valueMaps[id];
                    if (o) {
                        var text = o[textField];
                        if (text === null || text === undefined) {
                            text = "";
                        }
                        texts.push(text);
                    }
                }
                return texts.join(',');
            }
        }, config);
};
mini._Columns["comboboxcolumn"] = mini.ComboBoxColumn;



mini._Resizer = function (grid) {
    this.owner = grid;
    mini.on(this.owner.el, "mousedown", this.__OnMouseDown, this);
}
mini._Resizer.prototype = {
    __OnMouseDown: function (e) {

        var has = mini.hasClass(e.target, "mini-resizer-trigger");
        if (has && this.owner.allowResize) {
            var drag = this._getResizeDrag();
            drag.start(e);
        }
    },
    _getResizeDrag: function () {
        if (!this._resizeDragger) {
            this._resizeDragger = new mini.Drag({
                capture: true,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this._resizeDragger;
    },
    _OnDragStart: function (drag) {

        this.proxy = mini.append(document.body, '<div class="mini-resizer-proxy"></div>');
        this.proxy.style.cursor = "se-resize";

        this.elBox = mini.getBox(this.owner.el);
        mini.setBox(this.proxy, this.elBox);
    },
    _OnDragMove: function (drag) {
        var grid = this.owner;
        var xOffset = drag.now[0] - drag.init[0];
        var yOffset = drag.now[1] - drag.init[1];

        var w = this.elBox.width + xOffset;
        var h = this.elBox.height + yOffset;
        if (w < grid.minWidth) w = grid.minWidth;
        if (h < grid.minHeight) h = grid.minHeight;
        if (w > grid.maxWidth) w = grid.maxWidth;
        if (h > grid.maxHeight) h = grid.maxHeight;

        mini.setSize(this.proxy, w, h);
    },
    _OnDragStop: function (drag, success) {
        if (!this.proxy) return;
        var box = mini.getBox(this.proxy);

        jQuery(this.proxy).remove();
        this.proxy = null;
        this.elBox = null;

        if (success) {
            this.owner.setWidth(box.width);
            this.owner.setHeight(box.height);
            this.owner.fire("resize");
        }
    }
};






mini._topWindow = null;
mini._getTopWindow = function () {
    if (mini._topWindow) return mini._topWindow;
    var ps = [];
    function getParents(me) {
        try {
            me["___try"] = 1;
            ps.push(me);
        } catch (ex) {
        }
        if (me.parent && me.parent != me) {
            getParents(me.parent);
        }
    }
    getParents(window);
    mini._topWindow = ps[ps.length - 1];
    return mini._topWindow;
}

var __ps = mini.getParams();

if (__ps._winid) {
    try {
        window.Owner = mini._getTopWindow()[__ps._winid];
    } catch (ex) {
    }
}







mini._WindowID = "w" + Math.floor(Math.random() * 10000);
mini._getTopWindow()[mini._WindowID] = window;

mini.__IFrameCreateCount = 1;
mini.createIFrame = function (url, onIFrameLoad) {

    var fnName = "__iframe_onload" + mini.__IFrameCreateCount++;
    window[fnName] = __OnLoad;

    if (!url) url = "";
    var urls = url.split("#");
    url = urls[0];

    var t = '_t=' + Math.floor(Math.random() * 1000000);
    if (url.indexOf("?") == -1) {
        url += "?" + t;
    } else {
        url += "&" + t;
    }
    if (urls[1]) {
        url = url + "#" + urls[1];
    }


    var s = '<iframe style="width:100%;height:100%;" onload="' + fnName + '()"  frameborder="0"></iframe>';

    var div = document.createElement("div");
    var iframe = mini.append(div, s);

    var canFireLoad = false;
    setTimeout(function () {
        if (iframe) {
            iframe.src = url;
            canFireLoad = true;
        }
    }, 5);


    var firstLoad = true;
    function __OnLoad() {

        if (canFireLoad == false) return;

        setTimeout(function () {
            if (onIFrameLoad) onIFrameLoad(iframe, firstLoad);
            firstLoad = false;



        }, 1);
    }


    iframe._ondestroy = function () {

        window[fnName] = mini.emptyFn;

        iframe.src = "";
        try {
            iframe.contentWindow.document.write("");
            iframe.contentWindow.document.close();
        } catch (ex) { }
        iframe._ondestroy = null;
        iframe = null;

    }























    return iframe;
}

mini._doOpen = function (options) {
    if (typeof options == "string") {
        options = { url: options };
    }

    options = mini.copyTo({
        width: 700,
        height: 400,
        allowResize: true,
        allowModal: true,
        closeAction: "destroy",

        title: "",
        titleIcon: "",
        iconCls: "",
        iconStyle: "",
        bodyStyle: "padding: 0",

        url: "",

        showCloseButton: true,
        showFooter: false
    }, options);

    options.closeAction = "destroy";

    var onload = options.onload;
    delete options.onload;
    var ondestroy = options.ondestroy;
    delete options.ondestroy;
    var url = options.url;
    delete options.url;

    var box = mini.getViewportBox();
    if (options.width && String(options.width).indexOf('%') != -1) {
        var w = parseInt(options.width);
        options.width = parseInt(box.width * (w / 100));
    }
    if (options.height && String(options.height).indexOf('%') != -1) {
        var h = parseInt(options.height);
        options.height = parseInt(box.height * (h / 100));
    }

    var win = new mini.Window();
    win.set(options);
    win.load(url,
        onload,
        ondestroy
    );
    win.show();

    return win;
}



mini.open = function (options) {
    if (!options) return;

    var url = options.url;
    if (!url) url = "";
    var urls = url.split("#");
    var url = urls[0];

    var t = "_winid=" + mini._WindowID;
    if (url.indexOf("?") == -1) {
        url += "?" + t;
    } else {
        url += "&" + t;
    }
    if (urls[1]) {
        url = url + "#" + urls[1];
    }

    options.url = url;

    options.Owner = window;
    var ps = [];
    function getParents(me) {
        if (me.mini) ps.push(me);
        if (me.parent && me.parent != me) {
            getParents(me.parent);
        }
    }
    getParents(window);

    var win = ps[ps.length - 1];
    return win["mini"]._doOpen(options);
}
mini.openTop = mini.open;


mini.getData = function (url, params, success, error, type) {
    var text = mini.getText(url, params, success, error, type);
    var data = mini.decode(text);
    return data;
}
mini.getText = function (url, params, success, error, type) {
    var returnText = null;
    mini.ajax({
        url: url,
        data: params,
        async: false,
        type: type ? type : "get",
        cache: false,
        success: function (text, http) {
            returnText = text;
            if (success) success(text, http);
        },
        error: error
    });
    return returnText;
}



if (!window.mini_RootPath) {
    mini_RootPath = "/";
}
mini_CreateJSPath = function (js) {
    var scripts = document.getElementsByTagName("script");
    var path = "";
    for (var i = 0, l = scripts.length; i < l; i++) {
        var src = scripts[i].src;
        if (src.indexOf(js) != -1) {
            var ss = src.split(js);
            path = ss[0];
            break;
        }
    }
    var href = location.href;
    href = href.split("#")[0];
    href = href.split("?")[0];
    var ss = href.split("/");
    ss.length = ss.length - 1;
    href = ss.join("/");

    if (path.indexOf("http:") == -1 && path.indexOf("file:") == -1) {
        path = href + "/" + path;
    }
    return path;
}
if (!window.mini_JSPath) {
    mini_JSPath = mini_CreateJSPath("miniui.js");
}




mini.update = function (options, el) {
    if (typeof options == "string") options = { url: options };
    if (el) options.el = el;
    var html = mini.loadText(options.url);
    mini.innerHTML(options.el, html);
    mini.parse(options.el);
}






























mini.createSingle = function (Type) {
    if (typeof Type == "string") {
        Type = mini.getClass(Type);
    }
    if (typeof Type != "function") return;
    var obj = Type.single;
    if (!obj) {
        obj = Type.single = new Type();
    }
    return obj;
}
mini.createTopSingle = function (Type) {
    if (typeof Type != "function") return;

    var typeName = Type.prototype.type;
    if (top && top != window && top.mini && top.mini.getClass(typeName)) {
        return top.mini.createSingle(typeName);
    } else {
        return mini.createSingle(Type);
    }
}



mini.sortTypes = {
    "string": function (s) {
        return String(s).toUpperCase();
    },
    "date": function (s) {
        if (!s) {
            return 0;
        }
        if (mini.isDate(s)) {
            return s.getTime();
        }
        return mini.parseDate(String(s));
    },
    "float": function (s) {
        var val = parseFloat(String(s).replace(/,/g, ""));
        return isNaN(val) ? 0 : val;
    },
    "int": function (s) {
        var val = parseInt(String(s).replace(/,/g, ""), 10);
        return isNaN(val) ? 0 : val;
    },
    "currency": function (s) {
        var val = parseFloat(String(s).replace(/,/g, ""));
        return isNaN(val) ? 0 : val;
    }
};


mini._ValidateVType = function (vtype, value, e, scope) {
    var vtypes = vtype.split(";");
    for (var i = 0, l = vtypes.length; i < l; i++) {
        var vtype = vtypes[i].trim();
        var vv = vtype.split(":");
        var vt = vv[0];
        var args = vtype.substr(vt.length + 1, 1000);
        if (args) args = args.split(",");
        else args = [];

        var fn = mini.VTypes[vt];
        if (fn) {
            var isValid = fn(value, args);
            if (isValid !== true) {
                e.isValid = false;
                var vtext = vv[0] + "ErrorText";
                e.errorText = scope[vtext] || mini.VTypes[vtext] || "";
                e.errorText = String.format(e.errorText, args[0], args[1], args[2], args[3], args[4]);
                break;
            }
        }
    }
}
mini._getErrorText = function (obj, field) {
    if (obj && obj[field]) {
        return obj[field];
    } else {
        return mini.VTypes[field]
    }

}
mini.VTypes = {
    uniqueErrorText: "This field is unique.",
    requiredErrorText: "This field is required.",
    emailErrorText: "Please enter a valid email address.",
    urlErrorText: "Please enter a valid URL.",
    floatErrorText: "Please enter a valid number.",
    intErrorText: "Please enter only digits",
    dateErrorText: "Please enter a valid date. Date format is {0}",
    maxLengthErrorText: "Please enter no more than {0} characters.",
    minLengthErrorText: "Please enter at least {0} characters.",
    maxErrorText: "Please enter a value less than or equal to {0}.",
    minErrorText: "Please enter a value greater than or equal to {0}.",
    rangeLengthErrorText: "Please enter a value between {0} and {1} characters long.",
    rangeCharErrorText: "Please enter a value between {0} and {1} characters long.",
    rangeErrorText: "Please enter a value between {0} and {1}.",

    required: function (v, args) {
        if (mini.isNull(v) || v === "") return false;
        return true;
    },
    email: function (v, args) {
        if (mini.isNull(v) || v === "") return true;
        if (v.search(/^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/) != -1)
            return true;
        else
            return false;
    },
    url: function (v, args) {
        if (mini.isNull(v) || v === "") return true;
        function IsURL(str_url) {
            str_url = str_url.toLowerCase();




            var strRegex = "^((https|http|ftp|rtsp|mms)?:\/\/)"
                        + "?(([0-9a-z_!~*'().&=+$%-]+: )?[0-9a-z_!~*'().&=+$%-]+@)?"
                        + "(([0-9]{1,3}\.){3}[0-9]{1,3}"
                        + "|"
                        + "([0-9a-z_!~*'()-]+\.)*"
                        + "([0-9a-z][0-9a-z-]{0,61})?[0-9a-z]\."
                        + "[a-z]{2,6})"
                        + "(:[0-9]{1,4})?"
                        + "((/?)|"
                        + "(/[0-9a-z_!~*'().;?:@&=+$,%#-]+)+/?)$";
            var re = new RegExp(strRegex);

            if (re.test(str_url)) {
                return (true);
            } else {
                return (false);
            }
        }
        return IsURL(v);
    },
    "int": function (v, args) {
        if (mini.isNull(v) || v === "") return true;
        function isInteger(s) {
            if (s < 0) {
                s = -s;
            }
            var n = String(s);
            return n.length > 0 && !(/[^0-9]/).test(n);
        }
        return isInteger(v);



    },
    "float": function (v, args) {
        if (mini.isNull(v) || v === "") return true;
        function isFloat(s) {

            if (s < 0) {
                s = -s;
            }
            var n = String(s);
            if (n.split(".").length > 2) return false;
            return n.length > 0 && !(/[^0-9.]/).test(n);
        }
        return isFloat(v);



    },
    "date": function (v, args) {
        if (mini.isNull(v) || v === "") return true;
        if (!v) return false;
        var d = null;
        var format = args[0];

        if (format) {
            d = mini.parseDate(v, format);
            if (d && d.getFullYear) {
                if (mini.formatDate(d, format) == v) return true;
            }
        } else {
            d = mini.parseDate(v, "yyyy-MM-dd");
            if (!d) d = mini.parseDate(v, "yyyy/MM/dd");
            if (!d) d = mini.parseDate(v, "MM/dd/yyyy");
            if (d && d.getFullYear) return true;
        }

        return false;
    },
    maxLength: function (v, args) {
        if (mini.isNull(v) || v === "") return true;
        var n = parseInt(args);
        if (!v || isNaN(n)) return true;
        if (v.length <= n) return true;
        else return false;
    },
    minLength: function (v, args) {
        if (mini.isNull(v) || v === "") return true;
        var n = parseInt(args);
        if (isNaN(n)) return true;
        if (v.length >= n) return true;
        else return false;
    },
    rangeLength: function (v, args) {
        if (mini.isNull(v) || v === "") return true;
        if (!v) return false;
        var min = parseFloat(args[0]), max = parseFloat(args[1]);
        if (isNaN(min) || isNaN(max)) return true;
        if (min <= v.length && v.length <= max) return true;
        return false;
    },
    rangeChar: function (v, args) {
        if (mini.isNull(v) || v === "") return true;

        var min = parseFloat(args[0]), max = parseFloat(args[1]);
        if (isNaN(min) || isNaN(max)) return true;

        function isChinese(v) {
            var re = new RegExp("^[\u4e00-\u9fa5]+$");
            if (re.test(v)) return true;
            return false;
        }

        var len = 0;
        var ss = String(v).split("");
        for (var i = 0, l = ss.length; i < l; i++) {
            if (isChinese(ss[i])) {
                len += 2;
            } else {
                len += 1;
            }
        }

        if (min <= len && len <= max) return true;
        return false;
    },
    range: function (v, args) {
        if (mini.VTypes["float"](v, args) == false) return false;

        if (mini.isNull(v) || v === "") return true;
        v = parseFloat(v);
        if (isNaN(v)) return false;
        var min = parseFloat(args[0]), max = parseFloat(args[1]);
        if (isNaN(min) || isNaN(max)) return true;
        if (min <= v && v <= max) return true;
        return false;
    },
    min: function (v, args) {
        if (mini.VTypes["float"](v, args) == false) return false;
        if (mini.isNull(v) || v === "") return true;
        v = parseFloat(v);
        if (isNaN(v)) return false;
        var min = parseFloat(args[0]);
        if (isNaN(min)) return true;
        if (min <= v) return true;
        return false;
    },
    max: function (v, args) {
        if (mini.VTypes["float"](v, args) == false) return false;
        if (mini.isNull(v) || v === "") return true;
        v = parseFloat(v);
        if (isNaN(v)) return false;
        var max = parseFloat(args[0]);
        if (isNaN(max)) return true;
        if (v <= max) return true;
        return false;
    }
};


mini.summaryTypes = {
    "count": function (data) {
        if (!data) data = [];
        return data.length;
    },
    "max": function (data, field) {
        if (!data) data = [];
        var max = null;
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            var value = parseFloat(o[field]);
            if (value === null || value === undefined || isNaN(value)) continue;
            if (max == null || max < value) {
                max = value;
            }
        }
        return max;
    },
    "min": function (data, field) {
        if (!data) data = [];
        var min = null;
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            var value = parseFloat(o[field]);
            if (value === null || value === undefined || isNaN(value)) continue;
            if (min == null || min > value) {
                min = value;
            }
        }
        return min;
    },
    "avg": function (data, field) {
        if (!data) data = [];
        if (data.length == 0) return 0;
        var total = 0;
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            var value = parseFloat(o[field]);
            if (value === null || value === undefined || isNaN(value)) continue;
            total += value;
        }
        var v = total / data.length;
        return v;
    },
    "sum": function (data, field) {
        if (!data) data = [];
        var total = 0;
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            var value = parseFloat(o[field]);
            if (value === null || value === undefined || isNaN(value)) continue;
            total += value;
        }
        return total;
    }
};


mini.formatCurrency = function (num, prefix) {
    if (num === null || num === undefined) num == 0;
    num = String(num).replace(/\$|\,/g, '');
    if (isNaN(num)) {
        num = "0";
    }
    sign = (num == (num = Math.abs(num)));
    num = Math.floor(num * 100 + 0.50000000001);
    cents = num % 100;
    num = Math.floor(num / 100).toString();
    if (cents < 10) {
        cents = "0" + cents;
    }
    for (var i = 0; i < Math.floor((num.length - (1 + i)) / 3); i++) {
        num = num.substring(0, num.length - (4 * i + 3)) + ',' + num.substring(num.length - (4 * i + 3));
    }
    prefix = prefix || '';
    return prefix + (((sign) ? '' : '-') + num + '.' + cents);
}







mini.emptyFn = function () { };
mini.Drag = function (options) {
    mini.copyTo(this, options);
};
mini.Drag.prototype = {
    onStart: mini.emptyFn,
    onMove: mini.emptyFn,
    onStop: mini.emptyFn,
    capture: false,
    fps: 20,
    event: null,
    delay: 80,


    start: function (e) {

        e.preventDefault();
        if (e) this.event = e;

        this.now = this.init = [this.event.pageX, this.event.pageY];

        var bd = document;
        mini.on(bd, 'mousemove', this.move, this);
        mini.on(bd, 'mouseup', this.stop, this);
        mini.on(bd, 'contextmenu', this.contextmenu, this);
        if (this.context) mini.on(this.context, 'contextmenu', this.contextmenu, this);

        this.trigger = e.target;
        mini.selectable(this.trigger, false);
        mini.selectable(bd.body, false);

        if (this.capture) {
            if (isIE) this.trigger.setCapture(true);
            else if (document.captureEvents) document.captureEvents(Event.MOUSEMOVE | Event.MOUSEUP | Event.MOUSEDOWN);
        }
        this.started = false;


        this.startTime = new Date();
    },
    contextmenu: function (e) {
        if (this.context) mini.un(this.context, 'contextmenu', this.contextmenu, this);
        mini.un(document, 'contextmenu', this.contextmenu, this);
        e.preventDefault();
        e.stopPropagation();
    },
    move: function (e) {
        if (this.delay) {
            if (new Date() - this.startTime < this.delay) return;
        }


        if (!this.started) {
            this.started = true;
            this.onStart(this);
        }



        var sf = this;

        if (!this.timer) {
            this.timer = setTimeout(function () {
                sf.now = [e.pageX, e.pageY]
                sf.event = e;
                sf.onMove(sf);
                sf.timer = null;


            }, 5);
        }

    },
    stop: function (e) {




        this.now = [e.pageX, e.pageY]
        this.event = e;

        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null;
        }
        var bd = document;

        mini.selectable(this.trigger, true);
        mini.selectable(bd.body, true);

        if (isIE) {
            this.trigger.setCapture(false);
            this.trigger.releaseCapture();
        }





        var success = mini.MouseButton.Right != e.button;
        if (success == false) {
            e.preventDefault();
        }





        mini.un(bd, 'mousemove', this.move, this);
        mini.un(bd, 'mouseup', this.stop, this);
        var sf = this;
        setTimeout(function () {
            mini.un(document, 'contextmenu', sf.contextmenu, sf);
            if (sf.context) mini.un(sf.context, 'contextmenu', sf.contextmenu, sf);
        }, 1);


        if (this.started) {

            sf.onStop(sf, success);

        }
    }
};



mini.JSON = new (function () {
    var sb = [];
    var _dateFormat = null;
    var useHasOwn = !!{}.hasOwnProperty,
        replaceString = function (a, b) {

            var c = m[b];
            if (c) {


                return c;
            }
            c = b.charCodeAt();
            return "\\u00" + Math.floor(c / 16).toString(16) + (c % 16).toString(16);

        },
        doEncode = function (o, field) {

            if (o === null) {
                sb[sb.length] = "null";
                return;
            }
            var t = typeof o;
            if (t == "undefined") {
                sb[sb.length] = "null";
                return;
            } else if (o.push) {

                sb[sb.length] = '[';
                var b, i, l = o.length, v;
                for (i = 0; i < l; i += 1) {
                    v = o[i];
                    t = typeof v;
                    if (t == "undefined" || t == "function" || t == "unknown") {
                    } else {
                        if (b) {
                            sb[sb.length] = ',';
                        }
                        doEncode(v);

                        b = true;
                    }
                }
                sb[sb.length] = ']';
                return;
            } else if (o.getFullYear) {
                if (_dateFormat) {
                    sb[sb.length] = _dateFormat(o, field);
                } else {
                    var n;
                    sb[sb.length] = '"';
                    sb[sb.length] = o.getFullYear();
                    sb[sb.length] = "-";
                    n = o.getMonth() + 1;
                    sb[sb.length] = n < 10 ? "0" + n : n;
                    sb[sb.length] = "-";
                    n = o.getDate();
                    sb[sb.length] = n < 10 ? "0" + n : n;
                    sb[sb.length] = "T"
                    n = o.getHours();
                    sb[sb.length] = n < 10 ? "0" + n : n;
                    sb[sb.length] = ":"
                    n = o.getMinutes();
                    sb[sb.length] = n < 10 ? "0" + n : n;
                    sb[sb.length] = ":"
                    n = o.getSeconds();
                    sb[sb.length] = n < 10 ? "0" + n : n;
                    sb[sb.length] = '"';
                    return;
                }
            } else if (t == "string") {
                if (strReg1.test(o)) {
                    sb[sb.length] = '"';

                    sb[sb.length] = o.replace(strReg2, replaceString);
                    sb[sb.length] = '"';
                    return;
                }
                sb[sb.length] = '"' + o + '"';
                return;
            } else if (t == "number") {
                sb[sb.length] = o;
                return;
            } else if (t == "boolean") {
                sb[sb.length] = String(o);
                return;
            } else {
                sb[sb.length] = "{";
                var b, i, v;
                for (i in o) {

                    if (!useHasOwn || Object.prototype.hasOwnProperty.call(o, i)) {
                        v = o[i];
                        t = typeof v;
                        if (t == "undefined" || t == "function" || t == "unknown") {
                        } else {
                            if (b) {
                                sb[sb.length] = ',';
                            }
                            doEncode(i);
                            sb[sb.length] = ":";
                            doEncode(v, i)

                            b = true;
                        }
                    }
                }
                sb[sb.length] = "}";
                return;
            }
        },
        m = {
            "\b": '\\b',
            "\t": '\\t',
            "\n": '\\n',
            "\f": '\\f',
            "\r": '\\r',
            '"': '\\"',
            "\\": '\\\\'
        },
        strReg1 = /["\\\x00-\x1f]/,
        strReg2 = /([\x00-\x1f\\"])/g;

    this.encode = function () {

        var ec;
        return function (o, dateFormat) {
            sb = [];

            _dateFormat = dateFormat;
            doEncode(o);

            _dateFormat = null;

            return sb.join("");
        };
    } ();
    this.decode = function () {







        var dateRe1 = /^(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2}(?:\.*\d*)?)Z*$/;

        var dateRe2 = new RegExp('^\/+Date\\((-?[0-9]+)\.*\\)\/+$', 'g');


        var re = /[\"\'](\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2})[\"\']/g;
        return function (json, parseDate) {
            if (json === "" || json === null || json === undefined) return json;

            if (typeof json == 'object') {
                json = this.encode(json);
            }


            function evalParse(json) {
                if (parseDate !== false) {
                    json = json.replace(__js_dateRegEx, "$1new Date($2)");
                    json = json.replace(re, "new Date($1,$2-1,$3,$4,$5,$6)");
                    json = json.replace(__js_dateRegEx2, "new Date($1)");
                }
                return eval('(' + json + ')');
            }


            var data = null;


            if (window.JSON && window.JSON.parse) {

                var dateReviver = function (key, value) {
                    if (typeof value === 'string' && parseDate !== false) {

                        dateRe1.lastIndex = 0;
                        var a = dateRe1.exec(value);
                        if (a) {
                            value = new Date(a[1], a[2] - 1, a[3], a[4], a[5], a[6]);

                            return value;
                        }

                        dateRe2.lastIndex = 0;
                        var a = dateRe2.exec(value);
                        if (a) {
                            value = new Date(parseInt(a[1]));

                            return value;
                        }
                    }
                    return value;
                };

                try {
                    var json2 = json.replace(__js_dateRegEx, "$1\"\/Date($2)\/\"");
                    data = window.JSON.parse(json2, dateReviver);
                } catch (ex) {
                    data = evalParse(json);
                }

            } else {

                data = evalParse(json);
            }
            return data;
        };

    } ();

})();
__js_dateRegEx = new RegExp('(^|[^\\\\])\\"\\\\/Date\\((-?[0-9]+)(?:[a-zA-Z]|(?:\\+|-)[0-9]{4})?\\)\\\\/\\"', "g");
__js_dateRegEx2 = new RegExp('[\"\']\/Date\\(([0-9]+)\\)\/[\"\']', 'g');
mini.encode = mini.JSON.encode;
mini.decode = mini.JSON.decode;

mini.clone = function (o, _clear) {
    if (o === null || o === undefined) return o;
    var json = mini.encode(o);
    var obj = mini.decode(json);

    function clearProp(arr) {
        for (var i = 0, l = arr.length; i < l; i++) {
            var o = arr[i];
            delete o._state;
            delete o._id;
            delete o._pid;
            delete o._uid;
            for (var p in o) {
                var v = o[p];
                if (v instanceof Array) clearProp(v);
            }
        }
    }
    if (_clear !== false) {
        clearProp(obj instanceof Array ? obj : [obj]);
    }

    return obj;
}





var DAY_MS = 86400000,
	HOUR_MS = 3600000,
	MINUTE_MS = 60000;

mini.copyTo(mini, {
    clearTime: function (date) {
        if (!date) return null;
        return new Date(date.getFullYear(), date.getMonth(), date.getDate());
    },
    maxTime: function (date) {
        if (!date) return null;
        return new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59);
    },
    cloneDate: function (date) {
        if (!date) return null;
        return new Date(date.getTime());
    },
    addDate: function (date, num, type) {
        if (!type) type = "D";
        date = new Date(date.getTime());
        switch (type.toUpperCase()) {
            case "Y":
                date.setFullYear(date.getFullYear() + num);
                break;
            case "MO":
                date.setMonth(date.getMonth() + num);
                break;
            case "D":
                date.setDate(date.getDate() + num);
                break;
            case "H":
                date.setHours(date.getHours() + num);
                break;
            case "M":
                date.setMinutes(date.getMinutes() + num);
                break;
            case "S":
                date.setSeconds(date.getSeconds() + num);
                break;
            case "MS":
                date.setMilliseconds(date.getMilliseconds() + num);
                break;
        }
        return date;
    },
    getWeek: function (year, month, day) {
        month += 1;

        var a = Math.floor((14 - (month)) / 12);
        var y = year + 4800 - a;
        var m = (month) + (12 * a) - 3;
        var jd = day + Math.floor(((153 * m) + 2) / 5) +
                     (365 * y) + Math.floor(y / 4) - Math.floor(y / 100) +
                     Math.floor(y / 400) - 32045;

        var d4 = (jd + 31741 - (jd % 7)) % 146097 % 36524 % 1461;
        var L = Math.floor(d4 / 1460);
        var d1 = ((d4 - L) % 365) + L;
        NumberOfWeek = Math.floor(d1 / 7) + 1;
        return NumberOfWeek;
    },

    getWeekStartDate: function (date, weekStartDay) {
        if (!weekStartDay) weekStartDay = 0;
        if (weekStartDay > 6 || weekStartDay < 0) throw new Error("out of weekday");
        var day = date.getDay();
        var num = weekStartDay - day;
        if (day < weekStartDay) {
            num -= 7;
        }
        var d = new Date(date.getFullYear(), date.getMonth(), date.getDate() + num);
        return d;
    },
    getShortWeek: function (week) {
        var weeks = this.dateInfo.daysShort;
        return weeks[week];
    },
    getLongWeek: function (week) {
        var weeks = this.dateInfo.daysLong;
        return weeks[week];
    },
    getShortMonth: function (month) {
        var months = this.dateInfo.monthsShort;
        return months[month];
    },
    getLongMonth: function (month) {
        var months = this.dateInfo.monthsLong;
        return months[month];
    },
    dateInfo: {
        monthsLong: ["January", "Febraury", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        daysLong: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        daysShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
        quarterLong: ['Q1', 'Q2', 'Q3', 'Q4'],
        quarterShort: ['Q1', 'Q2', 'Q3', 'Q4'],
        halfYearLong: ['first half', 'second half'],
        patterns: {
            "d": "M/d/yyyy",
            "D": "dddd, MMMM dd, yyyy",
            "f": "dddd, MMMM dd, yyyy H:mm tt",
            "F": "dddd, MMMM dd, yyyy H:mm:ss tt",
            "g": "M/d/yyyy H:mm tt",
            "G": "M/d/yyyy H:mm:ss tt",
            "m": "MMMM dd",
            "o": "yyyy-MM-ddTHH:mm:ss.fff",
            "s": "yyyy-MM-ddTHH:mm:ss",
            "t": "H:mm tt",
            "T": "H:mm:ss tt",
            "U": "dddd, MMMM dd, yyyy HH:mm:ss tt",
            "y": "MMM, yyyy"
        },
        tt: {
            "AM": "AM",
            "PM": "PM"
        },
        ten: {
            "Early": "Early",
            "Mid": "Mid",
            "Late": "Late"
        },
        today: 'Today',
        clockType: 24
    }
});
Date.prototype.getHalfYear = function () {
    if (!this.getMonth) return null;
    var m = this.getMonth();
    if (m < 6) return 0;
    return 1;
}
Date.prototype.getQuarter = function () {
    if (!this.getMonth) return null;
    var m = this.getMonth();
    if (m < 3) return 0;
    if (m < 6) return 1;
    if (m < 9) return 2;
    return 3;
}





mini.formatDate = function (date, format, locale) {
    if (!date || !date.getFullYear || isNaN(date)) return "";
    var fd = date.toString();

    var dateFormat = mini.dateInfo;
    if (!dateFormat) dateFormat = mini.dateInfo;

    if (typeof (dateFormat) !== "undefined") {
        var pattern = typeof (dateFormat.patterns[format]) !== "undefined" ? dateFormat.patterns[format] : format;

        var year = date.getFullYear();
        var month = date.getMonth();
        var day = date.getDate();

        if (format == "yyyy-MM-dd") {
            month = month + 1 < 10 ? "0" + (month + 1) : month + 1;
            day = day < 10 ? "0" + day : day;
            return year + "-" + month + "-" + day;
        }
        if (format == "MM/dd/yyyy") {
            month = month + 1 < 10 ? "0" + (month + 1) : month + 1;
            day = day < 10 ? "0" + day : day;
            return month + "/" + day + "/" + year;
        }



        fd = pattern.replace(/yyyy/g, year);
        fd = fd.replace(/yy/g, (year + "").substring(2));


        var halfyear = date.getHalfYear();
        fd = fd.replace(/hy/g, dateFormat.halfYearLong[halfyear]);


        var quarter = date.getQuarter();
        fd = fd.replace(/Q/g, dateFormat.quarterLong[quarter]);
        fd = fd.replace(/q/g, dateFormat.quarterShort[quarter]);


        fd = fd.replace(/MMMM/g, dateFormat.monthsLong[month].escapeDateTimeTokens());
        fd = fd.replace(/MMM/g, dateFormat.monthsShort[month].escapeDateTimeTokens());
        fd = fd.replace(/MM/g, month + 1 < 10 ? "0" + (month + 1) : month + 1);
        fd = fd.replace(/(\\)?M/g, function ($0, $1) { return $1 ? $0 : month + 1; });

        var dayOfWeek = date.getDay();
        fd = fd.replace(/dddd/g, dateFormat.daysLong[dayOfWeek].escapeDateTimeTokens());
        fd = fd.replace(/ddd/g, dateFormat.daysShort[dayOfWeek].escapeDateTimeTokens());


        fd = fd.replace(/dd/g, day < 10 ? "0" + day : day);
        fd = fd.replace(/(\\)?d/g, function ($0, $1) { return $1 ? $0 : day; });

        var hour = date.getHours();
        var halfHour = hour > 12 ? hour - 12 : hour;
        if (dateFormat.clockType == 12) {
            if (hour > 12) {
                hour -= 12;
            }
        }


        fd = fd.replace(/HH/g, hour < 10 ? "0" + hour : hour);
        fd = fd.replace(/(\\)?H/g, function ($0, $1) { return $1 ? $0 : hour; });


        fd = fd.replace(/hh/g, halfHour < 10 ? "0" + halfHour : halfHour);
        fd = fd.replace(/(\\)?h/g, function ($0, $1) { return $1 ? $0 : halfHour; });

        var minutes = date.getMinutes();
        fd = fd.replace(/mm/g, minutes < 10 ? "0" + minutes : minutes);
        fd = fd.replace(/(\\)?m/g, function ($0, $1) { return $1 ? $0 : minutes; });

        var seconds = date.getSeconds();
        fd = fd.replace(/ss/g, seconds < 10 ? "0" + seconds : seconds);
        fd = fd.replace(/(\\)?s/g, function ($0, $1) { return $1 ? $0 : seconds; });

        fd = fd.replace(/fff/g, date.getMilliseconds());

        fd = fd.replace(/tt/g, date.getHours() > 12 || date.getHours() == 0 ? dateFormat.tt["PM"] : dateFormat.tt["AM"]);


        var date = date.getDate();
        var tenF = '';
        if (date <= 10) tenF = dateFormat.ten['Early'];
        else if (date <= 20) tenF = dateFormat.ten['Mid'];
        else tenF = dateFormat.ten['Late'];
        fd = fd.replace(/ten/g, tenF);
    }

    return fd.replace(/\\/g, "");
}
String.prototype.escapeDateTimeTokens = function () {
    return this.replace(/([dMyHmsft])/g, "\\$1");
}



mini.fixDate = function (d, check) {
    if (+d) {
        while (d.getDate() != check.getDate()) {
            d.setTime(+d + (d < check ? 1 : -1) * HOUR_MS);
        }
    }
}


mini.parseDate = function (s, ignoreTimezone) {
    try {
        var d = eval(s);
        if (d && d.getFullYear) return d;
    } catch (ex) {
    }

    if (typeof s == 'object') {
        return isNaN(s) ? null : s;
    }
    if (typeof s == 'number') {

        var d = new Date(s * 1000);
        if (d.getTime() != s) return null;
        return isNaN(d) ? null : d;
    }
    if (typeof s == 'string') {

        m = s.match(/^([0-9]{4}).([0-9]*)$/);
        if (m) {
            var date = new Date(m[1], m[2] - 1);
            return date;
        }

        if (s.match(/^\d+(\.\d+)?$/)) {
            var d = new Date(parseFloat(s) * 1000);
            if (d.getTime() != s) return null;
            else return d;
        }
        if (ignoreTimezone === undefined) {
            ignoreTimezone = true;
        }
        var d = mini.parseISO8601(s, ignoreTimezone) || (s ? new Date(s) : null);
        return isNaN(d) ? null : d;
    }

    return null;
}
mini.parseISO8601 = function (s, ignoreTimezone) {



    var m = s.match(/^([0-9]{4})([-\/]([0-9]{1,2})([-\/]([0-9]{1,2})([T ]([0-9]{1,2}):([0-9]{1,2})(:([0-9]{1,2})(\.([0-9]+))?)?(Z|(([-+])([0-9]{2})(:?([0-9]{2}))?))?)?)?)?$/);
    if (!m) {

        m = s.match(/^([0-9]{4})[-\/]([0-9]{2})[-\/]([0-9]{2})[T ]([0-9]{1,2})/);
        if (m) {
            var date = new Date(m[1], m[2] - 1, m[3], m[4]);
            return date;
        }


        m = s.match(/^([0-9]{4}).([0-9]*)/);
        if (m) {
            var date = new Date(m[1], m[2] - 1);
            return date;
        }


        m = s.match(/^([0-9]{4}).([0-9]*).([0-9]*)/);
        if (m) {
            var date = new Date(m[1], m[2] - 1, m[3]);
            return date;
        }


        m = s.match(/^([0-9]{2})-([0-9]{2})-([0-9]{4})$/);
        if (!m) return null;
        else {
            var date = new Date(m[3], m[1] - 1, m[2]);
            return date;
        }
    }
    var date = new Date(m[1], 0, 1);
    if (ignoreTimezone || !m[14]) {
        var check = new Date(m[1], 0, 1, 9, 0);
        if (m[3]) {
            date.setMonth(m[3] - 1);
            check.setMonth(m[3] - 1);
        }
        if (m[5]) {
            date.setDate(m[5]);
            check.setDate(m[5]);
        }
        mini.fixDate(date, check);
        if (m[7]) {
            date.setHours(m[7]);
        }
        if (m[8]) {
            date.setMinutes(m[8]);
        }
        if (m[10]) {
            date.setSeconds(m[10]);
        }
        if (m[12]) {
            date.setMilliseconds(Number("0." + m[12]) * 1000);
        }
        mini.fixDate(date, check);
    } else {
        date.setUTCFullYear(
			m[1],
			m[3] ? m[3] - 1 : 0,
			m[5] || 1
		);
        date.setUTCHours(
			m[7] || 0,
			m[8] || 0,
			m[10] || 0,
			m[12] ? Number("0." + m[12]) * 1000 : 0
		);
        var offset = Number(m[16]) * 60 + (m[18] ? Number(m[18]) : 0);
        offset *= m[15] == '-' ? 1 : -1;
        date = new Date(+date + (offset * 60 * 1000));
    }
    return date;
}


mini.parseTime = function (s, format) {
    if (!s) return null;
    var n = parseInt(s);

    if (n == s && format) {
        d = new Date(0);
        if (format[0] == "H") {
            d.setHours(n);
        } else if (format[0] == "m") {
            d.setMinutes(n);
        } else if (format[0] == "s") {
            d.setSeconds(n);
        }
        return d;
    }

    var d = mini.parseDate(s);
    if (!d) {
        var ss = s.split(":");
        var t1 = parseInt(parseFloat(ss[0]));
        var t2 = parseInt(parseFloat(ss[1]));
        var t3 = parseInt(parseFloat(ss[2]));
        if (!isNaN(t1) && !isNaN(t2) && !isNaN(t3)) {
            d = new Date(0);
            d.setHours(t1);
            d.setMinutes(t2);
            d.setSeconds(t3);
        }
        if (!isNaN(t1) && (format == "H" || format == "HH")) {
            d = new Date(0);
            d.setHours(t1);
        } else if (!isNaN(t1) && !isNaN(t2) && (format == "H:mm" || format == "HH:mm")) {
            d = new Date(0);
            d.setHours(t1);
            d.setMinutes(t2);
        } else if (!isNaN(t1) && !isNaN(t2) && format == "mm:ss") {
            d = new Date(0);
            d.setMinutes(t1);
            d.setSeconds(t2);
        }
    }
    return d;
}





mini.dateInfo = {
    monthsLong: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
    monthsShort: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
    daysLong: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
    daysShort: ["日", "一", "二", "三", "四", "五", "六"],
    quarterLong: ['一季度', '二季度', '三季度', '四季度'],
    quarterShort: ['Q1', 'Q2', 'Q2', 'Q4'],
    halfYearLong: ['上半年', '下半年'],
    patterns: {
        "d": "yyyy-M-d",
        "D": "yyyy年M月d日",
        "f": "yyyy年M月d日 H:mm",
        "F": "yyyy年M月d日 H:mm:ss",
        "g": "yyyy-M-d H:mm",
        "G": "yyyy-M-d H:mm:ss",
        "m": "MMMd日",
        "o": "yyyy-MM-ddTHH:mm:ss.fff",
        "s": "yyyy-MM-ddTHH:mm:ss",
        "t": "H:mm",
        "T": "H:mm:ss",
        "U": "yyyy年M月d日 HH:mm:ss",
        "y": "yyyy年MM月"
    },
    tt: {
        "AM": "上午",
        "PM": "下午"
    },
    ten: {
        "Early": "上旬",
        "Mid": "中旬",
        "Late": "下旬"
    },
    today: '今天',
    clockType: 24
};




mini.append = function (to, html) {
    to = mini.byId(to);
    if (!html || !to) return;
    if (typeof html == "string") {
        if (html.charAt(0) == '#') {
            html = mini.byId(html);
            if (!html) return;
            to.appendChild(html);
            return html;
        } else {
            if (html.indexOf("<tr") == 0) {
                return jQuery(to).append(html)[0].lastChild;
                return;
            }

            var d = document.createElement("div");
            d.innerHTML = html;
            html = d.firstChild;
            while (d.firstChild) {
                to.appendChild(d.firstChild);
            }
            return html;
        }
    } else {
        to.appendChild(html);
        return html;
    }


}
mini.prepend = function (to, html) {
    if (typeof html == "string") {
        if (html.charAt(0) == '#') {
            html = mini.byId(html);
        } else {
            var d = document.createElement("div");
            d.innerHTML = html;
            html = d.firstChild;
        }
    }
    return jQuery(to).prepend(html)[0].firstChild;
}
mini.after = function (to, html) {
    if (typeof html == "string") {
        if (html.charAt(0) == '#') {
            html = mini.byId(html);
        } else {
            var d = document.createElement("div");
            d.innerHTML = html;
            html = d.firstChild;
        }
    }
    if (!html || !to) return;
    to.nextSibling ? to.parentNode.insertBefore(html, to.nextSibling) : to.parentNode.appendChild(html);
    return html;
}
mini.before = function (to, html) {
    if (typeof html == "string") {
        if (html.charAt(0) == '#') {
            html = mini.byId(html);
        } else {
            var d = document.createElement("div");
            d.innerHTML = html;
            html = d.firstChild;
        }
    }
    if (!html || !to) return;
    to.parentNode.insertBefore(html, to);
    return html;
}

mini.__wrap = document.createElement('div');
mini.createElements = function (html) {
    mini.removeChilds(mini.__wrap);
    var isTr = html.indexOf("<tr") == 0;
    if (isTr) {
        html = '<table>' + html + '</table>';
    }
    mini.__wrap.innerHTML = html;
    return isTr ? mini.__wrap.firstChild.rows : mini.__wrap.childNodes;
}

mini_byId = function (id, context) {
    if (typeof id == "string") {
        if (id.charAt(0) == '#') id = id.substr(1);
        var el = document.getElementById(id);
        if (el) return el;
        if (context && !mini.isAncestor(document.body, context)) {


            var els = context.getElementsByTagName("*");
            for (var i = 0, l = els.length; i < l; i++) {
                var el = els[i];
                if (el.id == id) return el;
            }
            el = null;
        }
        return el;
    } else {
        return id;
    }
}
mini_hasClass = function (el, className) {
    el = mini.byId(el);
    if (!el) return;
    if (!el.className) return false;
    var clss = String(el.className).split(" ");
    return clss.indexOf(className) != -1;
}
mini_addClass = function (el, className) {
    if (!className) return;
    if (mini.hasClass(el, className) == false) {
        jQuery(el).addClass(className);
    }
}
mini_removeClass = function (el, className) {
    if (!className) return;
    jQuery(el).removeClass(className);



}

mini_getMargins = function (el) {
    el = mini.byId(el);
    var jq = jQuery(el);
    return {
        top: parseInt(jq.css("margin-top"), 10) || 0,
        left: parseInt(jq.css("margin-left"), 10) || 0,
        bottom: parseInt(jq.css("margin-bottom"), 10) || 0,
        right: parseInt(jq.css("margin-right"), 10) || 0
    };
}
mini_getBorders = function (el) {
    el = mini.byId(el);
    var jq = jQuery(el);
    return {
        top: parseInt(jq.css("border-top-width"), 10) || 0,
        left: parseInt(jq.css("border-left-width"), 10) || 0,
        bottom: parseInt(jq.css("border-bottom-width"), 10) || 0,
        right: parseInt(jq.css("border-right-width"), 10) || 0
    };
}

mini_getPaddings = function (el) {
    el = mini.byId(el);
    var jq = jQuery(el);
    return {
        top: parseInt(jq.css("padding-top"), 10) || 0,
        left: parseInt(jq.css("padding-left"), 10) || 0,
        bottom: parseInt(jq.css("padding-bottom"), 10) || 0,
        right: parseInt(jq.css("padding-right"), 10) || 0
    };
}
mini_setWidth = function (el, width) {
    el = mini.byId(el);
    width = parseInt(width);
    if (isNaN(width) || !el) return;
    if (jQuery.boxModel) {
        var p = mini.getPaddings(el);
        var b = mini.getBorders(el);
        width = width - p.left - p.right - b.left - b.right;
    }


    if (width < 0) width = 0;
    el.style.width = width + "px";
}
mini_setHeight = function (el, height) {
    el = mini.byId(el);
    height = parseInt(height);
    if (isNaN(height) || !el) return;
    if (jQuery.boxModel) {
        var p = mini.getPaddings(el);
        var b = mini.getBorders(el);
        height = height - p.top - p.bottom - b.top - b.bottom;
    }


    if (height < 0) height = 0;
    el.style.height = height + "px";
}
mini_getWidth = function (el, content) {
    el = mini.byId(el);
    if (el.style.display == "none" || el.type == "text/javascript") return 0;
    return content ? jQuery(el).width() : jQuery(el).outerWidth();
}
mini_getHeight = function (el, content) {
    el = mini.byId(el);
    if (el.style.display == "none" || el.type == "text/javascript") return 0;
    return content ? jQuery(el).height() : jQuery(el).outerHeight();
}
mini_setBox = function (el, x, y, width, height) {
    if (y === undefined) {
        y = x.y;
        width = x.width;
        height = x.height;
        x = x.x;
    }
    mini.setXY(el, x, y);
    mini.setWidth(el, width);
    mini.setHeight(el, height);
}
mini_getBox = function (el) {
    var xy = mini.getXY(el);
    var box = {
        x: xy[0],
        y: xy[1],
        width: mini.getWidth(el),
        height: mini.getHeight(el)
    };
    box.left = box.x;
    box.top = box.y;
    box.right = box.x + box.width;
    box.bottom = box.y + box.height;
    return box;
}
mini_setStyle = function (el, style) {
    el = mini.byId(el);
    if (!el || typeof style != "string") return;

    var jq = jQuery(el);
    var styles = style.toLowerCase().split(";");
    for (var i = 0, l = styles.length; i < l; i++) {
        var s = styles[i];
        var ss = s.split(":");
        if (ss.length > 1) {
            if (ss.length > 2) {
                var s1 = ss[0].trim();
                ss.removeAt(0);
                var s2 = ss.join(":").trim();
                jq.css(s1, s2);
            } else {
                jq.css(ss[0].trim(), ss[1].trim());
            }
        }
    }
}
mini_getStyle = function () {
    var f = document.defaultView;
    return new Function('el', 'style', [
        "style.indexOf('-')>-1 && (style=style.replace(/-(\\w)/g,function(m,a){return a.toUpperCase()}));",
        "style=='float' && (style='",
        f ? 'cssFloat' : 'styleFloat',
        "');return el.style[style] || ",
        f ? 'window.getComputedStyle(el, null)[style]' : 'el.currentStyle[style]',
        ' || null;'].join(''));
} ();
mini_isAncestor = function (p, c) {
    var ret = false;
    p = mini.byId(p);
    c = mini.byId(c);
    if (p === c) return true;
    if (p && c) {
        if (p.contains) {
            try {
                return p.contains(c);
            } catch (e) {
                return false;
            }
        } else
            if (p.compareDocumentPosition) {
                return !!(p.compareDocumentPosition(c) & 16);
            } else {
                while (c = c.parentNode) {
                    ret = c == p || ret;
                }
            }
    }
    return ret;
}
mini_findParent = function (p, cls, maxDepth) {
    p = mini.byId(p);
    var b = document.body, depth = 0, stopEl;
    maxDepth = maxDepth || 50;
    if (typeof maxDepth != "number") {
        stopEl = mini.byId(maxDepth);
        maxDepth = 10;
    }
    while (p && p.nodeType == 1 && depth < maxDepth && p != b && p != stopEl) {
        if (mini.hasClass(p, cls)) {
            return p;
        }
        depth++;
        p = p.parentNode;
    }
    return null;
}
mini.copyTo(mini, {
    byId: mini_byId,
    hasClass: mini_hasClass,
    addClass: mini_addClass,
    removeClass: mini_removeClass,

    getMargins: mini_getMargins,
    getBorders: mini_getBorders,
    getPaddings: mini_getPaddings,
    setWidth: mini_setWidth,
    setHeight: mini_setHeight,
    getWidth: mini_getWidth,
    getHeight: mini_getHeight,
    setBox: mini_setBox,
    getBox: mini_getBox,

    setStyle: mini_setStyle,
    getStyle: mini_getStyle,

    repaint: function (el) {
        if (!el) el = document.body;
        mini.addClass(el, "mini-repaint");
        setTimeout(function () {
            mini.removeClass(el, "mini-repaint");
        }, 1);
    },

    getSize: function (el, content) {
        return {
            width: mini.getWidth(el, content),
            height: mini.getHeight(el, content)
        };
    },
    setSize: function (el, width, height) {
        mini.setWidth(el, width);
        mini.setHeight(el, height);
    },
    setX: function (el, x) {
        x = parseInt(x);
        var xy = jQuery(el).offset();

        var y = parseInt(xy.top);
        if (y === undefined) y = xy[1];
        mini.setXY(el, x, y);
    },
    setY: function (el, y) {
        y = parseInt(y);
        var xy = jQuery(el).offset();
        var x = parseInt(xy.left);
        if (x === undefined) x = xy[0];
        mini.setXY(el, x, y);
    },
    setXY: function (el, x, y) {

        var xy = {
            left: parseInt(x),
            top: parseInt(y)
        };
        jQuery(el).offset(xy);
        jQuery(el).offset(xy);
    },
    getXY: function (el) {
        var xy = jQuery(el).offset();
        return [parseInt(xy.left), parseInt(xy.top)];
    },
    getViewportBox: function () {


        var w = jQuery(window).width(), h = jQuery(window).height();
        var x = jQuery(document).scrollLeft(), y = jQuery(document.body).scrollTop();

        if (y == 0 && document.documentElement) y = document.documentElement.scrollTop;

        return {
            x: x, y: y, width: w, height: h, right: x + w, bottom: y + h
        };
    },

    getChildNodes: function (el, all) {
        el = mini.byId(el);
        if (!el) return;
        var nodes = el.childNodes;
        var cs = [];
        for (var i = 0, l = nodes.length; i < l; i++) {
            var c = nodes[i];
            if (c.nodeType == 1 || all === true) {
                cs.push(c);
            }
        }
        return cs;
    },














    removeChilds: function (el, butEl) {
        el = mini.byId(el);
        if (!el) return;
        var cs = mini.getChildNodes(el, true);
        for (var i = 0, l = cs.length; i < l; i++) {
            var c = cs[i];
            if (butEl && c == butEl) {
            } else {
                el.removeChild(cs[i]);
            }
        }
    },
    isAncestor: mini_isAncestor,
    findParent: mini_findParent,
    findChild: function (el, cls) {
        el = mini.byId(el);
        var els = el.getElementsByTagName('*');
        for (var i = 0, l = els.length; i < l; i++) {
            var el = els[i];
            if (mini.hasClass(el, cls)) return el;
        }
    },
    isAncestor: function (p, c) {
        var ret = false;
        p = mini.byId(p);
        c = mini.byId(c);
        if (p === c) return true;
        if (p && c) {
            if (p.contains) {
                try {
                    return p.contains(c);
                } catch (e) { return false }
            } else
                if (p.compareDocumentPosition) {
                    return !!(p.compareDocumentPosition(c) & 16);
                } else {
                    while (c = c.parentNode) {
                        ret = c == p || ret;
                    }
                }
        }
        return ret;
    },
    getOffsetsTo: function (el, target) {
        var o = this.getXY(el), e = this.getXY(target);
        return [o[0] - e[0], o[1] - e[1]];
    },
    scrollIntoView: function (el, container, hscroll) {
        var c = mini.byId(container) || document.body,
        	o = this.getOffsetsTo(el, c),
            l = o[0] + c.scrollLeft,
            t = o[1] + c.scrollTop,
            b = t + el.offsetHeight,
            r = l + el.offsetWidth,
        	ch = c.clientHeight,
        	ct = parseInt(c.scrollTop, 10),
        	cl = parseInt(c.scrollLeft, 10),
        	cb = ct + ch,
        	cr = cl + c.clientWidth;

        if (el.offsetHeight > ch || t < ct) {
            c.scrollTop = t;
        } else if (b > cb) {
            c.scrollTop = b - ch;
        }
        c.scrollTop = c.scrollTop;

        if (hscroll !== false) {
            if (el.offsetWidth > c.clientWidth || l < cl) {
                c.scrollLeft = l;
            } else if (r > cr) {
                c.scrollLeft = r - c.clientWidth;
            }
            c.scrollLeft = c.scrollLeft;
        }
        return this;
    },
    setOpacity: function (el, opacity) {
        jQuery(el).css({
            "opacity": opacity
        });
    },
    selectable: function (el, selected) {
        el = mini.byId(el);
        if (!!selected) {
            jQuery(el).removeClass('mini-unselectable');
            if (isIE) el.unselectable = "off";
            else {
                el.style.MozUserSelect = '';
                el.style.KhtmlUserSelect = '';
                el.style.UserSelect = '';

            }
        } else {
            jQuery(el).addClass('mini-unselectable');
            if (isIE) el.unselectable = 'on';
            else {
                el.style.MozUserSelect = 'none';
                el.style.UserSelect = 'none';
                el.style.KhtmlUserSelect = 'none';
            }
        }
    },
    selectRange: function (el, iStart, iEnd) {
        if (el.createTextRange) {
            var oRange = el.createTextRange();
            oRange.moveStart("character", iStart);
            oRange.moveEnd("character", iEnd - el.value.length);
            oRange.select();
        } else {
            if (el.setSelectionRange) {
                el.setSelectionRange(iStart, iEnd);
            }
        }
        try {
            el.focus();
        } catch (e) {
        }
    },
    getSelectRange: function (el) {
        el = mini.byId(el);
        if (!el) return;
        try {
            el.focus();
        } catch (e) {
        }
        var start = 0, end = 0;
        if (el.createTextRange && document.selection) {

            var r = document.selection.createRange().duplicate();
            r.moveEnd('character', el.value.length);
            if (r.text === '') {
                start = el.value.length;
            }
            else {
                start = el.value.lastIndexOf(r.text);
            }


            var r = document.selection.createRange().duplicate();
            r.moveStart('character', -el.value.length);
            end = r.text.length;

        } else {
            start = el.selectionStart;
            end = el.selectionEnd;
        }

        return [start, end];
    }











});
(function () {
    var fixAttr = {
        tabindex: 'tabIndex',
        readonly: 'readOnly',
        'for': 'htmlFor',
        'class': 'className',
        maxlength: 'maxLength',
        cellspacing: 'cellSpacing',
        cellpadding: 'cellPadding',
        rowspan: 'rowSpan',
        colspan: 'colSpan',
        usemap: 'useMap',
        frameborder: 'frameBorder',
        contenteditable: 'contentEditable'
    };

    var div = document.createElement('div');
    div.setAttribute('class', 't');
    var supportSetAttr = div.className === 't';

    mini.setAttr = function (el, name, val) {
        el.setAttribute(supportSetAttr ? name : (fixAttr[name] || name), val);
    }
    mini.getAttr = function (el, name) {
        if (name == "value" && (isIE6 || isIE7)) {
            var a = el.attributes[name]
            return a ? a.value : null;
        }

        var v = el.getAttribute(supportSetAttr ? name : (fixAttr[name] || name));

        if (typeof v == "function") {
            v = el.attributes[name].value;
        }


        if (v == null && name == "onload") {
            var node = el.getAttributeNode ? el.getAttributeNode(name) : null;
            if (node) {
                v = node.nodeValue;
            }
        }

        return v;
    }















})()














mini_preventDefault = function () {
    if (window.event) {
        window.event.returnValue = false;
    }
}
mini_stopPropogation = function () {
    if (window.event) {
        window.event.cancelBubble = true;
    }
}
mini_onOne = function (el, type, fn, scope) {


    if (!el) return;
    var name = "on" + type.toLowerCase();

    el[name] = function (e) {
        e = e || window.event;
        e.target = e.target || e.srcElement;
        if (!e.preventDefault) {
            e.preventDefault = mini_preventDefault;
        }
        if (!e.stopPropogation) {
            e.stopPropogation = mini_stopPropogation;
        }
        var ret = fn.call(scope, e);
        if (ret === false) return false;
    }
}



mini_on = function (el, type, fn, scope) {
    el = mini.byId(el);
    scope = scope || el;
    if (!el || !type || !fn || !scope) return false
    var listener = mini.findListener(el, type, fn, scope);
    if (listener) return false;
    var method = mini.createDelegate(fn, scope);
    mini.listeners.push([el, type, fn, scope, method]);
    if (isFirefox && type == 'mousewheel') type = 'DOMMouseScroll';
    jQuery(el).bind(type, method);
};
mini_un = function (el, type, fn, scope) {
    el = mini.byId(el);
    scope = scope || el;
    if (!el || !type || !fn || !scope) return false
    var listener = mini.findListener(el, type, fn, scope);
    if (!listener) return false;
    mini.listeners.remove(listener);
    if (isFirefox && type == 'mousewheel') type = 'DOMMouseScroll';
    jQuery(el).unbind(type, listener[4]);

};
mini.copyTo(mini, {
    listeners: [],
    on: mini_on,
    un: mini_un,
    findListener: function (el, type, fn, scope) {
        el = mini.byId(el);
        scope = scope || el;
        if (!el || !type || !fn || !scope) return false
        var listeners = mini.listeners;
        for (var i = 0, l = listeners.length; i < l; i++) {
            var listener = listeners[i];
            if (listener[0] == el
                && listener[1] == type
                && listener[2] == fn
                && listener[3] == scope
            ) {
                return listener;
            }
        }
    },
    clearEvent: function (el, type) {
        el = mini.byId(el);
        if (!el) return false;
        var listeners = mini.listeners;
        for (var i = listeners.length - 1; i >= 0; i--) {
            var listener = listeners[i];
            if (listener[0] == el) {
                if (!type || type == listener[1]) {
                    mini.un(el, listener[1], listener[2], listener[3]);
                }
            }
        }
        el.onmouseover = el.onmousedown = null;
    }




});



mini.__windowResizes = [];
mini.onWindowResize = function (fn, scope) {
    mini.__windowResizes.push([fn, scope]);
}
mini.on(window, "resize", function (e) {
    var events = mini.__windowResizes;
    for (var i = 0, l = events.length; i < l; i++) {
        var event = events[i];
        event[0].call(event[1], e);
    }
});


mini.htmlEncode = function (str) {

    if (typeof str !== "string") return str;
    var s = "";
    if (str.length == 0) return "";
    s = str;
    s = s.replace(/&/g, "&amp;");
    s = s.replace(/</g, "&lt;");
    s = s.replace(/>/g, "&gt;");
    s = s.replace(/ /g, "&nbsp;");
    s = s.replace(/\'/g, "&#39;");
    s = s.replace(/\"/g, "&quot;");

    return s;
}

mini.htmlDecode = function (str) {
    if (typeof str !== "string") return str;
    var s = "";
    if (str.length == 0) return "";
    s = str.replace(/&gt;/g, "&");
    s = s.replace(/&lt;/g, "<");
    s = s.replace(/&gt;/g, ">");
    s = s.replace(/&nbsp;/g, " ");
    s = s.replace(/&#39;/g, "\'");
    s = s.replace(/&quot;/g, "\"");

    return s;
}



mini.copyTo(Array.prototype, {
    add: Array.prototype.enqueue = function (item) {
        this[this.length] = item;
        return this;
    },
    getRange: function (start, end) {
        var arr = [];
        for (var i = start; i <= end; i++) {
            var o = this[i];
            if (o) {
                arr[arr.length] = o;
            }
        }
        return arr;
    },
    addRange: function (array) {
        for (var i = 0, j = array.length; i < j; i++) this[this.length] = array[i];
        return this;
    },
    clear: function () {
        this.length = 0;
        return this;
    },
    clone: function () {
        if (this.length === 1) {
            return [this[0]];
        }
        else {
            return Array.apply(null, this);
        }
    },
    contains: function (item) {
        return (this.indexOf(item) >= 0);
    },
    indexOf: function (item, from) {
        var len = this.length;
        for (var i = (from < 0) ? Math.max(0, len + from) : from || 0; i < len; i++) {
            if (this[i] === item) return i;
        }
        return -1;
    },
    dequeue: function () {
        return this.shift();
    },
    insert: function (index, item) {
        this.splice(index, 0, item);
        return this;
    },
    insertRange: function (index, items) {
        for (var i = items.length - 1; i >= 0; i--) {
            var item = items[i];
            this.splice(index, 0, item);

        }
        return this;
    },
    remove: function (item) {
        var index = this.indexOf(item);
        if (index >= 0) {
            this.splice(index, 1);
        }
        return (index >= 0);
    },
    removeAt: function (index) {
        var ritem = this[index];
        this.splice(index, 1);
        return ritem;
    },
    removeRange: function (items) {
        items = items.clone();
        for (var i = 0, l = items.length; i < l; i++) {
            this.remove(items[i]);
        }
    }
});



mini.Keyboard = {
    Left: 37,
    Top: 38,
    Right: 39,
    Bottom: 40,

    PageUp: 33,
    PageDown: 34,
    End: 35,
    Home: 36,

    Enter: 13,
    ESC: 27,
    Space: 32,
    Tab: 9,
    Del: 46,

    F1: 112,
    F2: 113,
    F3: 114,
    F4: 115,
    F5: 116,
    F6: 117,
    F7: 118,
    F8: 119,
    F9: 120,
    F10: 121,
    F11: 122,
    F12: 123
};


var ua = navigator.userAgent.toLowerCase(),
    check = function (r) {
        return r.test(ua);
    },
    DOC = document,
    isStrict = DOC.compatMode == "CSS1Compat",
    isOpera = Object.prototype.toString.call(window.opera) == '[object Opera]',
    isChrome = check(/chrome/),
    isWebKit = check(/webkit/),
    isSafari = !isChrome && check(/safari/),
    isSafari2 = isSafari && check(/applewebkit\/4/),
    isSafari3 = isSafari && check(/version\/3/),
    isSafari4 = isSafari && check(/version\/4/),
    isIE = !!window.attachEvent && !isOpera,
    isIE7 = isIE && check(/msie 7/),
    isIE8 = isIE && check(/msie 8/),
    isIE9 = isIE && check(/msie 9/),
    isIE10 = isIE && document.documentMode == 10,
    isIE6 = isIE && !isIE7 && !isIE8 && !isIE9 && !isIE10,
    isFirefox = navigator.userAgent.indexOf("Firefox") > 0,
    isGecko = !isWebKit && check(/gecko/),
    isGecko2 = isGecko && check(/rv:1\.8/),
    isGecko3 = isGecko && check(/rv:1\.9/),
    isBorderBox = isIE && !isStrict,
    isWindows = check(/windows|win32/),
    isMac = check(/macintosh|mac os x/),
    isAir = check(/adobeair/),
    isLinux = check(/linux/),
    isSecure = /^https/i.test(window.location.protocol);

if (isIE6) {
    try {
        DOC.execCommand("BackgroundImageCache", false, true);
    } catch (e) { }
}



mini.boxModel = !isBorderBox;
mini.isIE = isIE;
mini.isIE6 = isIE6;
mini.isIE7 = isIE7;
mini.isIE8 = isIE8;
mini.isIE9 = isIE9;
mini.isIE10 = isIE10;
mini.isFirefox = isFirefox;
mini.isOpera = isOpera;
mini.isSafari = isSafari;
mini.isChrome = isChrome;

if (jQuery) jQuery.boxModel = mini.boxModel;








mini.noBorderBox = false;
if (jQuery.boxModel == false && isIE && isIE9 == false) mini.noBorderBox = true;

mini.MouseButton = {
    Left: 0,
    Middle: 1,
    Right: 2
}
if (isIE && !isIE9 && !isIE10) {
    mini.MouseButton = {
        Left: 1,
        Middle: 4,
        Right: 2
    }
}





mini._MaskID = 1;
mini._MaskObjects = {};
mini.mask = function (options) {


    var el = mini.byId(options);
    if (mini.isElement(el)) options = { el: el };
    else if (typeof options == "string") options = { html: options };

    options = mini.copyTo({
        html: "",
        cls: "",
        style: "",

        backStyle: "background:#ccc"
    }, options);
    options.el = mini.byId(options.el);
    if (!options.el) options.el = document.body;
    var el = options.el;

    mini["unmask"](options.el);
    el._maskid = mini._MaskID++;
    mini._MaskObjects[el._maskid] = options;

    var maskEl = mini.append(el, '<div class="mini-mask">' +
        '<div class="mini-mask-background" style="' + options.backStyle + '"></div>' +
                        '<div class="mini-mask-msg ' + options.cls + '" style="' + options.style + '">' + options.html + '</div>'
        + '</div>');

    options.maskEl = maskEl;
    if (!mini.isNull(options.opacity)) {
        mini.setOpacity(maskEl.firstChild, options.opacity);
    }

    function center() {
        msgEl.style.display = "block";
        var size = mini.getSize(msgEl);
        msgEl.style.marginLeft = -size.width / 2 + "px";
        msgEl.style.marginTop = -size.height / 2 + "px";
    }
    var msgEl = maskEl.lastChild;
    msgEl.style.display = "none";

    setTimeout(function () {
        center();
    }, 0);





}
mini["unmask"] = function (el) {
    el = mini.byId(el);
    if (!el) el = document.body;
    var options = mini._MaskObjects[el._maskid];
    if (!options) return;
    delete mini._MaskObjects[el._maskid];
    var maskEl = options.maskEl;
    options.maskEl = null;
    if (maskEl && maskEl.parentNode) {
        maskEl.parentNode.removeChild(maskEl);
    }
}


mini.Cookie = {
    get: function (sName) {
        var aCookie = document.cookie.split("; ");
        var lastMatch = null;
        for (var i = 0; i < aCookie.length; i++) {
            var aCrumb = aCookie[i].split("=");
            if (sName == aCrumb[0]) {
                lastMatch = aCrumb;
            }
        }
        if (lastMatch) {
            var v = lastMatch[1];
            if (v === undefined) return v;
            return unescape(v);
        }
        return null;
    },
    set: function (name, value, expires, domain) {
        var LargeExpDate = new Date();
        if (expires != null) {


            LargeExpDate = new Date(LargeExpDate.getTime() + (expires * 1000 * 3600 * 24));
        }

        document.cookie = name + "=" + escape(value) + ((expires == null) ? "" : ("; expires=" + LargeExpDate.toGMTString())) + ";path=/" + (domain ? "; domain=" + domain : "");
    },
    del: function (name, domain) {
        this.set(name, null, -100, domain);
    }
};


mini.copyTo(mini, {

    treeToArray: function (nodes, nodesField, idField, parentIdField, parentId) {
        if (!nodesField) nodesField = 'children';
        var array = [];
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            array[array.length] = node;

            if (parentIdField) node[parentIdField] = parentId;

            var childrenNodes = node[nodesField];
            if (childrenNodes && childrenNodes.length > 0) {
                var id = node[idField];
                var childrenArray = this.treeToArray(childrenNodes, nodesField, idField, parentIdField, id);
                array.addRange(childrenArray);
            }
        }
        return array;
    },

    arrayToTree: function (data, nodesField, idField, parentIdField) {
        if (!nodesField) nodesField = 'children';
        idField = idField || '_id';
        parentIdField = parentIdField || '_pid';

        var nodes = [];


        var idHash = {};
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            if (!o) continue;
            var id = o[idField];
            if (id !== null && id !== undefined) {
                idHash[id] = o;
            }
            delete o[nodesField];
        }


        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            var p = idHash[o[parentIdField]];
            if (!p) {
                nodes.push(o);
                continue;
            }
            if (!p[nodesField]) {
                p[nodesField] = [];
            }
            p[nodesField].push(o);
        }
        return nodes;
    }
});
mini.treeToList = mini.treeToArray;
mini.listToTree = mini.arrayToTree;

function UUID() {
    var s = [], itoh = '0123456789ABCDEF'.split('');
    for (var i = 0; i < 36; i++) s[i] = Math.floor(Math.random() * 0x10);
    s[14] = 4;
    s[19] = (s[19] & 0x3) | 0x8;
    for (var i = 0; i < 36; i++) s[i] = itoh[s[i]];
    s[8] = s[13] = s[18] = s[23] = '-';
    return s.join('');
}


String.format = function (format) {
    var args = Array.prototype.slice.call(arguments, 1);
    format = format || "";
    return format.replace(/\{(\d+)\}/g, function (m, i) {
        return args[i];
    });
}
String.prototype.trim = function () {
    var re = /^\s+|\s+$/g;
    return function () { return this.replace(re, ""); };
} ();




mini.copyTo(mini, {
    measureText: function (el, text, style) {
        if (!this.measureEl) {
            this.measureEl = mini.append(document.body, '<div></div>');
        }

        this.measureEl.style.cssText = "position:absolute;left:-1000px;top:-1000px;visibility:hidden;";
        if (typeof el == "string") {
            this.measureEl.className = el;

        } else {
            this.measureEl.className = "";

            var j1 = jQuery(el);
            var j2 = jQuery(this.measureEl);
            var csses = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'];
            for (var i = 0, l = csses.length; i < l; i++) {
                var css = csses[i];
                j2.css(css, j1.css(css));
            }
        }
        if (style) mini.setStyle(this.measureEl, style);
        this.measureEl.innerHTML = text;
        return mini.getSize(this.measureEl);
    }
});



jQuery(function () {

    var sss = new Date();
    mini.isReady = true;
    mini.parse();
    mini._FireBindEvents();




    if ((mini.getStyle(document.body, "overflow") == "hidden" || mini.getStyle(document.documentElement, "overflow") == "hidden")
        && (isIE6 || isIE7)) {


        jQuery(document.body).css("overflow", "visible");
        jQuery(document.documentElement).css("overflow", "visible");
    }
    mini.__LastWindowWidth = document.documentElement.clientWidth;
    mini.__LastWindowHeight = document.documentElement.clientHeight;

});
mini_onload = function (e) {

    if (mini.isIE8) {
        $(document.body).addClass('ie8');
    }

    mini.layout(null, false);
    mini.on(window, "resize", mini_onresize);

}
mini.on(window, "load", mini_onload);

mini.__LastWindowWidth = document.documentElement.clientWidth;
mini.__LastWindowHeight = document.documentElement.clientHeight;
mini.doWindowResizeTimer = null;

mini.allowLayout = true;




mini_onresize = function (e) {


    if (mini.doWindowResizeTimer) {
        clearTimeout(mini.doWindowResizeTimer);
    }

    mini.WindowVisible = mini.isWindowDisplay();

    if (mini.WindowVisible == false || mini.allowLayout == false) return;

    if (typeof Ext != "undefined") {
        mini.doWindowResizeTimer = setTimeout(function () {
            var __LastWindowWidth = document.documentElement.clientWidth;
            var __LastWindowHeight = document.documentElement.clientHeight;
            if (mini.__LastWindowWidth == __LastWindowWidth && mini.__LastWindowHeight == __LastWindowHeight) {
            } else {

                mini.__LastWindowWidth = __LastWindowWidth;
                mini.__LastWindowHeight = __LastWindowHeight;
                mini.layout(null, false);
            }
            mini.doWindowResizeTimer = null;
        }, 300);
    } else {
        var deferTime = 100;
        try {
            if (parent && parent != window && parent.mini) {
                deferTime = 0;
            }
        } catch (ex) {
        }
        mini.doWindowResizeTimer = setTimeout(function () {
            var __LastWindowWidth = document.documentElement.clientWidth;
            var __LastWindowHeight = document.documentElement.clientHeight;




            if (mini.__LastWindowWidth == __LastWindowWidth && mini.__LastWindowHeight == __LastWindowHeight) {
            } else {

                mini.__LastWindowWidth = __LastWindowWidth;
                mini.__LastWindowHeight = __LastWindowHeight;
                mini.layout(null, false);
            }
            mini.doWindowResizeTimer = null;
        }, deferTime);
    }
}




mini.isDisplay = function (p, body) {
    var doc = body || document.body;
    while (1) {
        if (p == null || !p.style) return false;
        if (p && p.style && p.style.display == "none") return false;
        if (p == doc) return true;

        p = p.parentNode;

    }
    return true;
};


mini.isWindowDisplay = function () {
    try {
        var parentWindow = window.parent;
        var isIFrame = parentWindow != window;

        if (isIFrame) {
            var _iframes = parentWindow.document.getElementsByTagName("iframe");
            var _frames = parentWindow.document.getElementsByTagName("frame");
            var iframes = [];
            for (var i = 0, l = _iframes.length; i < l; i++) {
                iframes.push(_iframes[i]);
            }
            for (var i = 0, l = _frames.length; i < l; i++) {
                iframes.push(_frames[i]);
            }

            var iframe = null;
            for (var i = 0, l = iframes.length; i < l; i++) {
                var el = iframes[i];
                if (el.contentWindow == window) {
                    iframe = el;
                    break;
                }
            }
            if (!iframe) return false;

            return mini.isDisplay(iframe, parentWindow.document.body);


        } else {
            return true;
        }
    } catch (e) {
        return true;
    }
};


mini.WindowVisible = mini.isWindowDisplay();














mini.layoutIFrames = function (parentNode) {
    if (!parentNode) parentNode = document.body;
    if (!parentNode) return;
    var iframes = parentNode.getElementsByTagName("iframe");
    setTimeout(function () {
        for (var i = 0, l = iframes.length; i < l; i++) {
            var el = iframes[i];
            try {
                if (mini.isDisplay(el) && mini.isAncestor(parentNode, el)) {
                    if (el.contentWindow.mini) {
                        if (el.contentWindow.mini.WindowVisible == false) {
                            el.contentWindow.mini.WindowVisible = el.contentWindow.mini.isWindowDisplay();
                            el.contentWindow.mini.layout();
                        } else {
                            el.contentWindow.mini.layout(null, false);
                        }
                    }
                    el.contentWindow.mini.layoutIFrames();
                }
            } catch (ex) { }
        }
    }, 30);
}


$.ajaxSetup({
    cache: false
})


if (isIE) {



}



























mini_unload = function (e) {


    if (!window.mini) return;

    try {
        var win = mini._getTopWindow();
        win[mini._WindowID] = '';
        delete win[mini._WindowID];
    } catch (ex) {

    }


    var iframes = document.body.getElementsByTagName("iframe");
    if (iframes.length > 0) {

        var IFrames = [];
        for (var i = 0, l = iframes.length; i < l; i++) {
            IFrames.push(iframes[i]);
        }

        for (var i = 0, l = IFrames.length; i < l; i++) {
            try {
                var iframe = IFrames[i];
                iframe._ondestroy = null;
                iframe.src = "";
                try {
                    iframe.contentWindow.document.write("");
                    iframe.contentWindow.document.close();
                } catch (ex) { }
                if (iframe.parentNode) iframe.parentNode.removeChild(iframe);
            } catch (e) { }
        }
    }

    var cs = mini.getComponents();
    for (var i = 0, l = cs.length; i < l; i++) {
        var control = cs[i];
        if (control.destroyed !== true) {
            control.destroy(false);
        }
    }

    cs.length = 0;
    cs = null;

    mini.un(window, "unload", mini_unload);
    mini.un(window, "load", mini_onload);
    mini.un(window, "resize", mini_onresize);

    mini.components = {};
    mini.classes = {};
    mini.uiClasses = {};
    mini.uids = {};

    mini._topWindow = null;
    window.mini = null;
    window.Owner = null;
    window.CloseOwnerWindow = null;

    try {

    } catch (e) { }







}
mini.on(window, "unload", mini_unload);




function __OnIFrameMouseDown() {

}
function __BindIFrames() {
    if (mini.isIE10) return;
    var iframes = document.getElementsByTagName("iframe");
    for (var i = 0, l = iframes.length; i < l; i++) {
        var iframe = iframes[i];

        try {
            if (iframe.contentWindow) {
                iframe.contentWindow.document.onmousedown = __OnIFrameMouseDown;
            }




        } catch (e) { }

    }
}





mini.zIndex = 1000;
mini.getMaxZIndex = function () {
    return mini.zIndex++;
}


function js_isTouchDevice() {
    try {
        document.createEvent("TouchEvent");
        return true;
    } catch (e) {
        return false;
    }
}
function js_touchScroll(id) {
    if (js_isTouchDevice()) {
        var el = typeof id == "string" ? document.getElementById(id) : id;
        var scrollStartPos = 0;

        el.addEventListener("touchstart", function (event) {
            scrollStartPos = this.scrollTop + event.touches[0].pageY;
            event.preventDefault();
        }, false);

        el.addEventListener("touchmove", function (event) {
            this.scrollTop = scrollStartPos - event.touches[0].pageY;
            event.preventDefault();
        }, false);
    }
}


























































































































































































































































































































































mini._placeholder = function (el) {
    el = mini.byId(el);
    if (!el || !isIE || isIE10) return;

    function doLabel() {
        var label = el._placeholder_label;

        if (!label) return;

        var placeholder = el.getAttribute("placeholder");
        if (!placeholder) placeholder = el.placeholder;
        if (!el.value && !el.disabled) {
            label.innerHTML = placeholder;
            label.style.display = "";
        } else {
            label.style.display = "none";
        }
    }

    if (el._placeholder) {
        doLabel();
        return;
    }
    el._placeholder = true;

    var label = document.createElement("label");
    label.className = "mini-placeholder-label";
    el.parentNode.appendChild(label);
    el._placeholder_label = label;

    label.onmousedown = function () {
        el.focus();
    }


    el.onpropertychange = function (e) {
        e = e || window.event;
        if (e.propertyName == "value") {

            doLabel();
        }
    }

    doLabel();


    mini.on(el, "focus", function (e) {
        if (!el.readOnly) {
            label.style.display = "none";
        }
    });
    mini.on(el, "blur", function (e) {
        doLabel();
    });

}



mini.ajax = function (options) {
    if (!options.dataType) {
        options.dataType = "text";
    }



    return window.jQuery.ajax(options);
}


if (typeof window.rootpath == "undefined") {
    rootpath = "/";
}

mini.loadJS = function (src, callback) {
    if (!src) return;
    if (typeof callback == "function") {
        return loadJS._async(src, callback);
    } else {
        return loadJS._sync(src);
    }
}
mini.loadJS._js = {};
mini.loadJS._async = function (src, callback) {
    var state = mini.loadJS._js[src];
    if (!state) {
        state = mini.loadJS._js[src] = { create: false, loaded: false, callbacks: [] };
    }
    if (state.loaded) {
        setTimeout(function () {
            callback();
        }, 1);
        return;
    } else {
        state.callbacks.push(callback);
        if (state.create) return;
    }

    state.create = true;

    var head = document.getElementsByTagName('head')[0];
    var js = document.createElement('script');
    js.src = src;
    js.type = 'text/javascript';

    function doCallback() {
        for (var i = 0; i < state.callbacks.length; i++) {
            var fn = state.callbacks[i];
            if (fn) fn();
        }
        state.callbacks.length = 0;
    }

    setTimeout(function () {
        if (document.all) {
            js.onreadystatechange = function () {
                if (js.readyState == 'loaded' || js.readyState == 'complete') {
                    doCallback();
                    state.loaded = true;
                }
            }
        } else {
            js.onload = function () {
                doCallback();
                state.loaded = true;
            }
        }
        head.appendChild(js);
    }, 1);
    return js;
}
mini.loadJS._sync = function (src) {
    if (loadJS._js[src]) return;
    loadJS._js[src] = { create: true, loaded: true, callbacks: [] };

    var head = document.getElementsByTagName('head')[0];
    var js = document.createElement('script');
    js.type = 'text/javascript';
    js.text = loadText(src);
    head.appendChild(js);
    return js;
}

mini.loadText = function (url) {
    var text = "";
    var isLocal = document.all && location.protocol == "file:";


    var xmlhttp = null;
    if (isLocal) {
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    } else {
        if (window.XMLHttpRequest) {
            xmlhttp = new XMLHttpRequest();
        }
        else if (window.ActiveXObject) {
            xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
        }
    }


    xmlhttp.onreadystatechange = state_Change;

    var d = '_t=' + new Date().getTime();
    if (url.indexOf("?") == -1) d = "?" + d;
    else d = "&" + d;
    url += d;

    xmlhttp.open("GET", url, false);
    xmlhttp.send(null);

    function state_Change() {
        if (xmlhttp.readyState == 4) {
            var statusCode = isLocal ? 0 : 200;
            if (xmlhttp.status == statusCode) {
                text = xmlhttp.responseText;
            }
            else {

            }
        }
    }
    return text;
}

mini.loadJSON = function (url) {
    var text = loadText(url);
    var o = eval("(" + text + ")");
    return o;
}


mini.loadCSS = function (src, id) {
    if (!src) return;
    if (loadCSS._css[src]) return;
    var head = document.getElementsByTagName('head')[0];
    var link = document.createElement('link');
    if (id) link.id = id;
    link.href = src;
    link.rel = 'stylesheet';
    link.type = 'text/css';
    head.appendChild(link);
    return link;
}
mini.loadCSS._css = {};


mini.innerHTML = function (el, html) {
    if (typeof el == 'string') el = document.getElementById(el);
    if (!el) return;
    html = '<div style="display:none">&nbsp;</div>' + html;
    el.innerHTML = html;
    mini.__executeScripts(el);
    var d = el.firstChild;

}
mini.__executeScripts = function (d) {
    var scripts = d.getElementsByTagName("script")
    for (var i = 0, l = scripts.length; i < l; i++) {
        var sc = scripts[i];
        var src = sc.src;
        if (src) {
            mini.loadJS(src);
        } else {
            var ns = document.createElement('script');
            ns.type = "text/javascript";
            ns.text = sc.text;
            d.appendChild(ns);
        }
    }
    for (var i = scripts.length - 1; i >= 0; i--) {
        var sc = scripts[i];
        sc.parentNode.removeChild(sc);
    }
}


mini.DataBinding = function () {
    this._bindFields = [];
    this._bindForms = [];
    mini.DataBinding.superclass.constructor.call(this);
}
mini.extend(mini.DataBinding, mini.Component, {
    bindField: function (control, source, field, mode, convert) {
        control = mini.get(control);
        source = mini.get(source);
        if (!control || !source || !field) return;
        var bind = { control: control, source: source, field: field, convert: convert, mode: mode };
        this._bindFields.push(bind);

        source.on("currentchanged", this.__OnCurrentChanged, this);
        control.on("valuechanged", this.__OnValueChanged, this);
    },
    bindForm: function (form, source, mode, convert) {
        form = mini.byId(form);
        source = mini.get(source);
        if (!form || !source) return;

        var form = new mini.Form(form);
        var controls = form.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            this.bindField(control, source, control.getName(), mode, convert);
        }
    },

    __OnCurrentChanged: function (e) {
        if (this._doSetting) return;
        this._doSetting = true;

        var source = e.sender;
        var record = e.record;


        for (var i = 0, l = this._bindFields.length; i < l; i++) {
            var bind = this._bindFields[i];
            if (bind.source != source) continue;

            var control = bind.control;
            var field = bind.field;
            if (control.setValue) {
                if (record) {
                    var value = record[field];
                    control.setValue(value);
                } else {
                    control.setValue("");
                }
            }

            if (control.setText && control.textName) {
                if (record) {
                    control.setText(record[control.textName]);
                } else {
                    control.setText("");
                }
            }
        }

        var me = this;
        setTimeout(function () {
            me._doSetting = false;
        }, 10);
    },
    __OnValueChanged: function (e) {

        if (this._doSetting) return;
        this._doSetting = true;

        var control = e.sender;
        var value = control.getValue();



        for (var i = 0, l = this._bindFields.length; i < l; i++) {
            var bind = this._bindFields[i];

            if (bind.control != control || bind.mode === false) continue;
            var source = bind.source;
            var current = source.getCurrent();
            if (!current) continue;

            var obj = {};
            obj[bind.field] = value;

            if (control.getText && control.textName) {
                obj[control.textName] = control.getText();
            }

            source.updateRow(current, obj);

        }

        var me = this;
        setTimeout(function () {
            me._doSetting = false;
        }, 10);
    }
});
mini.regClass(mini.DataBinding, "databinding");


mini.DataSet = function () {
    this._sources = {};
    this._data = {};
    this._links = [];

    this._originals = {};

    mini.DataSet.superclass.constructor.call(this);
}
mini.extend(mini.DataSet, mini.Component, {
    add: function (name, listControl) {
        if (!name || !listControl) return;
        this._sources[name] = listControl;
        this._data[name] = [];


        listControl.autoCreateNewID = true;
        listControl._originalIdField = listControl.getIdField();
        listControl._clearOriginals = false;

        listControl.on("addrow", this.__OnRowChanged, this);
        listControl.on("updaterow", this.__OnRowChanged, this);
        listControl.on("deleterow", this.__OnRowChanged, this);
        listControl.on("removerow", this.__OnRowChanged, this);
        listControl.on("preload", this.__OnDataPreLoad, this);

        listControl.on("selectionchanged", this.__OnDataSelectionChanged, this);
    },
    addLink: function (name, childName, parentField) {
        if (!name || !childName || !parentField) return;
        if (!this._sources[name] || !this._sources[childName]) return;

        var link = {
            parentName: name,
            childName: childName,
            parentField: parentField
        };
        this._links.push(link);
    },
    clearData: function () {
        this._data = {};
        this._originals = {};
        for (var name in this._sources) {
            this._data = [];
        }
    },
    getData: function () {
        return this._data;
    },
    _getNameByListControl: function (listControl) {
        for (var name in this._sources) {
            var c = this._sources[name];
            if (c == listControl) return name;
        }
    },
    _getRecord: function (name, record, idField) {
        var rows = this._data[name];
        if (!rows) return false;
        for (var i = 0, l = rows.length; i < l; i++) {
            var row = rows[i];
            if (row[idField] == record[idField]) return row;
        }
        return null;
    },

    __OnRowChanged: function (e) {
        var type = e.type;
        var record = e.record;
        var name = this._getNameByListControl(e.sender);
        var oldRow = this._getRecord(name, record, e.sender.getIdField());

        var rows = this._data[name];
        if (oldRow) {
            var rows = this._data[name];
            rows.remove(oldRow);
        }

        if (type == "removerow" && record._state == "added") {
        } else {
            rows.push(record);
        }

        this._originals[name] = e.sender._originals;


        if (record._state == "added") {
            var parentSource = this._getParentSource(e.sender);
            if (parentSource) {
                var current = parentSource.getSelected();
                if (current) {
                    record._parentId = current[parentSource.getIdField()];
                } else {
                    rows.remove(record);
                }
            }
        }
    },
    __OnDataPreLoad: function (e) {
        var source = e.sender;
        var name = this._getNameByListControl(source);
        var idField = e.sender.getIdField();

        var rows = this._data[name];
        var maps = {};
        for (var i = 0, l = rows.length; i < l; i++) {
            var row = rows[i];
            maps[row[idField]] = row;
        }


        var ors = this._originals[name]
        if (ors) {
            source._originals = ors;
        }


        var nowData = e.data || [];
        for (var i = 0, l = nowData.length; i < l; i++) {
            var row = nowData[i];
            var old = maps[row[idField]];
            if (old) {
                delete old._uid;
                mini.copyTo(row, old);
            }
        }


        var parentSource = this._getParentSource(source);
        if (source.getPageIndex && source.getPageIndex() == 0) {
            var adds = [];
            for (var i = 0, l = rows.length; i < l; i++) {
                var row = rows[i];
                if (row._state == "added") {
                    if (parentSource) {
                        var current = parentSource.getSelected();
                        if (current && current[parentSource.getIdField()] == row._parentId) {
                            adds.push(row);
                        }
                    } else {
                        adds.push(row);
                    }
                }
            }
            adds.reverse();
            nowData.insertRange(0, adds);
        }


        var removes = [];
        for (var i = nowData.length - 1; i >= 0; i--) {
            var row = nowData[i];
            var old = maps[row[idField]];
            if (old && old._state == "removed") {
                nowData.removeAt(i);
                removes.push(old);
            }
        }




    },

    _getParentSource: function (source) {
        var childName = this._getNameByListControl(source);
        for (var i = 0, l = this._links.length; i < l; i++) {
            var link = this._links[i];
            if (link.childName == childName) {
                return this._sources[link.parentName];
            }
        }
    },
    _getLinks: function (source) {
        var name = this._getNameByListControl(source);
        var links = [];
        for (var i = 0, l = this._links.length; i < l; i++) {
            var link = this._links[i];
            if (link.parentName == name) {
                links.push(link);
            }
        }
        return links;
    },
    __OnDataSelectionChanged: function (e) {
        var grid1 = e.sender;
        var record = grid1.getSelected();

        var links = this._getLinks(grid1);
        for (var i = 0, l = links.length; i < l; i++) {
            var link = links[i];
            var grid2 = this._sources[link.childName];

            if (record) {
                var args = {};
                args[link.parentField] = record[grid1.getIdField()];
                grid2.load(args);
            } else {
                grid2.loadData([]);
            }
        }
    }
});
mini.regClass(mini.DataSet, "dataset");


mini.Hidden = function () {
    mini.Hidden.superclass.constructor.call(this);

}
mini.extend(mini.Hidden, mini.Control, {
    _clearBorder: false,
    formField: true,
    value: "",

    uiCls: "mini-hidden",
    _create: function () {
        this.el = document.createElement("input");
        this.el.type = "hidden";
        this.el.className = "mini-hidden";
    },
    setName: function (value) {

        this.name = value;
        this.el.name = value;
    },
    setValue: function (value) {
        if (value === null || value === undefined) value = "";
        this.value = value;
        if (mini.isDate(value)) {
            var y = value.getFullYear();
            var m = value.getMonth() + 1;
            var d = value.getDate();
            m = m < 10 ? "0" + m : m;
            d = d < 10 ? "0" + d : d;
            this.el.value = y + "-" + m + "-" + d;
        } else {
            this.el.value = value;
        }
    },
    getValue: function () {
        return this.value;
    },
    getFormValue: function () {
        return this.el.value;
    }
});

mini.regClass(mini.Hidden, "hidden");


mini.Popup = function () {
    mini.Popup.superclass.constructor.call(this);

    this.setVisible(false);
    this.setAllowDrag(this.allowDrag);
    this.setAllowResize(this.allowResize);
}
mini.extend(mini.Popup, mini.Container, {
    _clearBorder: false,

    uiCls: "mini-popup",
    _create: function () {
        var el = this.el = document.createElement("div");
        this.el.className = "mini-popup";
        this._contentEl = this.el;
    },

    _initEvents: function () {
        mini._BindEvents(function () {
            mini_onOne(this.el, "mouseover", this.__OnMouseOver, this);



        }, this);

    },
    doLayout: function () {
        if (!this.canLayout()) return;
        mini.Popup.superclass.doLayout.call(this);
        this._doShadow();


        var cs = this.el.childNodes;
        if (cs) {
            for (var i = 0, l = cs.length; i < l; i++) {
                var cel = cs[i];
                mini.layout(cel);
            }
        }
    },
    destroy: function (removeEl) {
        if (this.el) {
            this.el.onmouseover = null;
        }

        mini.un(document, "mousedown", this.__OnBodyMouseDown, this);
        mini.un(window, "resize", this.__OnWindowResize, this);
        if (this._modalEl) {
            jQuery(this._modalEl).remove();
            this._modalEl = null;
        }
        if (this.shadowEl) {
            jQuery(this.shadowEl).remove();
            this.shadowEl = null;
        }

        mini.Popup.superclass.destroy.call(this, removeEl);
    },
    setWidth: function (value) {
        if (parseInt(value) == value) value += "px";
        this.width = value;

        if (value.indexOf("px") != -1) {
            mini.setWidth(this.el, value);
        } else {
            this.el.style.width = value;
        }
        this._sizeChaned();
    },
    setHeight: function (value) {
        if (parseInt(value) == value) value += "px";
        this.height = value;
        if (value.indexOf("px") != -1) {
            mini.setHeight(this.el, value);
        } else {
            this.el.style.height = value;
        }
        this._sizeChaned();
    },
    setBody: function (value) {
        if (!value) return;
        if (!mini.isArray(value)) value = [value];
        for (var i = 0, l = value.length; i < l; i++) {
            mini.append(this._contentEl, value[i]);
        }
    },
    getAttrs: function (el) {
        var attrs = mini.Popup.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["popupEl", "popupCls", "showAction", "hideAction", "xAlign", "yAlign", "modalStyle",
            "onbeforeopen", "open", "onbeforeclose", "onclose"
                ]
        );
        mini._ParseBool(el, attrs,
            ["showModal", "showShadow", "allowDrag", "allowResize"
                ]
        );
        mini._ParseInt(el, attrs,
            ["showDelay", "hideDelay", "xOffset", "yOffset",
            "minWidth", "minHeight", "maxWidth", "maxHeight"
                ]
        );
        var cs = mini.getChildNodes(el, true);
        attrs.body = cs;
        return attrs;
    }

});
mini.regClass(mini.Popup, "popup");


mini.Popup_prototype = {

    isPopup: false,

    popupEl: null,
    popupCls: "",

    showAction: "mouseover",
    hideAction: "outerclick",
    showDelay: 300,
    hideDelay: 500,

    xAlign: "left",
    yAlign: "below",
    xOffset: 0,
    yOffset: 0,

    minWidth: 50,
    minHeight: 25,
    maxWidth: 2000,
    maxHeight: 2000,

    showModal: false,
    showShadow: true,

    modalStyle: "opacity:0.2",

    _dragCls: "mini-popup-drag",
    _resizeCls: "mini-popup-resize",
    allowDrag: false,
    allowResize: false,

    _unbindPopupEl: function () {
        if (!this.popupEl) return;
        mini.un(this.popupEl, "click", this.__OnLeftClick, this);
        mini.un(this.popupEl, "contextmenu", this.__OnRightClick, this);
        mini.un(this.popupEl, "mouseover", this.__OnMouseOver, this);

    },
    _bindPopupEl: function () {
        if (!this.popupEl) return;
        mini.on(this.popupEl, "click", this.__OnLeftClick, this);
        mini.on(this.popupEl, "contextmenu", this.__OnRightClick, this);
        mini.on(this.popupEl, "mouseover", this.__OnMouseOver, this);
    },
    doShow: function (e) {
        var ev = {
            popupEl: this.popupEl,
            htmlEvent: e,
            cancel: false
        };

        this.fire("BeforeOpen", ev);
        if (ev.cancel == true) return;

        this.fire("opening", ev);
        if (ev.cancel == true) return;

        if (!this.popupEl) {
            this.show();
        } else {
            var options = {};
            if (e) options.xy = [e.pageX, e.pageY];
            this.showAtEl(this.popupEl, options);
        }
    },
    doHide: function (e) {
        var ev = {
            popupEl: this.popupEl,
            htmlEvent: e,
            cancel: false
        };
        this.fire("BeforeClose", ev);
        if (ev.cancel == true) return;
        this.close();
    },

    show: function (left, top) {

        this.showAtPos(left, top);
    },
    showAtPos: function (x, y) {



        this.render(document.body);

        if (!x) x = "center";
        if (!y) y = "middle";

        this.el.style.position = "absolute";
        this.el.style.left = "-2000px";
        this.el.style.top = "-2000px";
        this.el.style.display = "";

        this._measureSize();

        var vbox = mini.getViewportBox();
        var box = mini.getBox(this.el);



        if (x == "left") x = 0;
        if (x == 'center') x = vbox.width / 2 - box.width / 2;
        if (x == "right") x = vbox.width - box.width;

        if (y == "top") y = 0;
        if (y == "middle") y = vbox.y + vbox.height / 2 - box.height / 2;
        if (y == "bottom") y = vbox.height - box.height;


        if (x + box.width > vbox.right) x = vbox.right - box.width;
        if (y + box.height > vbox.bottom) y = vbox.bottom - box.height - 20;

        this._Show(x, y);
    },
    _doModal: function () {
        jQuery(this._modalEl).remove();
        if (!this.showModal) return;
        if (this.visible == false) return;

        var dd = document.documentElement;
        var scrollWidth = parseInt(Math.max(document.body.scrollWidth, dd ? dd.scrollWidth : 0));
        var scrollHeight = parseInt(Math.max(document.body.scrollHeight, dd ? dd.scrollHeight : 0));

        var vbox = mini.getViewportBox();
        var height = vbox.height;
        if (height < scrollHeight) height = scrollHeight;

        var width = vbox.width;
        if (width < scrollWidth) width = scrollWidth;

        this._modalEl = mini.append(document.body, '<div class="mini-modal"></div>');
        this._modalEl.style.height = height + "px";
        this._modalEl.style.width = width + "px";
        this._modalEl.style.zIndex = mini.getStyle(this.el, 'zIndex') - 1;
        mini.setStyle(this._modalEl, this.modalStyle);
    },
    _doShadow: function () {
        if (!this.shadowEl) {
            this.shadowEl = mini.append(document.body, '<div class="mini-shadow"></div>');
        }

        this.shadowEl.style.display = this.showShadow ? "" : "none";
        if (this.showShadow) {
            function doShadow() {
                this.shadowEl.style.display = "";
                var box = mini.getBox(this.el);
                var s = this.shadowEl.style;
                s.width = box.width + "px";
                s.height = box.height + "px";
                s.left = box.x + "px";
                s.top = box.y + "px";

                var zindex = mini.getStyle(this.el, 'zIndex');
                if (!isNaN(zindex)) {
                    this.shadowEl.style.zIndex = zindex - 2;
                }
            }
            this.shadowEl.style.display = "none";
            if (this._doShadowTimer) {
                clearTimeout(this._doShadowTimer);
                this._doShadowTimer = null;
            }
            var me = this;

            this._doShadowTimer = setTimeout(function () {
                me._doShadowTimer = null;
                doShadow.call(me);
            }, 20);
        }
    },
    _measureSize: function () {
        this.el.style.display = "";
        var box = mini.getBox(this.el);

        if (box.width > this.maxWidth) {
            mini.setWidth(this.el, this.maxWidth);
            box = mini.getBox(this.el);
        }
        if (box.height > this.maxHeight) {
            mini.setHeight(this.el, this.maxHeight);
            box = mini.getBox(this.el);
        }
        if (box.width < this.minWidth) {
            mini.setWidth(this.el, this.minWidth);
            box = mini.getBox(this.el);
        }
        if (box.height < this.minHeight) {
            mini.setHeight(this.el, this.minHeight);
            box = mini.getBox(this.el);
        }
    },
    showAtEl: function (el, options) {
        el = mini.byId(el);
        if (!el) return;
        if (!this.isRender() || this.el.parentNode != document.body) {
            this.render(document.body);
        }

        var c = {
            xAlign: this.xAlign,
            yAlign: this.yAlign,
            xOffset: this.xOffset,
            yOffset: this.yOffset,
            popupCls: this.popupCls


        };
        mini.copyTo(c, options);

        mini.addClass(el, c.popupCls);
        el.popupCls = c.popupCls;
        this._popupEl = el;

        this.el.style.position = "absolute";
        this.el.style.left = "-2000px";
        this.el.style.top = "-2000px";
        this.el.style.display = "";

        this.doLayout();
        this._measureSize();

        var vbox = mini.getViewportBox();
        var box = mini.getBox(this.el);
        var pbox = mini.getBox(el);
        var xy = c.xy;
        var h = c.xAlign, v = c.yAlign;

        var x = vbox.width / 2 - box.width / 2, y = 0;
        if (xy) {
            x = xy[0];
            y = xy[1];
        }

        switch (c.xAlign) {
            case "outleft":
                x = pbox.x - box.width;
                break;
            case "left":
                x = pbox.x;
                break;
            case "center":
                x = pbox.x + pbox.width / 2 - box.width / 2;
                break;
            case "right":
                x = pbox.right - box.width;
                break;
            case "outright":
                x = pbox.right;
                break;
            default:

                break;
        }

        switch (c.yAlign) {
            case "above":
                y = pbox.y - box.height;
                break;
            case "top":
                y = pbox.y;
                break;
            case "middle":
                y = pbox.y + pbox.height / 2 - box.height / 2;
                break;
            case "bottom":
                y = pbox.bottom - box.height;
                break;
            case "below":
                y = pbox.bottom;
                break;
            default:

                break;
        }
        x = parseInt(x);
        y = parseInt(y);

        if (c.outYAlign || c.outXAlign) {
            if (c.outYAlign == "above") {
                if (y + box.height > vbox.bottom) {
                    var top = pbox.y - vbox.y;
                    var bottom = vbox.bottom - pbox.bottom;
                    if (top > bottom) {
                        y = pbox.y - box.height;
                    }
                }

            }
            if (c.outXAlign == "outleft") {
                if (x + box.width > vbox.right) {
                    var left = pbox.x - vbox.x;
                    var right = vbox.right - pbox.right;
                    if (left > right) {
                        x = pbox.x - box.width;
                    }
                }
            }
            if (c.outXAlign == "right") {
                if (x + box.width > vbox.right) {
                    x = pbox.right - box.width;




                }
            }
            this._Show(x, y);
        } else {
            this.showAtPos(x + c.xOffset, y + c.yOffset);
        }
    },
    _Show: function (x, y) {
        this.el.style.display = "";
        this.el.style.zIndex = mini.getMaxZIndex();

        mini.setX(this.el, x);
        mini.setY(this.el, y);

        this.setVisible(true);

        if (this.hideAction == "mouseout") {
            mini.on(document, "mousemove", this.__OnBodyMouseMove, this);
        }
        var sf = this;
        this._doShadow();

        this._doModal();

        mini.layoutIFrames(this.el);

        this.isPopup = true;

        mini.on(document, "mousedown", this.__OnBodyMouseDown, this);
        mini.on(window, "resize", this.__OnWindowResize, this);

        this.fire("Open");
    },
    open: function () {
        this.show();
    },
    close: function () {
        this.hide();
    },
    hide: function () {

        if (!this.el) return;
        if (this.popupEl) mini.removeClass(this.popupEl, this.popupEl.popupCls);
        if (this._popupEl) mini.removeClass(this._popupEl, this._popupEl.popupCls);
        this._popupEl = null;
        jQuery(this._modalEl).remove();

        if (this.shadowEl) this.shadowEl.style.display = "none";
        mini.un(document, "mousemove", this.__OnBodyMouseMove, this);
        mini.un(document, "mousedown", this.__OnBodyMouseDown, this);
        mini.un(window, "resize", this.__OnWindowResize, this);

        this.setVisible(false);

        this.isPopup = false;


        this.fire("Close");
    },

    setPopupEl: function (el) {
        el = mini.byId(el);
        if (!el) return;
        this._unbindPopupEl();
        this.popupEl = el;
        this._bindPopupEl();
    },

    setPopupCls: function (value) {
        this.popupCls = value;
    },
    setShowAction: function (value) {
        this.showAction = value;
    },
    setHideAction: function (value) {
        this.hideAction = value;
    },
    setShowDelay: function (value) {
        this.showDelay = value;
    },
    setHideDelay: function (value) {
        this.hideDelay = value;
    },

    setXAlign: function (value) {
        this.xAlign = value;
    },
    setYAlign: function (value) {
        this.yAlign = value;
    },
    setxOffset: function (value) {
        value = parseInt(value);
        if (isNaN(value)) value = 0;
        this.xOffset = value;
    },
    setyOffset: function (value) {
        value = parseInt(value);
        if (isNaN(value)) value = 0;
        this.yOffset = value;
    },

    setShowModal: function (value) {
        this.showModal = value;
    },
    setShowShadow: function (value) {
        this.showShadow = value;
    },

    setMinWidth: function (value) {
        if (isNaN(value)) return;
        this.minWidth = value;
    },
    setMinHeight: function (value) {
        if (isNaN(value)) return;
        this.minHeight = value;
    },
    setMaxWidth: function (value) {
        if (isNaN(value)) return;
        this.maxWidth = value;
    },
    setMaxHeight: function (value) {
        if (isNaN(value)) return;
        this.maxHeight = value;
    },

    setAllowDrag: function (value) {
        this.allowDrag = value;
        mini.removeClass(this.el, this._dragCls);
        if (value) {
            mini.addClass(this.el, this._dragCls);
        }
    },
    setAllowResize: function (value) {
        this.allowResize = value;
        mini.removeClass(this.el, this._resizeCls);
        if (value) {
            mini.addClass(this.el, this._resizeCls);
        }
    },


    __OnLeftClick: function (e) {
        if (this._inAniming) return;
        if (this.showAction != "leftclick") return;
        var allowPopup = jQuery(this.popupEl).attr("allowPopup");
        if (String(allowPopup) == "false") return;
        this.doShow(e);
    },
    __OnRightClick: function (e) {
        if (this._inAniming) return;
        if (this.showAction != "rightclick") return;
        var allowPopup = jQuery(this.popupEl).attr("allowPopup");
        if (String(allowPopup) == "false") return;

        e.preventDefault();
        this.doShow(e);

    },
    __OnMouseOver: function (e) {
        if (this._inAniming) return;
        if (this.showAction != "mouseover") return;
        var allowPopup = jQuery(this.popupEl).attr("allowPopup");
        if (String(allowPopup) == "false") return;

        clearTimeout(this._hideTimer);
        this._hideTimer = null;


        if (this.isPopup) return;


        var sf = this;
        this._showTimer = setTimeout(function () {
            sf.doShow(e);
        }, this.showDelay);
    },
    __OnBodyMouseMove: function (e) {
        if (this.hideAction != "mouseout") return;
        this._tryHide(e);
    },

    __OnBodyMouseDown: function (e) {
        if (this.hideAction != "outerclick") return;
        if (!this.isPopup) return;

        if (this.within(e)

            || (this.popupEl && mini.isAncestor(this.popupEl, e.target))
        ) {
        } else {
            this.doHide(e);
        }
    },
    _tryHide: function (e) {
        if (mini.isAncestor(this.el, e.target)
            || (this.popupEl && mini.isAncestor(this.popupEl, e.target))
        ) {
        } else {
            clearTimeout(this._showTimer);
            this._showTimer = null;
            if (this._hideTimer) return;

            var sf = this;
            this._hideTimer = setTimeout(function () {
                sf.doHide(e);
            }, this.hideDelay);

        }
    },
    __OnWindowResize: function (e) {
        if (this.isDisplay() && !mini.isIE6) {
            this._doModal();
        }
    },
    within: function (e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        var controls = mini.getChildControls(this);

        for (var i = 0, l = controls.length; i < l; i++) {
            var c = controls[i];

            if (c.within(e)) return true;
        }

        return false;
    }
};

mini.copyTo(mini.Popup.prototype, mini.Popup_prototype);


mini.Button = function () {

    mini.Button.superclass.constructor.call(this);

}
mini.extend(mini.Button, mini.Control, {


    text: "",
    iconCls: "",
    iconStyle: "",
    plain: false,

    checkOnClick: false,
    checked: false,
    groupName: "",

    _plainCls: "mini-button-plain",
    _hoverCls: "mini-button-hover",
    _pressedCls: "mini-button-pressed",
    _checkedCls: "mini-button-checked",
    _disabledCls: "mini-button-disabled",

    allowCls: "",

    _clearBorder: false,

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        this._allowUpdate = kv.text || kv.iconStyle || kv.iconCls || kv.iconPosition;

        mini.Button.superclass.set.call(this, kv);

        if (this._allowUpdate === false) {
            this._allowUpdate = true;
            this.doUpdate();
        }

        return this;
    },
    uiCls: "mini-button",
    _create: function () {
        this.el = document.createElement("a");

        this.el.className = "mini-button";
        this.el.hideFocus = true;
        this.el.href = "javascript:void(0)";


        this.doUpdate();
    },
    _initEvents: function () {
        mini._BindEvents(function () {
            mini_onOne(this.el, "mousedown", this.__OnMouseDown, this);
            mini_onOne(this.el, "click", this.__OnClick, this);



        }, this);
    },
    destroy: function (removeEl) {
        if (this.el) {
            this.el.onclick = null;
            this.el.onmousedown = null;
        }
        if (this.menu) this.menu.owner = null;
        this.menu = null;
        mini.Button.superclass.destroy.call(this, removeEl);
    },
    doUpdate: function () {
        if (this._allowUpdate === false) return;


        var cls = "", text = this.text;

        if (this.iconCls && text) {
            cls = " mini-button-icon " + this.iconCls;
        } else if (this.iconCls && text === "") {
            cls = " mini-button-iconOnly " + this.iconCls;
            text = "&nbsp;";
        } else {
            if (text == "") text = "&nbsp;";
        }
        var s = '<span class="mini-button-text ' + cls + '">' + text + '</span>';
        if (this.allowCls) {
            s = s + '<span class="mini-button-allow ' + this.allowCls + '"></span>';
        }
        this.el.innerHTML = s;



    },
    href: "",
    setHref: function (value) {
        this.href = value;
        this.el.href = value;
        var el = this.el;
        setTimeout(function () {
            el.onclick = null;
        }, 100);
    },
    getHref: function () {
        return this.href;
    },
    target: "",
    setTarget: function (value) {
        this.target = value;
        this.el.target = value;
    },
    getTarget: function () {
        return this.target;
    },
    setText: function (value) {
        if (this.text != value) {
            this.text = value;
            this.doUpdate();
        }
    },
    getText: function () {
        return this.text;
    },
    setIconCls: function (value) {
        this.iconCls = value;
        this.doUpdate();
    },
    getIconCls: function () {
        return this.iconCls;
    },
    setIconStyle: function (value) {
        this.iconStyle = value;
        this.doUpdate();
    },
    getIconStyle: function () {
        return this.iconStyle;
    },
    setIconPosition: function (value) {
        this.iconPosition = "left";
        this.doUpdate();
    },
    getIconPosition: function () {
        return this.iconPosition;
    },
    setPlain: function (value) {
        this.plain = value;
        if (value) this.addCls(this._plainCls);
        else this.removeCls(this._plainCls);
    },
    getPlain: function () {
        return this.plain;
    },
    setGroupName: function (value) {
        this.groupName = value;
    },
    getGroupName: function () {
        return this.groupName;
    },
    setCheckOnClick: function (value) {
        this.checkOnClick = value;
    },
    getCheckOnClick: function () {
        return this.checkOnClick;
    },
    setChecked: function (value) {

        var fire = this.checked != value;
        this.checked = value;
        if (value) this.addCls(this._checkedCls);
        else this.removeCls(this._checkedCls);
        if (fire) {
            this.fire("CheckedChanged");
        }
    },
    getChecked: function () {
        return this.checked;
    },
    doClick: function () {
        this.__OnClick(null);
    },

    __OnClick: function (e) {

        if (!this.href) {
            e.preventDefault();
        }
        if (this.readOnly || this.enabled == false) return;
        this.focus();
        if (this.checkOnClick) {
            if (this.groupName) {
                var groupName = this.groupName;
                var buttons = mini.findControls(function (control) {
                    if (control.type == "button" && control.groupName == groupName) return true;
                });
                if (buttons.length > 0) {
                    for (var i = 0, l = buttons.length; i < l; i++) {
                        var button = buttons[i];
                        if (button != this) button.setChecked(false);
                    }
                    this.setChecked(true);
                } else {
                    this.setChecked(!this.checked);
                }
            } else {
                this.setChecked(!this.checked);
            }
        }

        this.fire("click", {
            htmlEvent: e
        });

    },
    __OnMouseDown: function (e) {
        if (this.isReadOnly()) return;

        this.addCls(this._pressedCls);
        mini.on(document, "mouseup", this.__OnDocMouseUp, this);
    },
    __OnDocMouseUp: function (e) {
        this.removeCls(this._pressedCls);
        mini.un(document, "mouseup", this.__OnDocMouseUp, this);
    },
    onClick: function (fn, scope) {
        this.on("click", fn, scope);
    },

    getAttrs: function (el) {
        var attrs = mini.Button.superclass.getAttrs.call(this, el);

        attrs.text = el.innerHTML;
        mini._ParseString(el, attrs,
            ["text", "href", "iconCls", "iconStyle", "iconPosition", "groupName", "menu",
                "onclick", "oncheckedchanged", "target"
             ]
        );
        mini._ParseBool(el, attrs,
            ["plain", "checkOnClick", "checked"
             ]
        );
        return attrs;
    }
});
mini.regClass(mini.Button, "button");



mini.MenuButton = function () {

    mini.MenuButton.superclass.constructor.call(this);
}
mini.extend(mini.MenuButton, mini.Button, {
    uiCls: "mini-menubutton",
    allowCls: "mini-button-menu",
    setMenu: function (value) {

        if (mini.isArray(value)) {
            value = {
                type: "menu",
                items: value
            };
        }
        if (typeof value == "string") {
            var el = mini.byId(value);
            if (!el) return;

            mini.parse(value);
            value = mini.get(value);
        }

        if (this.menu !== value) {
            this.menu = mini.getAndCreate(value);
            this.menu.setPopupEl(this.el);
            this.menu.setPopupCls("mini-button-popup");
            this.menu.setShowAction("leftclick");
            this.menu.setHideAction("outerclick");
            this.menu.setXAlign("left");
            this.menu.setYAlign("below");

            this.menu.hide();
            this.menu.owner = this;
        }
    },
    setEnabled: function (value) {
        this.enabled = value;
        if (value) {
            this.removeCls(this._disabledCls);
        } else {
            this.addCls(this._disabledCls);
        }

        jQuery(this.el).attr("allowPopup", !!value)
    }
});
mini.regClass(mini.MenuButton, "menubutton");



mini.SplitButton = function () {
    mini.SplitButton.superclass.constructor.call(this);
}
mini.extend(mini.SplitButton, mini.MenuButton, {
    uiCls: "mini-splitbutton",
    allowCls: "mini-button-split"
});
mini.regClass(mini.SplitButton, "splitbutton");


mini.CheckBox = function () {
    mini.CheckBox.superclass.constructor.call(this);

}
mini.extend(mini.CheckBox, mini.Control, {
    formField: true,
    _clearText: false,

    text: "",
    checked: false,
    defaultValue: false,

    trueValue: true,
    falseValue: false,

    uiCls: "mini-checkbox",
    _create: function () {
        var ckid = this.uid + "$check";
        this.el = document.createElement("span");
        this.el.className = "mini-checkbox";
        this.el.innerHTML = '<input id="' + ckid + '" name="' + this.id + '" type="checkbox" class="mini-checkbox-check"><label for="' + ckid + '" onclick="return false;">' + this.text + '</label>';

        this._checkEl = this.el.firstChild;
        this._labelEl = this.el.lastChild;
    },
    destroy: function (removeEl) {
        if (this._checkEl) {
            this._checkEl.onmouseup = null;
            this._checkEl.onclick = null;
            this._checkEl = null;
        }
        mini.CheckBox.superclass.destroy.call(this, removeEl);
    },
    _initEvents: function () {
        mini._BindEvents(function () {
            mini.on(this.el, "click", this.__onClick, this);

            this._checkEl.onmouseup = function () { return false; }
            var sf = this;
            this._checkEl.onclick = function () { if (sf.isReadOnly()) return false }
        }, this);

    },
    setName: function (value) {
        this.name = value;
        mini.setAttr(this._checkEl, "name", this.name);
    },
    setText: function (value) {
        if (this.text !== value) {
            this.text = value;

            this._labelEl.innerHTML = value;
        }
    },
    getText: function () {
        return this.text;
    },
    setChecked: function (value) {
        if (value === true) value = true;
        else if (value == this.trueValue) value = true;
        else if (value == "true") value = true;
        else if (value === 1) value = true;
        else if (value == "Y") value = true;
        else value = false;

        if (this.checked !== value) {
            this.checked = !!value;
            this._checkEl.checked = this.checked;

            this.value = this.getValue();
        }
    },
    getChecked: function () {
        return this.checked;
    },
    setValue: function (value) {
        if (this.checked != value) {

            this.setChecked(value);
            this.value = this.getValue();
        }
    },
    getValue: function () {
        return String(this.checked == true ? this.trueValue : this.falseValue);
    },
    getFormValue: function () {
        return this.getValue();
    },
    setTrueValue: function (value) {
        this._checkEl.value = value;
        this.trueValue = value;
    },
    getTrueValue: function () {
        return this.trueValue;
    },
    setFalseValue: function (value) {
        this.falseValue = value;
    },
    getFalseValue: function () {
        return this.falseValue;
    },

    __onClick: function (e) {

        if (this.isReadOnly()) return;

        this.setChecked(!this.checked);

        this.fire("checkedchanged", { checked: this.checked });
        this.fire("valuechanged", { value: this.getValue() });

        this.fire("click", e, this);

    },

    getAttrs: function (el) {
        var attrs = mini.CheckBox.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        attrs.text = el.innerHTML;
        mini._ParseString(el, attrs,
            ["text", "oncheckedchanged", "onclick", "onvaluechanged"
             ]
        );

        mini._ParseBool(el, attrs,
            ["enabled"
             ]
        );

        var checked = mini.getAttr(el, "checked");

        if (checked) {
            attrs.checked = (checked == "true" || checked == "checked") ? true : false;
        }

        var trueValue = jq.attr("trueValue");
        if (trueValue) {
            attrs.trueValue = trueValue;
            trueValue = parseInt(trueValue);
            if (!isNaN(trueValue)) {
                attrs.trueValue = trueValue;
            }
        }
        var falseValue = jq.attr("falseValue");
        if (falseValue) {
            attrs.falseValue = falseValue;
            falseValue = parseInt(falseValue);
            if (!isNaN(falseValue)) {
                attrs.falseValue = falseValue;
            }
        }

        return attrs;
    }
});

mini.regClass(mini.CheckBox, "checkbox");


mini.ButtonEdit = function () {

    mini.ButtonEdit.superclass.constructor.call(this);


    var isReadOnly = this.isReadOnly();
    if (isReadOnly || this.allowInput == false) {
        this._textEl.readOnly = true;
    }
    if (this.enabled == false) {
        this.addCls(this._disabledCls);
    }
    if (isReadOnly) {
        this.addCls(this._readOnlyCls);
    }
    if (this.required) {
        this.addCls(this._requiredCls);
    }
}
mini.extend(mini.ButtonEdit, mini.ValidatorBase, {
    name: "",
    formField: true,

    selectOnFocus: false,

    showClose: false,

    emptyText: "",

    defaultValue: "",
    value: "",
    text: "",

    maxLength: 1000,
    minLength: 0,


    height: 21,

    inputAsValue: false,

    allowInput: true,
    _noInputCls: "mini-buttonedit-noInput",
    _readOnlyCls: "mini-buttonedit-readOnly",
    _disabledCls: "mini-buttonedit-disabled",

    _emptyCls: "mini-buttonedit-empty",
    _focusCls: "mini-buttonedit-focus",


    _buttonCls: "mini-buttonedit-button",
    _buttonHoverCls: "mini-buttonedit-button-hover",
    _buttonPressedCls: "mini-buttonedit-button-pressed",

    _closeCls: "mini-buttonedit-close",

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var value = kv.value;
        delete kv.value;
        var text = kv.text;
        delete kv.text;

        this._allowUpdate = !(kv.enabled == false || kv.allowInput == false || kv.readOnly);

        mini.ButtonEdit.superclass.set.call(this, kv);

        if (this._allowUpdate === false) {
            this._allowUpdate = true;
            this.doUpdate();
        }

        if (!mini.isNull(text)) {
            this.setText(text);
        }
        if (!mini.isNull(value)) {
            this.setValue(value);
        }
        return this;
    },
    uiCls: "mini-buttonedit",
    _getButtonsHTML: function () {
        var s = '<span class="mini-buttonedit-close"></span>' + this._getButtonHtml();
        return '<span class="mini-buttonedit-buttons">' + s + '</span>';
    },
    _getButtonHtml: function () {
        var hover = 'onmouseover="mini.addClass(this, \'' + this._buttonHoverCls + '\');" '
                        + 'onmouseout="mini.removeClass(this, \'' + this._buttonHoverCls + '\');"';
        return '<span class="mini-buttonedit-button" ' + hover + '><span class="mini-buttonedit-icon"></span></span>';
    },
    _create: function () {
        this.el = document.createElement("span");
        this.el.className = "mini-buttonedit";

        var s = this._getButtonsHTML();
        this.el.innerHTML = '<span class="mini-buttonedit-border"><input type="input" class="mini-buttonedit-input" autocomplete="off"/>'
                            + s + '</span><input name="' + this.name + '" type="hidden"/>'

        this._borderEl = this.el.firstChild;
        this._textEl = this._borderEl.firstChild;
        this._valueEl = this.el.lastChild;

        this._buttonsEl = this._borderEl.lastChild;
        this._buttonEl = this._buttonsEl.lastChild;
        this._closeEl = this._buttonEl.previousSibling;

        this._doEmpty();
    },
    destroy: function (removeEl) {
        if (this.el) {
            this.el.onmousedown = null;
            this.el.onmousewheel = null;
            this.el.onmouseover = null;
            this.el.onmouseout = null;
        }
        if (this._textEl) {
            this._textEl.onchange = null;
            this._textEl.onfocus = null;

            mini.clearEvent(this._textEl);

            this._textEl = null;
        }
        mini.ButtonEdit.superclass.destroy.call(this, removeEl);
    },
    _initEvents: function () {
        mini._BindEvents(function () {
            mini_onOne(this.el, "mousedown", this.__OnMouseDown, this);
            mini_onOne(this._textEl, "focus", this.__OnFocus, this);
            mini_onOne(this._textEl, "change", this.__OnInputTextChanged, this);





            var v = this.text;
            this.text = null;
            this.setText(v);

        }, this);

    },
    _inputEventsInited: false,
    _initInputEvents: function () {
        if (this._inputEventsInited) return;
        this._inputEventsInited = true;

        mini.on(this.el, "click", this.__OnClick, this);
        mini.on(this._textEl, "blur", this.__OnBlur, this);
        mini.on(this._textEl, "keydown", this.__OnInputKeyDown, this);
        mini.on(this._textEl, "keyup", this.__OnInputKeyUp, this);
        mini.on(this._textEl, "keypress", this.__OnInputKeyPress, this);
    },
    _buttonWidth: 20,
    _closeWidth: 20,
    _doInputLayout: function (doLayout) {

        if (this._closeEl) {
            this._closeEl.style.display = this.showClose ? "inline-block" : "none";
        }
        var w = this._buttonsEl.offsetWidth + 2;
        if (w == 2) {
            this._noLayout = true;
        } else {
            this._noLayout = false;
        }
        this._borderEl.style["paddingRight"] = w + "px";
        if (doLayout !== false) {
            this.doLayout();
        }
    },
    doLayout: function () {
        if (this._noLayout) {
            this._doInputLayout(false);
        }
    },
    setHeight: function (value) {
        if (parseInt(value) == value) value += "px";
        this.height = value;

    },
    focus: function () {
        try {
            this._textEl.focus();
            var sf = this;
            setTimeout(function () {
                if (sf._focused) {
                    sf._textEl.focus();
                }

            }, 10);
        } catch (e) {
        }
    },
    blur: function () {
        try {
            this._textEl.blur();

        } catch (e) {
        }
    },
    selectText: function () {
        this._textEl.select();
    },

    getTextEl: function () {
        return this._textEl;
    },
    setName: function (value) {
        this.name = value;

        if (this._valueEl) mini.setAttr(this._valueEl, "name", this.name);
    },
    setText: function (value) {

        if (value === null || value === undefined) value = "";
        var fire = this.text !== value;
        this.text = value;
        this._textEl.value = value;

        this._doEmpty();
    },
    getText: function () {
        var text = this._textEl.value;
        return text;

    },

    setValue: function (value) {
        if (value === null || value === undefined) value = "";
        var fire = this.value !== value;
        this.value = value;
        this._valueEl.value = this.getFormValue();

    },
    getValue: function () {
        return this.value;
    },
    getFormValue: function () {
        value = this.value;
        if (value === null || value === undefined) value = "";
        return String(value);
    },

    _doEmpty: function () {
        this._textEl.placeholder = this.emptyText;
        if (this.emptyText) {
            mini._placeholder(this._textEl);
        }











    },
    setEmptyText: function (value) {
        if (this.emptyText != value) {
            this.emptyText = value;
            this._doEmpty();
        }
    },
    getEmptyText: function () {
        return this.emptyText;
    },

    setMaxLength: function (value) {
        value = parseInt(value);
        if (isNaN(value)) return;
        this.maxLength = value;
        this._textEl.maxLength = value;
    },
    getMaxLength: function () {
        return this.maxLength;
    },
    setMinLength: function (value) {
        value = parseInt(value);
        if (isNaN(value)) return;
        this.minLength = value;
    },
    getMinLength: function () {
        return this.minLength;
    },
    setEnabled: function (value) {
        mini.ButtonEdit.superclass.setEnabled.call(this, value);

        this._tryValidate();
    },
    _doReadOnly: function () {
        var readOnly = this.isReadOnly();
        if (readOnly || this.allowInput == false) {
            this._textEl.readOnly = true;
        } else {
            this._textEl.readOnly = false;
        }
        if (readOnly) {
            this.addCls(this._readOnlyCls);
        } else {
            this.removeCls(this._readOnlyCls);
        }
        if (this.allowInput) {
            this.removeCls(this._noInputCls);
        } else {
            this.addCls(this._noInputCls);
        }

        if (this.enabled) {
            this._textEl.disabled = false;
        } else {
            this._textEl.disabled = true;
        }
    },
    setAllowInput: function (value) {
        this.allowInput = value;
        this._doReadOnly();
    },
    getAllowInput: function () {
        return this.allowInput;
    },
    setInputAsValue: function (value) {
        this.inputAsValue = value;
    },
    getInputAsValue: function () {
        return this.inputAsValue;
    },




    _errorIconEl: null,
    getErrorIconEl: function () {
        if (!this._errorIconEl) {
            this._errorIconEl = mini.append(this.el, '<span class="mini-errorIcon"></span>');
        }
        return this._errorIconEl;
    },
    _RemoveErrorIcon: function () {
        if (this._errorIconEl) {
            var el = this._errorIconEl;
            jQuery(el).remove();
        }
        this._errorIconEl = null;
    },

    __OnClick: function (e) {
        if (this.isReadOnly() || this.enabled == false) return;

        if (!mini.isAncestor(this._borderEl, e.target)) return;

        var t = new Date();

        if (mini.isAncestor(this._buttonEl, e.target)) {
            this._OnButtonClick(e);
        }
        if (mini.findParent(e.target, this._closeCls)) {
            this.fire("closeclick", { htmlEvent: e });
        }










    },
    __OnMouseDown: function (e) {

        if (this.isReadOnly() || this.enabled == false) return;

        if (!mini.isAncestor(this._borderEl, e.target)) return;

        if (!mini.isAncestor(this._textEl, e.target)) {
            this._clickTarget = e.target;
            var sf = this;
            setTimeout(function () {
                sf.focus();
                mini.selectRange(sf._textEl, 1000, 1000);
            }, 1);
            if (mini.isAncestor(this._buttonEl, e.target)) {
                var up = mini.findParent(e.target, "mini-buttonedit-up");
                var down = mini.findParent(e.target, "mini-buttonedit-down");
                if (up) {
                    mini.addClass(up, this._buttonPressedCls);
                    this._OnButtonMouseDown(e, "up");
                }
                else if (down) {
                    mini.addClass(down, this._buttonPressedCls);
                    this._OnButtonMouseDown(e, "down");
                } else {
                    mini.addClass(this._buttonEl, this._buttonPressedCls);
                    this._OnButtonMouseDown(e);
                }
                mini.on(document, "mouseup", this.__OnDocMouseUp, this);
            }
        }
    },
    __OnDocMouseUp: function (e) {
        this._clickTarget = null;














        var me = this;
        setTimeout(function () {
            var doms = me._buttonEl.getElementsByTagName("*");
            for (var i = 0, l = doms.length; i < l; i++) {
                mini.removeClass(doms[i], me._buttonPressedCls);
            }
            mini.removeClass(me._buttonEl, me._buttonPressedCls);
            mini.removeClass(me.el, me._pressedCls);
        }, 80);
        mini.un(document, "mouseup", this.__OnDocMouseUp, this);
    },
    __OnFocus: function (e) {
        this.doUpdate();
        this._initInputEvents();
        if (this.isReadOnly()) return;

        this._focused = true;
        this.addCls(this._focusCls);



        if (this.selectOnFocus) {
            this.selectText();
        }
        this.fire("focus", { htmlEvent: e });
    },
    __doFocusCls: function () {
        if (this._focused == false) {
            this.removeCls(this._focusCls);
        }
    },





    __fireBlur: function (e) {


        this._focused = false;
        var sf = this;

        function f() {
            sf.__doFocusCls();




        }
        setTimeout(function () {
            f.call(sf);
        }, 2);

        this.fire("blur", { htmlEvent: e });
    },
    __OnBlur: function (e) {
        this._focused = false;
        var me = this;
        setTimeout(function () {
            me.__fireBlur(e);
        }, 10);
    },
    __OnInputKeyDown: function (e) {
        var ex = { htmlEvent: e };
        this.fire("keydown", ex);
        if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
            return false;
        }
        if (e.keyCode == 13 || e.keyCode == 9) {
            var sf = this;
            sf.__OnInputTextChanged(null);
            if (e.keyCode == 13) {
                var me = this;


                me.fire("enter", ex);

            }
        }
        if (e.keyCode == 27) {
            e.preventDefault();
        }
    },
    __OnInputTextChanged: function () {

        var v = this._textEl.value;
        if (v == this.text) return;

        var value = this.getValue();

        this.setValue(v);
        if (value !== this.getFormValue()) {
            this._OnValueChanged();
        }

    },
    __OnInputKeyUp: function (e) {
        this.fire("keyup", { htmlEvent: e });
    },
    __OnInputKeyPress: function (e) {
        this.fire("keypress", { htmlEvent: e });
    },

    _OnButtonClick: function (htmlEvent) {
        var e = {
            htmlEvent: htmlEvent,
            cancel: false
        };
        this.fire("beforebuttonclick", e);
        if (e.cancel == true) return;

        this.fire("buttonclick", e);
    },
    _OnButtonMouseDown: function (htmlEvent, spinType) {
        this.focus();
        this.addCls(this._focusCls);

        this.fire("buttonmousedown", {
            htmlEvent: htmlEvent,
            spinType: spinType
        });
    },

    onButtonClick: function (fn, scope) {
        this.on("buttonclick", fn, scope);
    },
    onButtonMouseDown: function (fn, scope) {
        this.on("buttonmousedown", fn, scope);
    },
    onTextChanged: function (fn, scope) {
        this.on("textchanged", fn, scope);
    },

    textName: "",
    setTextName: function (value) {
        this.textName = value;
        if (this._textEl) mini.setAttr(this._textEl, "name", this.textName);
    },
    getTextName: function () {
        return this.textName;
    },

    setSelectOnFocus: function (value) {
        this.selectOnFocus = value;
    },
    getSelectOnFocus: function (value) {
        return this.selectOnFocus;
    },
    setShowClose: function (value) {
        this.showClose = value;
        this._doInputLayout();
    },
    getShowClose: function (value) {
        return this.showClose;
    },
    inputStyle: "",
    setInputStyle: function (value) {
        this.inputStyle = value;
        mini.setStyle(this._textEl, value);
    },

    getAttrs: function (el) {
        var attrs = mini.ButtonEdit.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        mini._ParseString(el, attrs,
            ["value", "text", "textName", "emptyText", "inputStyle", "defaultText",
            "onenter", "onkeydown", "onkeyup", "onkeypress",
            "onbuttonclick", "onbuttonmousedown", "ontextchanged", "onfocus", "onblur",
            "oncloseclick"
             ]
        );
        mini._ParseBool(el, attrs,
            ["allowInput", "inputAsValue", "selectOnFocus", "showClose"
             ]
        );
        mini._ParseInt(el, attrs,
            ["maxLength", "minLength"
             ]
        );

        return attrs;
    }
});
mini.regClass(mini.ButtonEdit, 'buttonedit');


mini.TextBox = function () {
    mini.TextBox.superclass.constructor.call(this);


}
mini.extend(mini.TextBox, mini.ValidatorBase, {
    name: "",
    formField: true,

    selectOnFocus: false,

    minWidth: 10,
    minHeight: 15,

    maxLength: 5000,

    emptyText: "",

    text: "",
    value: "",
    defaultValue: "",


    height: 21,

    _emptyCls: "mini-textbox-empty",
    _focusCls: "mini-textbox-focus",
    _disabledCls: "mini-textbox-disabled",

    uiCls: "mini-textbox",
    _InputType: "text",
    _create: function () {
        var html = '<input  type="' + this._InputType + '" class="mini-textbox-input" autocomplete="off"/>';
        if (this._InputType == "textarea") {
            html = '<textarea  class="mini-textbox-input" autocomplete="off"/></textarea>';
        }
        html = '<span class="mini-textbox-border">' + html + '</span>';
        html += '<input type="hidden"/>';

        this.el = document.createElement("span");
        this.el.className = "mini-textbox";
        this.el.innerHTML = html;


        this._borderEl = this.el.firstChild;
        this._textEl = this._borderEl.firstChild;
        this._valueEl = this._borderEl.lastChild;








        this._doEmpty();
    },
    _initEvents: function () {
        mini._BindEvents(function () {
            mini_onOne(this._textEl, "drop", this.__OnDropText, this);
            mini_onOne(this._textEl, "change", this.__OnInputTextChanged, this);
            mini_onOne(this._textEl, "focus", this.__OnFocus, this);
            mini_onOne(this.el, "mousedown", this.__OnMouseDown, this);









            var v = this.value;
            this.value = null;
            this.setValue(v);


        }, this);
        this.on("validation", this.__OnValidation, this);
    },
    _inputEventsInited: false,
    _initInputEvents: function () {
        if (this._inputEventsInited) return;
        this._inputEventsInited = true;



        mini.on(this._textEl, "blur", this.__OnBlur, this);
        mini.on(this._textEl, "keydown", this.__OnInputKeyDown, this);
        mini.on(this._textEl, "keyup", this.__OnInputKeyUp, this);
        mini.on(this._textEl, "keypress", this.__OnInputKeyPress, this);
    },
    destroy: function (removeEl) {
        if (this.el) {

            this.el.onmousedown = null;
        }
        if (this._textEl) {
            this._textEl.ondrop = null;
            this._textEl.onchange = null;
            this._textEl.onfocus = null;


            mini.clearEvent(this._textEl);
            this._textEl = null;
        }
        if (this._valueEl) {
            mini.clearEvent(this._valueEl);
            this._valueEl = null;
        }
        mini.TextBox.superclass.destroy.call(this, removeEl);
    },











    doLayout: function () {

    },


    setHeight: function (value) {
        if (parseInt(value) == value) value += "px";
        this.height = value;
        if (this._InputType == "textarea") {
            this.el.style.height = value;
            this.doLayout();
        }
    },
    setName: function (value) {
        if (this.name != value) {
            this.name = value;

            if (this._valueEl) mini.setAttr(this._valueEl, "name", this.name);
        }
    },
    setValue: function (value) {
        if (value === null || value === undefined) value = "";
        value = String(value);
        if (value.length > this.maxLength) {
            value = value.substring(0, this.maxLength);
        }
        if (this.value !== value) {
            this.value = value;
            this._valueEl.value = this._textEl.value = value;
            this._doEmpty();
        }



    },
    getValue: function () {

        return this.value;
    },
    getFormValue: function () {
        value = this.value;
        if (value === null || value === undefined) value = "";
        return String(value);
    },
    setAllowInput: function (value) {
        if (this.allowInput != value) {
            this.allowInput = value;
            this.doUpdate();
        }
    },
    getAllowInput: function () {
        return this.allowInput;
    },
    _placeholdered: false,
    _doEmpty: function () {
        this._textEl.placeholder = this.emptyText;
        if (this.emptyText) {
            mini._placeholder(this._textEl);
        }








    },
    setEmptyText: function (value) {
        if (this.emptyText != value) {
            this.emptyText = value;
            this._doEmpty();
        }
    },
    getEmptyText: function () {
        return this.emptyText;
    },
    setMaxLength: function (value) {
        this.maxLength = value;

        mini.setAttr(this._textEl, "maxLength", value);

        if (this._InputType == "textarea" && mini.isIE) {
            mini.on(this._textEl, "keypress", this.__OnMaxLengthKeyUp, this);
        }
    },
    __OnMaxLengthKeyUp: function (e) {

        if (this._textEl.value.length >= this.maxLength) {

            e.preventDefault();

        }
    },
    getMaxLength: function () {
        return this.maxLength;
    },
    setReadOnly: function (value) {
        if (this.readOnly != value) {
            this.readOnly = value;
            this.doUpdate();
        }
    },
    setEnabled: function (value) {
        if (this.enabled != value) {
            this.enabled = value;
            this.doUpdate();
            this._tryValidate();
        }
    },
    doUpdate: function () {
        if (this.enabled) {
            this.removeCls(this._disabledCls);
        } else {
            this.addCls(this._disabledCls);
        }
        if (this.isReadOnly() || this.allowInput == false) {
            this._textEl.readOnly = true;
            mini.addClass(this.el, "mini-textbox-readOnly");
        } else {

            this._textEl.readOnly = false;
            mini.removeClass(this.el, "mini-textbox-readOnly");
        }
        if (this.required) {
            this.addCls(this._requiredCls);
        } else {
            this.removeCls(this._requiredCls);
        }

        if (this.enabled) {
            this._textEl.disabled = false;
        } else {
            this._textEl.disabled = true;
        }
    },
    focus: function () {
        try {
            this._textEl.focus();
        } catch (e) {
        }
    },
    blur: function () {
        try {
            this._textEl.blur();
        } catch (e) {
        }
    },
    selectText: function () {
        var me = this;
        function doSelect() {
            try {
                me._textEl.select();
            } catch (ex) { }
        }
        doSelect();
        setTimeout(function () {
            doSelect();
        }, 30);
    },
    getTextEl: function () {
        return this._textEl;
    },
    getInputText: function () {
        return this._textEl.value;
    },
    setSelectOnFocus: function (value) {
        this.selectOnFocus = value;
    },
    getSelectOnFocus: function (value) {
        return this.selectOnFocus;
    },

    _errorIconEl: null,
    getErrorIconEl: function () {
        if (!this._errorIconEl) {
            this._errorIconEl = mini.append(this.el, '<span class="mini-errorIcon"></span>');
        }
        return this._errorIconEl;
    },
    _RemoveErrorIcon: function () {
        if (this._errorIconEl) {
            var el = this._errorIconEl;
            jQuery(el).remove();
        }
        this._errorIconEl = null;
    },

    __OnMouseDown: function (e) {

        var sf = this;
        if (!mini.isAncestor(this._textEl, e.target)) {
            setTimeout(function () {
                sf.focus();
                mini.selectRange(sf._textEl, 1000, 1000);
            }, 1);
        } else {
            setTimeout(function () {
                try {
                    sf._textEl.focus();
                } catch (ex) { }
            }, 1);
        }
    },
    __OnInputTextChanged: function (e, valid) {


        var value = this.value;
        this.setValue(this._textEl.value);

        if (value !== this.getValue() || valid === true) {
            this._OnValueChanged();
        }
    },
    __OnDropText: function (e) {
        var me = this;
        setTimeout(function () {
            me.__OnInputTextChanged(e);
        }, 0);
    },
    __OnInputKeyDown: function (e) {
        var ex = { htmlEvent: e };
        this.fire("keydown", ex);

        if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
            return false;
        }
        if (e.keyCode == 13 || e.keyCode == 9) {

            if (this._InputType == "textarea" && e.keyCode == 13) {
            }
            else {
                this.__OnInputTextChanged(null, true);
                if (e.keyCode == 13) {
                    var me = this;

                    me.fire("enter", ex);

                }
            }

        }
        if (e.keyCode == 27) {
            e.preventDefault();
        }







    },
    __OnInputKeyUp: function (e) {
        this.fire("keyup", { htmlEvent: e });
    },
    __OnInputKeyPress: function (e) {
        this.fire("keypress", { htmlEvent: e });
    },
    __OnFocus: function (e) {

        this.doUpdate();

        if (this.isReadOnly()) {
            return;
        }
        this._focused = true;
        this.addCls(this._focusCls);
        this._initInputEvents();







        if (this.selectOnFocus) {
            this.selectText();
        }

        this.fire("focus", { htmlEvent: e });
    },
    __OnBlur: function (e) {
        this._focused = false;
        var sf = this;
        setTimeout(function () {
            if (sf._focused == false) {
                sf.removeCls(sf._focusCls);
            }
        }, 2);











        this.fire("blur", { htmlEvent: e });

        if (this.validateOnLeave) {
            this._tryValidate();
        }
    },
    inputStyle: "",
    setInputStyle: function (value) {
        this.inputStyle = value;
        mini.setStyle(this._textEl, value);
    },

    getAttrs: function (el) {
        var attrs = mini.TextBox.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        mini._ParseString(el, attrs,
            ["value", "text", "emptyText", "inputStyle",
            "onenter", "onkeydown", "onkeyup", "onkeypress",
            "maxLengthErrorText", "minLengthErrorText", "onfocus", "onblur",

            "vtype",
            "emailErrorText", "urlErrorText", "floatErrorText", "intErrorText", "dateErrorText",
            "minErrorText", "maxErrorText", "rangeLengthErrorText", "rangeErrorText", "rangeCharErrorText"
             ]
        );
        mini._ParseBool(el, attrs,
            ["allowInput", "selectOnFocus"
             ]
        );
        mini._ParseInt(el, attrs,
            ["maxLength", "minLength", "minHeight", "minWidth"
             ]
        );

        return attrs;
    },

    vtype: "",
    setVtype: function (value) {
        this.vtype = value;
    },
    getVtype: function () {
        return this.vtype;
    },
    __OnValidation: function (e) {

        if (e.isValid == false) return;
        mini._ValidateVType(this.vtype, e.value, e, this);





















    },
    setEmailErrorText: function (value) {
        this.emailErrorText = value;
    },
    getEmailErrorText: function () {
        return this.emailErrorText;
    },
    setUrlErrorText: function (value) {
        this.urlErrorText = value;
    },
    getUrlErrorText: function () {
        return this.urlErrorText;
    },
    setFloatErrorText: function (value) {
        this.floatErrorText = value;
    },
    getFloatErrorText: function () {
        return this.floatErrorText;
    },
    setIntErrorText: function (value) {
        this.intErrorText = value;
    },
    getIntErrorText: function () {
        return this.intErrorText;
    },
    setDateErrorText: function (value) {
        this.dateErrorText = value;
    },
    getDateErrorText: function () {
        return this.dateErrorText;
    },
    setMaxLengthErrorText: function (value) {
        this.maxLengthErrorText = value;
    },
    getMaxLengthErrorText: function () {
        return this.maxLengthErrorText;
    },
    setMinLengthErrorText: function (value) {
        this.minLengthErrorText = value;
    },
    getMinLengthErrorText: function () {
        return this.minLengthErrorText;
    },
    setMaxErrorText: function (value) {
        this.maxErrorText = value;
    },
    getMaxErrorText: function () {
        return this.maxErrorText;
    },
    setMinErrorText: function (value) {
        this.minErrorText = value;
    },
    getMinErrorText: function () {
        return this.minErrorText;
    },
    setRangeLengthErrorText: function (value) {
        this.rangeLengthErrorText = value;
    },
    getRangeLengthErrorText: function () {
        return this.rangeLengthErrorText;
    },
    setRangeCharErrorText: function (value) {
        this.rangeCharErrorText = value;
    },
    getRangeCharErrorText: function () {
        return this.rangeCharErrorText;
    },
    setRangeErrorText: function (value) {
        this.rangeErrorText = value;
    },
    getRangeErrorText: function () {
        return this.rangeErrorText;
    }

});

mini.regClass(mini.TextBox, 'textbox');


mini.Password = function () {
    mini.Password.superclass.constructor.call(this);
}
mini.extend(mini.Password, mini.TextBox, {
    uiCls: "mini-password",
    _InputType: "password",
    setEmptyText: function (value) {
        this.emptyText = "";
    }
});
mini.regClass(mini.Password, 'password');


mini.TextArea = function () {
    mini.TextArea.superclass.constructor.call(this);
}
mini.extend(mini.TextArea, mini.TextBox, {
    maxLength: 10000000,



    height: '',
    minHeight: 50,
    _InputType: "textarea",
    uiCls: "mini-textarea",
    doLayout: function () {
        if (!this.canLayout()) return;
        mini.TextArea.superclass.doLayout.call(this);

        var h = mini.getHeight(this.el);


        mini.setHeight(this._borderEl, h);

        h -= 2;
        if (h < 0) h = 0;
        this._textEl.style.height = h + "px";
    }
});
mini.regClass(mini.TextArea, 'textarea');





mini.PopupEdit = function () {
    mini.PopupEdit.superclass.constructor.call(this);
    this._createPopup();

    this.el.className += ' mini-popupedit';
}
mini.extend(mini.PopupEdit, mini.ButtonEdit, {
    uiCls: "mini-popupedit",
    popup: null,

    popupCls: "mini-buttonedit-popup",

    _hoverCls: "mini-buttonedit-hover",
    _pressedCls: "mini-buttonedit-pressed",

    _destroyPopup: true,
    destroy: function (removeEl) {
        if (this.isShowPopup()) {
            this.hidePopup();
        }
        if (this.popup) {
            if (this._destroyPopup) {
                this.popup.destroy();
            }
            this.popup = null;
        }
        if (this._popupInner) {
            this._popupInner.owner = null;
            this._popupInner = null;
        }
        mini.PopupEdit.superclass.destroy.call(this, removeEl);
    },
    _initEvents: function () {
        mini.PopupEdit.superclass._initEvents.call(this);

        mini._BindEvents(function () {
            mini_onOne(this.el, "mouseover", this.__OnMouseOver, this);
            mini_onOne(this.el, "mouseout", this.__OnMouseOut, this);



        }, this);
    },
    _initButtons: function () {
        this.buttons = [];

        var button = this.createButton({ cls: "mini-buttonedit-popup", iconCls: "mini-buttonedit-icons-popup", name: "popup" });
        this.buttons.push(button);
    },
    __OnBlur: function (e) {
        this._focused = false;
        if (this._clickTarget && mini.isAncestor(this.el, this._clickTarget)) return;
        if (this.isShowPopup()) return;
        mini.PopupEdit.superclass.__OnBlur.call(this, e);
    },
    __OnMouseOver: function (e) {
        if (this.isReadOnly() || this.allowInput) return;
        if (mini.findParent(e.target, "mini-buttonedit-border")) {
            this.addCls(this._hoverCls);
        }
    },
    __OnMouseOut: function (e) {
        if (this.isReadOnly() || this.allowInput) return;
        this.removeCls(this._hoverCls);
    },
    __OnMouseDown: function (e) {
        if (this.isReadOnly()) return;
        mini.PopupEdit.superclass.__OnMouseDown.call(this, e);
        if (this.allowInput == false && mini.findParent(e.target, "mini-buttonedit-border")) {
            mini.addClass(this.el, this._pressedCls);

            mini.on(document, "mouseup", this.__OnDocMouseUp, this);
        }
    },
    __OnInputKeyDown: function (e) {
        this.fire("keydown", { htmlEvent: e });
        if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
            return false;
        }
        if (e.keyCode == 9) {
            this.hidePopup();
            return;
        }
        if (e.keyCode == 27) {
            this.hidePopup();
            return;
        }
        if (e.keyCode == 13) {
            this.fire("enter");
        }

        if (this.isShowPopup()) {

            if (e.keyCode == 13 || e.keyCode == 27) {
                e.stopPropagation();
            }
        }
    },

    within: function (e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        if (this.popup.within(e)) return true;
        return false;
    },

    popupWidth: "100%",
    popupMinWidth: 50,
    popupMaxWidth: 2000,

    popupHeight: "",
    popupMinHeight: 30,
    popupMaxHeight: 2000,

    setPopup: function (value) {
        if (typeof value == "string") {
            mini.parse(value);
            value = mini.get(value);
        }
        var p = mini.getAndCreate(value);
        if (!p) return;
        p.setVisible(false);

        this._popupInner = p;

        p.owner = this;

        p.on("beforebuttonclick", this.__OnPopupButtonClick, this);
    },

    getPopup: function () {
        if (!this.popup) {
            this._createPopup();
        }
        return this.popup;
    },
    _createPopup: function () {
        this.popup = new mini.Popup();
        this.popup.setShowAction("none");
        this.popup.setHideAction("outerclick");
        this.popup.setPopupEl(this.el);

        this.popup.on("BeforeClose", this.__OnPopupBeforeClose, this);
        mini.on(this.popup.el, "keydown", this.__OnPopupKeyDown, this);
    },
    __OnPopupBeforeClose: function (e) {
        if (this.within(e.htmlEvent)) e.cancel = true;
    },
    __OnPopupKeyDown: function (e) {
    },
    showPopup: function () {
        var ex = { cancel: false };
        this.fire("beforeshowpopup", ex);
        if (ex.cancel == true) return;

        var popup = this.getPopup();




        this._syncShowPopup();

        popup.on("Close", this.__OnPopupHide, this);

        this.fire("showpopup");
    },
    doLayout: function () {
        mini.PopupEdit.superclass.doLayout.call(this);
        if (this.isShowPopup()) {

        }
    },
    _syncShowPopup: function () {
        var popup = this.getPopup();

        if (this._popupInner && this._popupInner.el.parentNode != this.popup._contentEl) {
            this.popup._contentEl.appendChild(this._popupInner.el);
            this._popupInner.setVisible(true);
        }

        var box = this.getBox();

        var w = this.popupWidth;
        if (this.popupWidth == "100%") w = box.width;

        popup.setWidth(w);

        var h = parseInt(this.popupHeight);
        if (!isNaN(h)) {
            popup.setHeight(h);
        } else {
            popup.setHeight("auto");
        }

        popup.setMinWidth(this.popupMinWidth);
        popup.setMinHeight(this.popupMinHeight);
        popup.setMaxWidth(this.popupMaxWidth);
        popup.setMaxHeight(this.popupMaxHeight);

        popup.showAtEl(this.el, {
            xAlign: "left",
            yAlign: "below",
            outYAlign: "above",
            outXAlign: "right",
            popupCls: this.popupCls
        });
    },
    __OnPopupHide: function (e) {
        this.__doFocusCls();
        this.fire("hidepopup");
    },
    hidePopup: function () {
        if (this.isShowPopup()) {
            var popup = this.getPopup();
            popup.close();
        }

    },
    isShowPopup: function () {
        if (this.popup && this.popup.isDisplay()) return true;
        else return false;
    },

    setPopupWidth: function (value) {
        this.popupWidth = value;
    },
    setPopupMaxWidth: function (value) {
        this.popupMaxWidth = value;
    },
    setPopupMinWidth: function (value) {
        this.popupMinWidth = value;
    },
    getPopupWidth: function (value) {
        return this.popupWidth;
    },
    getPopupMaxWidth: function (value) {
        return this.popupMaxWidth;
    },
    getPopupMinWidth: function (value) {
        return this.popupMinWidth;
    },
    setPopupHeight: function (value) {
        this.popupHeight = value;
    },
    setPopupMaxHeight: function (value) {
        this.popupMaxHeight = value;
    },
    setPopupMinHeight: function (value) {
        this.popupMinHeight = value;
    },
    getPopupHeight: function (value) {
        return this.popupHeight;
    },
    getPopupMaxHeight: function (value) {
        return this.popupMaxHeight;
    },
    getPopupMinHeight: function (value) {
        return this.popupMinHeight;
    },
    __OnClick: function (e) {
        if (this.isReadOnly()) return;

        if (mini.isAncestor(this._buttonEl, e.target)) {
            this._OnButtonClick(e);
        }
        if (mini.findParent(e.target, this._closeCls)) {
            if (this.isShowPopup()) {
                this.hidePopup();
            }
            this.fire("closeclick", { htmlEvent: e });
            return;
        }
        if (this.allowInput == false || mini.isAncestor(this._buttonEl, e.target)) {
            if (this.isShowPopup()) {
                this.hidePopup();
            } else {
                var sf = this;
                setTimeout(function () {
                    sf.showPopup();
                }, 1);
            }
        }
    },
    __OnPopupButtonClick: function (e) {
        if (e.name == "close") this.hidePopup();
        e.cancel = true;
    },

    ajaxType: "",
    setAjaxType: function (value) {
        this.ajaxType = value;
        var source = this._listbox || this.tree;
        if (source) source.setAjaxType(value);
    },
    getAjaxType: function () {
        return this.ajaxType;
    },

    getAttrs: function (el) {
        var attrs = mini.PopupEdit.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["popupWidth", "popupHeight", "popup", "onshowpopup", "onhidepopup", "onbeforeshowpopup",
            "ajaxType"
             ]
        );
        mini._ParseInt(el, attrs,
            ["popupMinWidth", "popupMaxWidth", "popupMinHeight", "popupMaxHeight"
             ]
        );

        return attrs;
    }

});
mini.regClass(mini.PopupEdit, 'popupedit');


mini.ComboBox = function () {
    this.data = [];
    this.columns = [];
    mini.ComboBox.superclass.constructor.call(this);

    var me = this;
    if (isFirefox) {
        this._textEl.oninput = function () {
            me._tryQuery();
        }
    }
}
mini.extend(mini.ComboBox, mini.PopupEdit, {
    text: '',
    value: '',

    valueField: "id",
    textField: "text",
    delimiter: ',',

    multiSelect: false,
    data: [],
    url: "",

    columns: [],

    allowInput: false,

    valueFromSelect: false,

    popupMaxHeight: 200,

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var value = kv.value;
        delete kv.value;
        var url = kv.url;
        delete kv.url;
        var data = kv.data;
        delete kv.data;

        mini.ComboBox.superclass.set.call(this, kv);

        if (!mini.isNull(data)) {
            this.setData(data);

            kv.data = data;
        }
        if (!mini.isNull(url)) {
            this.setUrl(url);

            kv.url = url;
        }
        if (!mini.isNull(value)) {
            this.setValue(value);

            kv.value = value;
        }

        return this;
    },


    uiCls: "mini-combobox",


    _createPopup: function () {
        mini.ComboBox.superclass._createPopup.call(this);

        this._listbox = new mini.ListBox();

        this._listbox.setBorderStyle("border:0;");
        this._listbox.setStyle("width:100%;height:auto;");
        this._listbox.render(this.popup._contentEl);

        this._listbox.on("itemclick", this.__OnItemClick, this);
        this._listbox.on("drawcell", this.__OnItemDrawCell, this);

        var me = this;
        this._listbox.on("beforeload", function (e) {
            me.fire("beforeload", e);
        }, this);
        this._listbox.on("load", function (e) {
            me.fire("load", e);
        }, this);
        this._listbox.on("loaderror", function (e) {
            me.fire("loaderror", e);
        }, this);
    },
    showPopup: function () {
        var ex = { cancel: false };
        this.fire("beforeshowpopup", ex);
        if (ex.cancel == true) return;


        this._listbox.setHeight("auto");
        mini.ComboBox.superclass.showPopup.call(this);
        var h = this.popup.el.style.height;
        if (h == "" || h == "auto") {
            this._listbox.setHeight("auto");
        } else {
            this._listbox.setHeight("100%");
        }

        this._listbox.setValue(this.value);





    },
    select: function (item) {
        this._listbox.deselectAll();
        item = this.getItem(item);
        if (item) {
            this._listbox.select(item);
            this.__OnItemClick({ item: item });
        }
    },
    getItem: function (item) {
        return typeof item == "object" ? item : this.data[item];
    },
    indexOf: function (item) {
        return this.data.indexOf(item);
    },
    getAt: function (index) {
        return this.data[index];
    },
    load: function (data) {
        if (typeof data == "string") {
            this.setUrl(data);
        } else {
            this.setData(data);
        }
    },
    _eval: function (_) {
        return eval('(' + _ + ')');
    },
    setData: function (data) {

        if (typeof data == "string") {
            data = this._eval(data);



        }
        if (!mini.isArray(data)) data = [];
        this._listbox.setData(data);
        this.data = this._listbox.data;



        var vts = this._listbox.getValueAndText(this.value);
        this.text = this._textEl.value = vts[1];

    },
    getData: function () {
        return this.data;
    },
    setUrl: function (url) {
        this.getPopup();

        this._listbox.setUrl(url);
        this.url = this._listbox.url;
        this.data = this._listbox.data;

        var vts = this._listbox.getValueAndText(this.value);
        this.text = this._textEl.value = vts[1];
    },
    getUrl: function () {
        return this.url;
    },
    setValueField: function (valueField) {
        this.valueField = valueField;
        if (this._listbox) {
            this._listbox.setValueField(valueField);
        }
    },
    getValueField: function () {
        return this.valueField;
    },
    setTextField: function (value) {
        if (this._listbox) this._listbox.setTextField(value);
        this.textField = value;
    },
    getTextField: function () {
        return this.textField;
    },
    setDisplayField: function (value) {
        this.setTextField(value);
    },
    setDataField: function (value) {
        if (this._listbox) this._listbox.setDataField(value);
        this.dataField = value;
    },
    setValue: function (value) {
        if (this.value !== value) {
            var vts = this._listbox.getValueAndText(value);

            this.value = value;

            this._valueEl.value = this.value;
            this.text = this._textEl.value = vts[1];

            this._doEmpty();
        } else {
            var vts = this._listbox.getValueAndText(value);
            this.text = this._textEl.value = vts[1];
        }
    },
    setMultiSelect: function (value) {
        if (this.multiSelect != value) {
            this.multiSelect = value;
            if (this._listbox) {
                this._listbox.setMultiSelect(value);
                this._listbox.setShowCheckBox(value);
            }
        }
    },
    getMultiSelect: function () {
        return this.multiSelect;
    },
    setColumns: function (value) {
        if (!mini.isArray(value)) value = [];
        this.columns = value;
        this._listbox.setColumns(value);
    },
    getColumns: function () {
        return this.columns;
    },
    showNullItem: false,
    setShowNullItem: function (value) {
        if (this.showNullItem != value) {
            this.showNullItem = value;
            this._listbox.setShowNullItem(value);
        }
    },
    getShowNullItem: function () {
        return this.showNullItem;
    },
    setNullItemText: function (value) {
        if (this.nullItemText != value) {
            this.nullItemText = value;
            this._listbox.setNullItemText(value);
        }
    },
    getNullItemText: function () {
        return this.nullItemText;
    },
    setValueFromSelect: function (value) {
        this.valueFromSelect = value;
    },
    getValueFromSelect: function () {
        return this.valueFromSelect;
    },

    _OnValueChanged: function () {
        if (this.validateOnChanged) {
            this._tryValidate();
        }
        var value = this.getValue();
        var selecteds = this.getSelecteds();
        var selected = selecteds[0];
        var sf = this;

        sf.fire("valuechanged", { value: value, selecteds: selecteds, selected: selected });

    },
    getSelecteds: function () {
        return this._listbox.findItems(this.value);
    },
    getSelected: function () {
        return this.getSelecteds()[0];
    },
    __OnItemDrawCell: function (e) {

        this.fire("drawcell", e);
    },
    __OnItemClick: function (e) {
        var ev = { item: e.item, cancel: false };

        this.fire("beforeitemclick", ev);
        if (ev.cancel) return;




        var items = this._listbox.getSelecteds();

        var vts = this._listbox.getValueAndText(items);


        var value = this.getValue();
        this.setValue(vts[0]);
        this.setText(vts[1]);
        if (e) {
            if (value != this.getValue()) {
                var sf = this;
                setTimeout(function () {
                    sf._OnValueChanged();
                }, 1);
            }

            if (!this.multiSelect) {
                this.hidePopup();
            }

            this.focus();


            this.fire("itemclick", { item: e.item });
        }
    },
    __OnInputKeyDown: function (e, userOldText) {
        var ex = { htmlEvent: e };
        this.fire("keydown", ex);

        if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
            return false;
        }

        if (e.keyCode == 9) {
            this.hidePopup();
            return;
        }

        if (this.isReadOnly()) return;

        switch (e.keyCode) {
            case 27:
                e.preventDefault();
                if (this.isShowPopup()) {
                    e.stopPropagation();
                }

                this.hidePopup();
                break;
            case 13:
                if (this.isShowPopup()) {
                    e.preventDefault();
                    e.stopPropagation();

                    var index = this._listbox.getFocusedIndex();
                    if (index != -1) {
                        var item = this._listbox.getAt(index);

                        var ev = { item: item, cancel: false };
                        this.fire("beforeitemclick", ev);
                        if (ev.cancel == false) {
                            if (this.multiSelect) {

                            } else {
                                this._listbox.deselectAll();
                                this._listbox.select(item);
                            }
                            var items = this._listbox.getSelecteds();
                            var vts = this._listbox.getValueAndText(items);
                            this.setValue(vts[0]);
                            this.setText(vts[1]);
                            this._OnValueChanged();
                        }
                    }
                    this.hidePopup();
                } else {
                    this.fire("enter", ex);
                }
                break;
            case 37:
                break;
            case 38:
                e.preventDefault();
                var index = this._listbox.getFocusedIndex();
                if (index == -1) {
                    index = 0;
                    if (!this.multiSelect) {
                        var item = this._listbox.findItems(this.value)[0];
                        if (item) {
                            index = this._listbox.indexOf(item);
                        }
                    }
                }
                if (this.isShowPopup()) {
                    if (!this.multiSelect) {
                        index -= 1;
                        if (index < 0) index = 0;
                        this._listbox._focusItem(index, true);
                    }
                }
                break;
            case 39:
                break;
            case 40:
                e.preventDefault();
                var index = this._listbox.getFocusedIndex();
                if (index == -1) {
                    index = 0;
                    if (!this.multiSelect) {
                        var item = this._listbox.findItems(this.value)[0];
                        if (item) {
                            index = this._listbox.indexOf(item);
                        }
                    }
                }
                if (this.isShowPopup()) {
                    if (!this.multiSelect) {
                        index += 1;
                        if (index > this._listbox.getCount() - 1) index = this._listbox.getCount() - 1;
                        this._listbox._focusItem(index, true);
                    }
                } else {
                    this.showPopup();
                    if (!this.multiSelect) {
                        this._listbox._focusItem(index, true);
                    }
                }
                break;
            default:
                this._tryQuery(this._textEl.value);
                break;
        }
    },
    __OnInputKeyUp: function (e) {
        this.fire("keyup", { htmlEvent: e });


    },
    __OnInputKeyPress: function (e) {
        this.fire("keypress", { htmlEvent: e });
    },
    _tryQuery: function (oldText) {

        var sf = this;
        setTimeout(function () {
            var text = sf._textEl.value;
            if (text != oldText) {
                sf._doQuery(text);

            }
        }, 10);
    },
    _doQuery: function (key) {
        if (this.multiSelect == true) return;
        var view = [];
        for (var i = 0, l = this.data.length; i < l; i++) {
            var o = this.data[i];
            var text = mini._getMap(this.textField, o);
            if (typeof text == "string") {
                text = text.toUpperCase();
                key = key.toUpperCase();
                if (text.indexOf(key) != -1) {
                    view.push(o);
                }
            }
        }
        this._listbox.setData(view);
        this._filtered = true;
        if (key !== "" || this.isShowPopup()) {
            this.showPopup();



            var index = 0;

            if (this._listbox.getShowNullItem()) index = 1;
            var me = this;

            me._listbox._focusItem(index, true);

        }
    },
    __OnPopupHide: function (e) {
        if (this._filtered) {
            this._filtered = false;
            if (this._listbox.el) {
                this._listbox.setData(this.data);
            }
        }
        this.__doFocusCls();
        this.fire("hidepopup");
    },





    findItems: function (value) {
        return this._listbox.findItems(value);
    },
    __OnInputTextChanged: function (e) {
        if (this.isShowPopup()) return;
        if (this.multiSelect == false) {

            var text = this._textEl.value;



            var data = this.getData();
            var selected = null;
            for (var i = 0, l = data.length; i < l; i++) {
                var item = data[i];
                var itemText = item[this.textField];
                if (itemText == text) {
                    selected = item;
                    break;
                }
            }
            if (selected) {
                this._listbox.setValue(selected ? selected[this.valueField] : "");

                var v = this._listbox.getValue();
                var vts = this._listbox.getValueAndText(v);

                var value = this.getValue();
                this.setValue(v);
                this.setText(vts[1]);
            } else {
                if (this.valueFromSelect) {
                    this.setValue("");
                    this.setText("");
                } else {
                    this.setValue(text);
                    this.setText(text);
                }
            }
            if (value != this.getValue()) {
                var sf = this;

                sf._OnValueChanged();

            }


        }

















    },

    getAttrs: function (el) {

        var attrs = mini.ComboBox.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["url", "data", "textField", "valueField", "displayField", "nullItemText",
            "ondrawcell", "onbeforeload", "onload", "onloaderror", "onitemclick", "onbeforeitemclick"
             ]
        );
        mini._ParseBool(el, attrs,
            ["multiSelect", "showNullItem", "valueFromSelect"
             ]
        );

        if (attrs.displayField) attrs.textField = attrs.displayField;

        var valueField = attrs.valueField || this.valueField;
        var textField = attrs.textField || this.textField;
        if (el.nodeName.toLowerCase() == "select") {

            var data = [];
            for (var i = 0, l = el.length; i < l; i++) {
                var op = el.options[i];
                var o = {};
                o[textField] = op.text;
                o[valueField] = op.value;

                data.push(o);
            }
            if (data.length > 0) {
                attrs.data = data;
            }
        } else {
            var cs = mini.getChildNodes(el);
            for (var i = 0, l = cs.length; i < l; i++) {
                var node = cs[i];
                var property = jQuery(node).attr("property");
                if (!property) continue;
                property = property.toLowerCase();
                if (property == "columns") {
                    attrs.columns = mini._ParseColumns(node);
                } else if (property == "data") {
                    attrs.data = node.innerHTML;
                }
            }
        }

        return attrs;
    }
});
mini.regClass(mini.ComboBox, 'combobox');


mini.DatePicker = function () {
    mini.DatePicker.superclass.constructor.call(this);
}

mini.extend(mini.DatePicker, mini.PopupEdit, {
    format: "yyyy-MM-dd",


    maxDate: null,
    minDate: null,

    popupWidth: "",

    viewDate: new Date(),
    showTime: false,
    timeFormat: 'H:mm',

    showTodayButton: true,
    showClearButton: true,
    showOkButton: false,

    uiCls: "mini-datepicker",

    _getCalendar: function () {
        if (!mini.DatePicker._Calendar) {
            var calendar = mini.DatePicker._Calendar = new mini.Calendar();

            calendar.setStyle("border:0;");
        }
        return mini.DatePicker._Calendar;
    },
    destroy: function (removeEl) {
        if (this._destroyPopup) {
            mini.DatePicker._Calendar = null;
        }
        mini.DatePicker.superclass.destroy.call(this, removeEl);
    },
    _createPopup: function () {
        mini.DatePicker.superclass._createPopup.call(this);

        this._calendar = this._getCalendar();
    },
    showPopup: function () {
        var ex = { cancel: false };
        this.fire("beforeshowpopup", ex);
        if (ex.cancel == true) return;

        this._calendar.beginUpdate();
        this._calendar._allowLayout = false;
        if (this._calendar.el.parentNode != this.popup._contentEl) {
            this._calendar.render(this.popup._contentEl);
        }

        this._calendar.set({
            showTime: this.showTime,
            timeFormat: this.timeFormat,
            showClearButton: this.showClearButton,
            showTodayButton: this.showTodayButton,
            showOkButton: this.showOkButton
        });

        this._calendar.setValue(this.value);

        if (this.value) {
            this._calendar.setViewDate(this.value);
        } else {
            this._calendar.setViewDate(this.viewDate);
        }

        mini.DatePicker.superclass.showPopup.call(this);

        function doUpdate() {
            if (this._calendar._target) {
                var obj = this._calendar._target;
                this._calendar.un("timechanged", obj.__OnTimeChanged, obj);
                this._calendar.un("dateclick", obj.__OnDateClick, obj);
                this._calendar.un("drawdate", obj.__OnDrawDate, obj);
            }
            this._calendar.on("timechanged", this.__OnTimeChanged, this);
            this._calendar.on("dateclick", this.__OnDateClick, this);
            this._calendar.on("drawdate", this.__OnDrawDate, this);

            this._calendar.endUpdate();

            this._calendar._allowLayout = true;
            this._calendar.doLayout();

            this._calendar.focus();

            this._calendar._target = this;
        }

        var me = this;

        doUpdate.call(me);



    },
    hidePopup: function () {
        mini.DatePicker.superclass.hidePopup.call(this);

        this._calendar.un("timechanged", this.__OnTimeChanged, this);
        this._calendar.un("dateclick", this.__OnDateClick, this);
        this._calendar.un("drawdate", this.__OnDrawDate, this);

    },
    within: function (e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        if (this._calendar.within(e)) return true;
        return false;
    },
    __OnPopupKeyDown: function (e) {
        if (e.keyCode == 13) {
            this.__OnDateClick();
        }
        if (e.keyCode == 27) {
            this.hidePopup();
            this.focus();
        }
    },
    __OnDrawDate: function (e) {
        var date = e.date;
        var maxDate = mini.parseDate(this.maxDate);
        var minDate = mini.parseDate(this.minDate);
        if (mini.isDate(maxDate)) {
            if (date.getTime() > maxDate.getTime()) {
                e.allowSelect = false;
            }
        }
        if (mini.isDate(minDate)) {
            if (date.getTime() < minDate.getTime()) {
                e.allowSelect = false;
            }
        }

        this.fire("drawdate", e);
    },
    __OnDateClick: function (e) {

        if (this.showOkButton && e.action != "ok") return;

        var date = this._calendar.getValue();
        var value = this.getFormValue('U');

        this.setValue(date);

        if (value !== this.getFormValue('U')) {
            this._OnValueChanged();
        }

        this.focus();

        this.hidePopup();
    },
    __OnTimeChanged: function (e) {
        if (this.showOkButton) return;
        var date = this._calendar.getValue();
        this.setValue(date);
        this._OnValueChanged();
    },
    setFormat: function (value) {
        if (typeof value != "string") return;
        if (this.format != value) {
            this.format = value;
            this._textEl.value = this._valueEl.value = this.getFormValue();
        }
    },
    getFormat: function () {
        return this.format;
    },

    valueFormat: "",
    setValueFormat: function (value) {
        if (typeof value != "string") return;
        this.valueFormat = value;
    },
    getValueFormat: function () {
        return this.valueFormat;
    },

    nullValue: null,
    setNullValue: function (value) {
        if (value == "null") value = null;
        this.nullValue = value;
    },
    getNullValue: function () {
        return this.nullValue;
    },

    maxDate: new Date(2100, 0, 1),

    setValue: function (value) {

        value = mini.parseDate(value);
        if (mini.isNull(value)) value = "";
        if (mini.isDate(value)) value = new Date(value.getTime());
        if (this.value != value) {
            if (value && value > this.maxDate) value = new Date(this.maxDate.getTime());
            this.value = value;
            this.text = this._textEl.value = this._valueEl.value = this.getFormValue();

        }
    },
    getValue: function () {
        if (!mini.isDate(this.value)) return this.nullValue;

        var v = this.value;
        if (this.valueFormat) {
            v = mini.formatDate(v, this.valueFormat);
        }
        return v;
    },
    getFormValue: function (format) {
        if (!mini.isDate(this.value)) return "";
        format = format || this.format;
        return mini.formatDate(this.value, format);
    },
    setViewDate: function (value) {
        value = mini.parseDate(value);
        if (!mini.isDate(value)) return;
        this.viewDate = value;
    },
    getViewDate: function () {
        return this._calendar.getViewDate();
    },
    setShowTime: function (value) {
        if (this.showTime != value) {
            this.showTime = value;

        }
    },
    getShowTime: function () {
        return this.showTime;
    },
    setTimeFormat: function (value) {
        if (this.timeFormat != value) {
            this.timeFormat = value;

        }
    },
    getTimeFormat: function () {
        return this.timeFormat;
    },
    setShowTodayButton: function (value) {
        this.showTodayButton = value;

    },
    getShowTodayButton: function () {
        return this.showTodayButton;
    },
    setShowClearButton: function (value) {
        this.showClearButton = value;

    },
    getShowClearButton: function () {
        return this.showClearButton;
    },
    setShowOkButton: function (value) {
        this.showOkButton = value;
    },
    getShowOkButton: function () {
        return this.showOkButton;
    },

    setMaxDate: function (value) {
        this.maxDate = value;
    },
    getMaxDate: function () {
        return this.maxDate;
    },
    setMinDate: function (value) {
        this.minDate = value;
    },
    getMinDate: function () {
        return this.minDate;
    },

    __OnInputTextChanged: function (e) {
        var v = this._textEl.value;

        var d = mini.parseDate(v);

        if (!d || isNaN(d) || d.getFullYear() == 1970) {
            d = null;
        }

        var value = this.getFormValue('U');

        this.setValue(d);
        if (d == null) this._textEl.value = "";









        if (value !== this.getFormValue('U')) {
            this._OnValueChanged();
        }

    },
    __OnInputKeyDown: function (e) {
        var ex = { htmlEvent: e };
        this.fire("keydown", ex);
        if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
            return false;
        }

        if (e.keyCode == 9) {
            this.hidePopup();
            return;
        }

        if (this.isReadOnly()) return;

        switch (e.keyCode) {
            case 27:
                e.preventDefault();
                if (this.isShowPopup()) {
                    e.stopPropagation();
                }

                this.hidePopup();
                break;
            case 9:
            case 13:
                if (this.isShowPopup()) {
                    e.preventDefault();
                    e.stopPropagation();


                    this.hidePopup();

                } else {
                    this.__OnInputTextChanged(null);
                    var me = this;
                    setTimeout(function () {
                        me.fire("enter", ex);
                    }, 10);
                }
                break;
            case 37:
                break;
            case 38:
                e.preventDefault();
                break;
            case 39:
                break;
            case 40:
                e.preventDefault();
                this.showPopup();
                break;
            default:
                break;
        }
    },

    getAttrs: function (el) {
        var attrs = mini.DatePicker.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["format", "viewDate", "timeFormat", "ondrawdate", "minDate", "maxDate",
            "valueFormat", "nullValue"
             ]
        );
        mini._ParseBool(el, attrs,
            ["showTime", "showTodayButton", "showClearButton", "showOkButton"
             ]
        );

        return attrs;
    }
});

mini.regClass(mini.DatePicker, 'datepicker');


mini.Calendar = function () {
    this.viewDate = new Date();
    this._selectedDates = [];
    mini.Calendar.superclass.constructor.call(this);
}
mini.extend(mini.Calendar, mini.Control, {
    width: 220,
    height: 160,

    _clearBorder: false,

    viewDate: null,
    _selectedDate: "",
    _selectedDates: [],
    multiSelect: false,

    firstDayOfWeek: 0,
    todayText: "Today",
    clearText: "Clear",
    okText: "OK",
    cancelText: "Cancel",
    daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    format: "MMM, yyyy",

    timeFormat: 'H:mm',

    showTime: false,
    currentTime: true,

    rows: 1,
    columns: 1,

    headerCls: "",
    bodyCls: "",
    footerCls: "",

    _todayCls: "mini-calendar-today",
    _weekendCls: "mini-calendar-weekend",
    _otherMonthCls: "mini-calendar-othermonth",
    _selectedDateCls: "mini-calendar-selected",

    showHeader: true,
    showFooter: true,
    showWeekNumber: false,
    showDaysHeader: true,
    showMonthButtons: true,
    showYearButtons: true,
    showTodayButton: true,
    showClearButton: true,
    showOkButton: false,

    isWeekend: function (date) {
        var day = date.getDay();
        return day == 0 || day == 6;
    },
    getFirstDateOfMonth: function (date) {

        var date = new Date(date.getFullYear(), date.getMonth(), 1);

        return mini.getWeekStartDate(date, this.firstDayOfWeek);
    },
    getShortWeek: function (week) {
        return this.daysShort[week];
    },

    uiCls: "mini-calendar",
    _create: function () {
        var s = '<tr style="width:100%;"><td style="width:100%;"></td></tr>';
        s += '<tr ><td><div class="mini-calendar-footer">'
                    + '<span style="display:inline-block;"><input name="time" class="mini-timespinner" style="width:80px" format="' + this.timeFormat + '"/>'
                    + '<span class="mini-calendar-footerSpace"></span></span>'
                    + '<span class="mini-calendar-tadayButton">' + this.todayText + '</span>'
                    + '<span class="mini-calendar-footerSpace"></span>'
                    + '<span class="mini-calendar-clearButton">' + this.clearText + '</span>'
                    + '<span class="mini-calendar-okButton">' + this.okText + '</span>'
                    + '<a href="#" class="mini-calendar-focus" style="position:absolute;left:-10px;top:-10px;width:0px;height:0px;outline:none" hideFocus></a>'
                    + '</div></td></tr>';

        var html = '<table class="mini-calendar" cellpadding="0" cellspacing="0">' + s + '</table>';

        var d = document.createElement("div");
        d.innerHTML = html;
        this.el = d.firstChild;

        var trs = this.el.getElementsByTagName("tr");
        var tds = this.el.getElementsByTagName("td");

        this._innerEl = tds[0];
        this._footerEl = mini.byClass("mini-calendar-footer", this.el);

        this.timeWrapEl = this._footerEl.childNodes[0];
        this.todayButtonEl = this._footerEl.childNodes[1];
        this.footerSpaceEl = this._footerEl.childNodes[2];
        this.closeButtonEl = this._footerEl.childNodes[3];
        this.okButtonEl = this._footerEl.childNodes[4];

        this._focusEl = this._footerEl.lastChild;

        mini.parse(this._footerEl);
        this.timeSpinner = mini.getbyName('time', this.el);
        this.doUpdate();
    },
    focus: function () {
        try {
            this._focusEl.focus();
        } catch (e) { }
    },
    destroy: function (removeEl) {
        this._innerEl = this._footerEl = this.timeWrapEl = this.todayButtonEl = this.footerSpaceEl = this.closeButtonEl = null;

        mini.Calendar.superclass.destroy.call(this, removeEl);
    },
    _initEvents: function () {
        if (this.timeSpinner) this.timeSpinner.on("valuechanged", this.__OnTimeChanged, this);
        mini._BindEvents(function () {





            mini.on(this.el, "click", this.__OnClick, this);
            mini.on(this.el, "mousedown", this.__OnMouseDown, this);
            mini.on(this.el, "keydown", this.__OnKeyDown, this);

        }, this);
    },
    getDateEl: function (date) {
        if (!date) return null;
        var id = this.uid + "$" + mini.clearTime(date).getTime();
        return document.getElementById(id);
    },
    within: function (e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        if (this.menuEl && mini.isAncestor(this.menuEl, e.target)) return true;
        return false;
    },





















































    setShowHeader: function (value) {
        this.showHeader = value;
        this.doUpdate();
    },
    getShowHeader: function () {
        return this.showHeader;
    },
    setShowFooter: function (value) {
        this.showFooter = value;
        this.doUpdate();
    },
    getShowFooter: function () {
        return this.showFooter;
    },
    setShowWeekNumber: function (value) {
        this.showWeekNumber = value;
        this.doUpdate();
    },
    getShowWeekNumber: function () {
        return this.showWeekNumber;
    },
    setShowDaysHeader: function (value) {
        this.showDaysHeader = value;
        this.doUpdate();
    },
    getShowDaysHeader: function () {
        return this.showDaysHeader;
    },
    setShowMonthButtons: function (value) {
        this.showMonthButtons = value;
        this.doUpdate();
    },
    getShowMonthButtons: function () {
        return this.showMonthButtons;
    },
    setShowYearButtons: function (value) {
        this.showYearButtons = value;
        this.doUpdate();
    },
    getShowYearButtons: function () {
        return this.showYearButtons;
    },
    setShowTodayButton: function (value) {
        this.showTodayButton = value;
        this.todayButtonEl.style.display = this.showTodayButton ? "" : "none";
        this.doUpdate();
    },
    getShowTodayButton: function () {
        return this.showTodayButton;
    },
    setShowClearButton: function (value) {
        this.showClearButton = value;
        this.closeButtonEl.style.display = this.showClearButton ? "" : "none";
        this.doUpdate();
    },
    getShowClearButton: function () {
        return this.showClearButton;
    },
    setShowOkButton: function (value) {
        this.showOkButton = value;
        this.okButtonEl.style.display = this.showOkButton ? "" : "none";
        this.doUpdate();
    },
    getShowOkButton: function () {
        return this.showOkButton;
    },

    setViewDate: function (value) {
        value = mini.parseDate(value);
        if (!value) value = new Date();
        if (mini.isDate(value)) value = new Date(value.getTime());
        this.viewDate = value;
        this.doUpdate();
    },
    getViewDate: function () {
        return this.viewDate;
    },
    setSelectedDate: function (value) {
        value = mini.parseDate(value);
        if (!mini.isDate(value)) value = "";
        else value = new Date(value.getTime());

        var dateEl = this.getDateEl(this._selectedDate);
        if (dateEl) mini.removeClass(dateEl, this._selectedDateCls);


        this._selectedDate = value;
        if (this._selectedDate) this._selectedDate = mini.cloneDate(this._selectedDate);

        var dateEl = this.getDateEl(this._selectedDate);
        if (dateEl) mini.addClass(dateEl, this._selectedDateCls);

        this.fire("datechanged");

    },
    setSelectedDates: function (value) {
        if (!mini.isArray(value)) value = [];
        this._selectedDates = value;
        this.doUpdate();
    },
    getSelectedDate: function () {
        return this._selectedDate ? this._selectedDate : "";
    },
    setTime: function (time) {
        this.timeSpinner.setValue(time);
    },
    getTime: function () {
        return this.timeSpinner.getFormValue();
    },
    setValue: function (value) {
        this.setSelectedDate(value);
        if (!value) {
            value = new Date();
        }
        this.setTime(value);
    },
    getValue: function () {
        var d = this._selectedDate;
        if (d) {
            d = mini.clearTime(d);
            if (this.showTime) {
                var d2 = this.timeSpinner.getValue();
                d.setHours(d2.getHours());
                d.setMinutes(d2.getMinutes());
                d.setSeconds(d2.getSeconds());
            }
        }
        return d ? d : "";
    },
    getFormValue: function () {
        var d = this.getValue();
        if (d) return mini.formatDate(d, 'yyyy-MM-dd HH:mm:ss');
        return "";
    },
    isSelectedDate: function (date) {
        if (!date || !this._selectedDate) return false;
        return mini.clearTime(date).getTime()
                == mini.clearTime(this._selectedDate).getTime();
    },
    setMultiSelect: function (value) {
        this.multiSelect = value;
        this.doUpdate();
    },
    getMultiSelect: function () {
        return this.multiSelect;
    },
    setRows: function (value) {
        if (isNaN(value)) return;
        if (value < 1) value = 1;
        this.rows = value;
        this.doUpdate();
    },
    getRows: function () {
        return this.rows;
    },
    setColumns: function (value) {
        if (isNaN(value)) return;
        if (value < 1) value = 1;
        this.columns = value;
        this.doUpdate();
    },
    getColumns: function () {
        return this.columns;
    },
    setShowTime: function (value) {
        if (this.showTime != value) {
            this.showTime = value;
            this.timeWrapEl.style.display = this.showTime ? '' : "none";
            this.doLayout();
        }
    },
    getShowTime: function () {
        return this.showTime;
    },
    setTimeFormat: function (value) {
        if (this.timeFormat != value) {

            this.timeSpinner.setFormat(value);
            this.timeFormat = this.timeSpinner.format;
        }
    },
    getTimeFormat: function () {
        return this.timeFormat;
    },
    doLayout: function () {

        if (!this.canLayout()) return;

        this.timeWrapEl.style.display = this.showTime ? '' : "none";
        this.todayButtonEl.style.display = this.showTodayButton ? "" : "none";
        this.closeButtonEl.style.display = this.showClearButton ? "" : "none";

        this.okButtonEl.style.display = this.showOkButton ? "" : "none";
        this.footerSpaceEl.style.display = (this.showClearButton && this.showTodayButton) ? "" : "none";

        this._footerEl.style.display = this.showFooter ? "" : "none";

        var views = this._innerEl.firstChild;

        var autoHeight = this.isAutoHeight();
        if (!autoHeight) {

            views.parentNode.style.height = "100px";
            h = jQuery(this.el).height();


            h -= jQuery(this._footerEl).outerHeight()

            views.parentNode.style.height = h + "px";
        } else {
            views.parentNode.style.height = "";
        }

        mini.layout(this._footerEl);
    },
    doUpdate: function () {
        if (!this._allowUpdate) return;

        var viewDate = new Date(this.viewDate.getTime());
        var isOne = this.rows == 1 && this.columns == 1;
        var h = 100 / this.rows;
        var s = '<table class="mini-calendar-views" border="0" cellpadding="0" cellspacing="0">';
        for (var i = 0, l = this.rows; i < l; i++) {
            s += '<tr >';
            for (var j = 0, k = this.columns; j < k; j++) {
                s += '<td style="height:' + h + '%">';

                s += this._CreateView(viewDate, i, j);

                s += '</td>';

                viewDate = new Date(viewDate.getFullYear(), viewDate.getMonth() + 1, 1);
            }
            s += '</tr>';
        }

        s += '</table>';
        this._innerEl.innerHTML = s;

        var el = this.el;
        setTimeout(function () {
            mini.repaint(el);
        }, 100);

        this.doLayout();
    },
    _CreateView: function (viewDate, row, column) {
        var month = viewDate.getMonth();
        var date = this.getFirstDateOfMonth(viewDate);
        var firstDateOfWeek = new Date(date.getTime());
        var todayTime = mini.clearTime(new Date()).getTime();
        var selectedTime = this.value ? mini.clearTime(this.value).getTime() : -1;

        var multiView = this.rows > 1 || this.columns > 1;

        var s = '';
        s += '<table class="mini-calendar-view" border="0" cellpadding="0" cellspacing="0">';

        if (this.showHeader) {
            s += '<tr ><td colSpan="10" class="mini-calendar-header"><div class="mini-calendar-headerInner">';
            if (row == 0 && column == 0) {
                s += '<div class="mini-calendar-prev">';
                if (this.showYearButtons) s += '<span class="mini-calendar-yearPrev"></span>';
                if (this.showMonthButtons) s += '<span class="mini-calendar-monthPrev"></span>';
                s += '</div>';
            }
            if (row == 0 && column == this.columns - 1) {
                s += '<div class="mini-calendar-next">';
                if (this.showMonthButtons) s += '<span class="mini-calendar-monthNext"></span>';
                if (this.showYearButtons) s += '<span class="mini-calendar-yearNext"></span>';
                s += '</div>';
            }
            s += '<span class="mini-calendar-title">' + mini.formatDate(viewDate, this.format); +'</span>';
            s += '</div></td></tr>';
        }


        if (this.showDaysHeader) {
            s += '<tr class="mini-calendar-daysheader"><td class="mini-calendar-space"></td>';
            if (this.showWeekNumber) {
                s += '<td sclass="mini-calendar-weeknumber"></td>';
            }

            for (var j = this.firstDayOfWeek, k = j + 7; j < k; j++) {
                var name = this.getShortWeek(j);
                s += '<td yAlign="middle">';
                s += name;
                s += '</td>';
                date = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1);
            }
            s += '<td class="mini-calendar-space"></td></tr>';
        }


        date = firstDateOfWeek;
        for (var i = 0; i <= 5; i++) {
            s += '<tr class="mini-calendar-days"><td class="mini-calendar-space"></td>';
            if (this.showWeekNumber) {
                var num = mini.getWeek(date.getFullYear(), date.getMonth() + 1, date.getDate());
                if (String(num).length == 1) num = "0" + num;
                s += '<td class="mini-calendar-weeknumber" yAlign="middle">' + num + '</td>';
            }
            for (var j = this.firstDayOfWeek, k = j + 7; j < k; j++) {
                var weekend = this.isWeekend(date);
                var clearTime = mini.clearTime(date).getTime();
                var isToday = clearTime == todayTime;
                var isSelected = this.isSelectedDate(date);

                if (month != date.getMonth() && multiView) {
                    clearTime = -1;
                }

                var e = this._OnDrawDate(date);

                s += '<td yAlign="middle" id="';
                s += this.uid + "$" + clearTime;
                s += '" class="mini-calendar-date ';
                if (weekend) {
                    s += ' mini-calendar-weekend '
                }
                if (e.allowSelect == false) {
                    s += ' mini-calendar-disabled '
                }

                if (month != date.getMonth() && multiView) {
                } else {
                    if (isSelected) {
                        s += ' ' + this._selectedDateCls + ' ';
                    }
                    if (isToday) {
                        s += ' mini-calendar-today '
                    }
                }
                if (month != date.getMonth()) {
                    s += ' mini-calendar-othermonth ';
                }
                s += '">';

                if (month != date.getMonth() && multiView) {
                } else {

                    s += e.dateHtml;
                }
                s += '</td>';

                date = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1);
            }
            s += '<td class="mini-calendar-space"></td></tr>';
        }
        s += '<tr class="mini-calendar-bottom" colSpan="10"><td ></td></tr>';

        s += '</table>';
        return s;
    },
    _OnDrawDate: function (date) {
        var e = {
            date: date,
            dateCls: "",
            dateStyle: "",
            dateHtml: date.getDate(),
            allowSelect: true

        };
        this.fire("drawdate", e);
        return e;
    },
    _OnDateClick: function (date, action) {
        var e = { date: date, action: action };
        this.fire("dateclick", e);

        this._OnValueChanged();
    },

    menuEl: null,
    menuYear: null,
    menuSelectMonth: null,
    menuSelectYear: null,
    showMenu: function (el) {
        if (!el) return;
        this.hideMenu();

        this.menuYear = parseInt(this.viewDate.getFullYear() / 10) * 10;
        this._menuselectMonth = this.viewDate.getMonth();
        this._menuselectYear = this.viewDate.getFullYear();

        var s = '<div class="mini-calendar-menu"></div>';
        this.menuEl = mini.append(document.body, s);
        this.updateMenu(this.viewDate);

        var box = this.getBox();







        if (this.el.style.borderWidth == "0px") {
            this.menuEl.style.border = "0";
        }
        mini.setBox(this.menuEl, box);







        mini.on(this.menuEl, "click", this.__OnMenuClick, this);
        mini.on(document, "mousedown", this.__OnBodyMenuMouseDown, this);
    },
    hideMenu: function () {
        if (this.menuEl) {
            mini.un(this.menuEl, "click", this.__OnMenuClick, this);
            mini.un(document, "mousedown", this.__OnBodyMenuMouseDown, this);
            jQuery(this.menuEl).remove();
            this.menuEl = null;
        }
    },
    updateMenu: function () {
        var s = '<div class="mini-calendar-menu-months">';
        for (var i = 0, l = 12; i < l; i++) {
            var text = mini.getShortMonth(i);
            var cls = "";
            if (this._menuselectMonth == i) cls = "mini-calendar-menu-selected";
            s += '<a id="' + i + '" class="mini-calendar-menu-month ' + cls + '" href="javascript:void(0);" hideFocus onclick="return false">' + text + '</a>';
        }
        s += '<div style="clear:both;"></div></div>';


        s += '<div class="mini-calendar-menu-years">';
        for (var i = this.menuYear, l = this.menuYear + 10; i < l; i++) {
            var text = i;
            var cls = "";
            if (this._menuselectYear == i) cls = "mini-calendar-menu-selected";
            s += '<a id="' + i + '" class="mini-calendar-menu-year ' + cls + '" href="javascript:void(0);" hideFocus onclick="return false">' + text + '</a>';
        }
        s += '<div class="mini-calendar-menu-prevYear"></div><div class="mini-calendar-menu-nextYear"></div><div style="clear:both;"></div></div>';

        s += '<div class="mini-calendar-footer">'
            + '<span class="mini-calendar-okButton">' + this.okText + '</span>'
            + '<span class="mini-calendar-footerSpace"></span>'
            + '<span class="mini-calendar-cancelButton">' + this.cancelText + '</span>'
            + '</div><div style="clear:both;"></div>';

        this.menuEl.innerHTML = s;
    },
    __OnMenuClick: function (e) {

        var t = e.target;
        var monthEl = mini.findParent(t, "mini-calendar-menu-month");
        var yearEl = mini.findParent(t, "mini-calendar-menu-year");
        if (monthEl) {
            this._menuselectMonth = parseInt(monthEl.id);
            this.updateMenu();
        }
        else if (yearEl) {
            this._menuselectYear = parseInt(yearEl.id);
            this.updateMenu();
        }
        else if (mini.findParent(t, "mini-calendar-menu-prevYear")) {
            this.menuYear = this.menuYear - 1;
            this.menuYear = parseInt(this.menuYear / 10) * 10;
            this.updateMenu();
        }
        else if (mini.findParent(t, "mini-calendar-menu-nextYear")) {
            this.menuYear = this.menuYear + 11;
            this.menuYear = parseInt(this.menuYear / 10) * 10;
            this.updateMenu();
        }
        else if (mini.findParent(t, "mini-calendar-okButton")) {
            var date = new Date(this._menuselectYear, this._menuselectMonth, 1);
            this.setViewDate(date);
            this.hideMenu();
        }
        else if (mini.findParent(t, "mini-calendar-cancelButton")) {
            this.hideMenu();
        }
    },
    __OnBodyMenuMouseDown: function (e) {
        if (!mini.findParent(e.target, "mini-calendar-menu")) {
            this.hideMenu();
        }
    },

    __OnClick: function (e) {
        var viewDate = this.viewDate;
        if (this.enabled == false) return;
        var t = e.target;
        var titleEl = mini.findParent(e.target, "mini-calendar-title");

        if (mini.findParent(t, "mini-calendar-monthNext")) {
            viewDate.setMonth(viewDate.getMonth() + 1);
            this.setViewDate(viewDate);
        }
        else if (mini.findParent(t, "mini-calendar-yearNext")) {
            viewDate.setFullYear(viewDate.getFullYear() + 1);
            this.setViewDate(viewDate);
        }
        else if (mini.findParent(t, "mini-calendar-monthPrev")) {
            viewDate.setMonth(viewDate.getMonth() - 1);
            this.setViewDate(viewDate);
        }
        else if (mini.findParent(t, "mini-calendar-yearPrev")) {
            viewDate.setFullYear(viewDate.getFullYear() - 1);
            this.setViewDate(viewDate);
        }
        else if (mini.findParent(t, "mini-calendar-tadayButton")) {



            var d = new Date();
            this.setViewDate(d);
            this.setSelectedDate(d);
            if (this.currentTime) {
                var td = new Date();
                this.setTime(td);
            }
            this._OnDateClick(d, "today");
        }
        else if (mini.findParent(t, "mini-calendar-clearButton")) {
            this.setSelectedDate(null);
            this.setTime(null);
            this._OnDateClick(null, "clear");
        } else if (mini.findParent(t, "mini-calendar-okButton")) {
            this._OnDateClick(null, "ok");



        } else if (titleEl) {
            this.showMenu(titleEl);
        }

        var dateEl = mini.findParent(e.target, "mini-calendar-date");

        if (dateEl && !mini.hasClass(dateEl, "mini-calendar-disabled")) {
            var ids = dateEl.id.split("$");
            var time = parseInt(ids[ids.length - 1]);
            if (time == -1) return;
            var date = new Date(time);

            this._OnDateClick(date);
        }

    },
    __OnMouseDown: function (e) {
        if (this.enabled == false) return;
        var dateEl = mini.findParent(e.target, "mini-calendar-date");
        if (dateEl && !mini.hasClass(dateEl, "mini-calendar-disabled")) {
            var ids = dateEl.id.split("$");
            var time = parseInt(ids[ids.length - 1]);
            if (time == -1) return;
            var date = new Date(time);
            this.setSelectedDate(date);
        }
    },
    __OnTimeChanged: function (e) {
        this.fire("timechanged");
        this._OnValueChanged();
    },

    __OnKeyDown: function (e) {
        if (this.enabled == false) return;

        var date = this.getSelectedDate();
        if (!date) date = new Date(this.viewDate.getTime());
        switch (e.keyCode) {
            case 27:

                break;
            case 13:

                break;
            case 37:
                date = mini.addDate(date, -1, 'D');
                break;
            case 38:
                date = mini.addDate(date, -7, 'D');
                break;
            case 39:
                date = mini.addDate(date, 1, 'D');
                break;
            case 40:
                date = mini.addDate(date, 7, 'D');
                break;
            default:
                break;
        }
        var me = this;


        if (date.getMonth() != me.viewDate.getMonth()) {
            me.setViewDate(mini.cloneDate(date));
            me.focus();
        }

        var dateEl = this.getDateEl(date);
        if (dateEl && mini.hasClass(dateEl, "mini-calendar-disabled")) {
            return;
        }

        me.setSelectedDate(date);

        if (e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40) {
            e.preventDefault();
        }

    },

    _OnValueChanged: function () {
        this.fire("valuechanged");
    },

    getAttrs: function (el) {
        var attrs = mini.Calendar.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["viewDate", "rows", "columns",
                "ondateclick", "ondrawdate", "ondatechanged", "timeFormat", "ontimechanged", "onvaluechanged"
             ]
        );
        mini._ParseBool(el, attrs,
            ["multiSelect", "showHeader", "showFooter", "showWeekNumber", "showDaysHeader",
            "showMonthButtons", "showYearButtons", "showTodayButton", "showClearButton",
            "showTime", "showOkButton"
             ]
        );

        return attrs;
    }
});
mini.regClass(mini.Calendar, "calendar");





mini.ListBox = function () {
    mini.ListBox.superclass.constructor.call(this);
}
mini.extend(mini.ListBox, mini.ListControl, {
    formField: true,

    width: 200,
    columns: null,
    columnWidth: 80,

    showNullItem: false,
    nullItemText: "",

    showEmpty: false,
    emptyText: "",

    showCheckBox: false,
    showAllCheckBox: true,
    multiSelect: false,

    showColumns: true,

    _itemCls: "mini-listbox-item",
    _itemHoverCls: "mini-listbox-item-hover",
    _itemSelectedCls: "mini-listbox-item-selected",

    uiCls: "mini-listbox",
    _create: function () {
        var el = this.el = document.createElement("div");
        this.el.className = "mini-listbox";

        this.el.innerHTML = '<div class="mini-listbox-border"><div class="mini-listbox-header"></div><div class="mini-listbox-view"></div><input type="hidden"/></div><div class="mini-errorIcon"></div>';

        this._borderEl = this.el.firstChild;
        this._headerEl = this._borderEl.firstChild;
        this._viewEl = this._borderEl.childNodes[1];
        this._valueEl = this._borderEl.childNodes[2];

        this._errorIconEl = this.el.lastChild;

        this._scrollViewEl = this._viewEl;
    },

    _initEvents: function () {
        mini.ListBox.superclass._initEvents.call(this);
        mini._BindEvents(function () {
            mini_onOne(this._viewEl, "scroll", this.__OnScroll, this);


        }, this);

    },
    destroy: function (removeEl) {

        if (this._viewEl) {
            this._viewEl.onscroll = null;
            mini.clearEvent(this._viewEl);

            this._viewEl = null;
        }
        this._borderEl = null;
        this._headerEl = null;
        this._viewEl = null;
        this._valueEl = null;
        mini.ListBox.superclass.destroy.call(this, removeEl);
    },
    setColumns: function (value) {

        if (!mini.isArray(value)) value = [];
        this.columns = value;

        for (var i = 0, l = this.columns.length; i < l; i++) {
            var column = this.columns[i];

            if (column.type) {
                if (!mini.isNull(column.header) && typeof column.header !== "function") {
                    if (column.header.trim() == "") {
                        delete column.header;
                    }
                }
                var col = mini._getColumn(column.type);
                if (col) {
                    var _column = mini.copyTo({}, column);
                    mini.copyTo(column, col);
                    mini.copyTo(column, _column);
                }
            }

            var width = parseInt(column.width);
            if (mini.isNumber(width) && String(width) == column.width) column.width = width + "px";
            if (mini.isNull(column.width)) column.width = this.columnWidth + "px";
        }

        this.doUpdate();
    },
    getColumns: function () {
        return this.columns;
    },
    doUpdate: function () {
        if (this._allowUpdate === false) return;
        var hasColumns = this.columns && this.columns.length > 0;
        if (hasColumns) {
            mini.addClass(this.el, "mini-listbox-showColumns");
        } else {
            mini.removeClass(this.el, "mini-listbox-showColumns");
        }
        this._headerEl.style.display = hasColumns ? "" : "none";

        var sb = [];
        if (hasColumns && this.showColumns) {
            sb[sb.length] = '<table class="mini-listbox-headerInner" cellspacing="0" cellpadding="0"><tr>';
            var ckAllId = this.uid + "$ck$all";
            sb[sb.length] = '<td class="mini-listbox-checkbox"><input type="checkbox" id="' + ckAllId + '"></td>';
            for (var j = 0, k = this.columns.length; j < k; j++) {
                var column = this.columns[j];
                var header = column.header;
                if (mini.isNull(header)) header = '&nbsp;';

                var w = column.width;
                if (mini.isNumber(w)) w = w + "px";

                sb[sb.length] = '<td class="';
                if (column.headerCls) sb[sb.length] = column.headerCls;
                sb[sb.length] = '" style="';
                if (column.headerStyle) sb[sb.length] = column.headerStyle + ";";
                if (w) {
                    sb[sb.length] = 'width:' + w + ';';
                }
                if (column.headerAlign) {
                    sb[sb.length] = 'text-align:' + column.headerAlign + ';';
                }
                sb[sb.length] = '">';
                sb[sb.length] = header;
                sb[sb.length] = '</td>';
            }
            sb[sb.length] = '</tr></table>';
        }
        this._headerEl.innerHTML = sb.join('');

        var sb = [];
        var data = this.data;

        sb[sb.length] = '<table class="mini-listbox-items" cellspacing="0" cellpadding="0">';

        if (this.showEmpty && data.length == 0) {

            sb[sb.length] = '<tr><td colspan="20">' + this.emptyText + '</td></tr>';
        } else {
            this._doNullItem();

            for (var i = 0, l = data.length; i < l; i++) {
                var item = data[i];

                var rowClsIndex = -1;
                var rowCls = " ";
                var rowStyleIndex = -1;
                var rowStyle = " ";

                sb[sb.length] = '<tr id="';
                sb[sb.length] = this._createItemId(i);
                sb[sb.length] = '" index="';
                sb[sb.length] = i;
                sb[sb.length] = '" class="mini-listbox-item ';

                if (item.enabled === false) {
                    sb[sb.length] = ' mini-disabled ';
                }

                rowClsIndex = sb.length;
                sb[sb.length] = rowCls;
                sb[sb.length] = '" style="';
                rowStyleIndex = sb.length;
                sb[sb.length] = rowStyle;
                sb[sb.length] = '">';

                var ckid = this._createCheckId(i);
                var ckName = this.name;
                var ckValue = this.getItemValue(item);

                var disable = '';
                if (item.enabled === false) {
                    disable = 'disabled';
                }
                sb[sb.length] = '<td class="mini-listbox-checkbox"><input ' + disable + ' id="' + ckid + '" type="checkbox" ></td>';

                if (hasColumns) {
                    for (var j = 0, k = this.columns.length; j < k; j++) {
                        var column = this.columns[j];

                        var e = this._OnDrawCell(item, i, column);

                        var w = column.width;
                        if (typeof w == "number") w = w + "px";

                        sb[sb.length] = '<td class="';
                        if (e.cellCls) sb[sb.length] = e.cellCls;
                        sb[sb.length] = '" style="';
                        if (e.cellStyle) sb[sb.length] = e.cellStyle + ";";
                        if (w) {
                            sb[sb.length] = 'width:' + w + ';';
                        }
                        if (column.align) {
                            sb[sb.length] = 'text-align:' + column.align + ';';
                        }
                        sb[sb.length] = '">';
                        sb[sb.length] = e.cellHtml;
                        sb[sb.length] = '</td>';

                        if (e.rowCls) rowCls = e.rowCls;
                        if (e.rowStyle) rowStyle = e.rowStyle;
                    }
                } else {
                    var e = this._OnDrawCell(item, i, null);
                    sb[sb.length] = '<td class="';
                    if (e.cellCls) sb[sb.length] = e.cellCls;
                    sb[sb.length] = '" style="';
                    if (e.cellStyle) sb[sb.length] = e.cellStyle;
                    sb[sb.length] = '">';
                    sb[sb.length] = e.cellHtml;
                    sb[sb.length] = '</td>';

                    if (e.rowCls) rowCls = e.rowCls;
                    if (e.rowStyle) rowStyle = e.rowStyle;
                }

                sb[rowClsIndex] = rowCls;
                sb[rowStyleIndex] = rowStyle;

                sb[sb.length] = '</tr>';
            }
        }
        sb[sb.length] = '</table>';


        var innerHTML = sb.join("");

        this._viewEl.innerHTML = innerHTML;

        this._doSelects();

        this.doLayout();
    },
    doLayout: function () {
        if (!this.canLayout()) return;

        if (this.columns && this.columns.length > 0) {
            mini.addClass(this.el, "mini-listbox-showcolumns");
        } else {
            mini.removeClass(this.el, "mini-listbox-showcolumns");
        }
        if (this.showCheckBox) {
            mini.removeClass(this.el, "mini-listbox-hideCheckBox");
        } else {
            mini.addClass(this.el, "mini-listbox-hideCheckBox");
        }

        var ckAllId = this.uid + "$ck$all";
        var ck = document.getElementById(ckAllId);
        if (ck) ck.style.display = this.showAllCheckBox ? "" : "none";


        var autoHeight = this.isAutoHeight();

        h = this.getHeight(true);
        w = this.getWidth(true);
        var elWidth = w;

        var viewEl = this._viewEl;


        viewEl.style.width = w + "px";

        if (!autoHeight) {







            var h2 = mini.getHeight(this._headerEl);
            h = h - h2;
            viewEl.style.height = h + "px";
        } else {
            viewEl.style.height = "auto";
        }

        if (isIE) {
            var table1 = this._headerEl.firstChild, table2 = this._viewEl.firstChild;
            if (this._viewEl.offsetHeight >= this._viewEl.scrollHeight) {
                table2.style.width = "100%";
                if (table1) table1.style.width = "100%";
            } else {
                var w = parseInt(table2.parentNode.offsetWidth - 17) + 'px'
                table2.style.width = w;
                if (table1) table1.style.width = w;
            }
        }
        if (this._viewEl.offsetHeight < this._viewEl.scrollHeight) {
            this._headerEl.style.width = (elWidth - 17) + "px";
        } else {
            this._headerEl.style.width = "100%";
        }





    },
    setShowCheckBox: function (value) {
        this.showCheckBox = value;
        this.doLayout();
    },
    getShowCheckBox: function () {
        return this.showCheckBox;
    },
    setShowAllCheckBox: function (value) {
        this.showAllCheckBox = value;
        this.doLayout();
    },
    getShowAllCheckBox: function () {
        return this.showAllCheckBox;
    },
    setShowColumns: function (value) {

        this.showColumns = value;

        this.doUpdate();

    },
    getShowColumns: function () {
        return this.showColumns;
    },
    setShowNullItem: function (value) {
        if (this.showNullItem != value) {
            this.showNullItem = value;

            this._doNullItem();

            this.doUpdate();
        }
    },
    getShowNullItem: function () {
        return this.showNullItem;
    },

    setNullItemText: function (value) {

        if (this.nullItemText != value) {
            this.nullItemText = value;

            this._doNullItem();

            this.doUpdate();
        }
    },
    getNullItemText: function () {
        return this.nullItemText;
    },

    _doNullItem: function () {
        for (var i = 0, l = this.data.length; i < l; i++) {
            var item = this.data[i];
            if (item.__NullItem) {
                this.data.removeAt(i);
                break;
            }
        }
        if (this.showNullItem) {
            var item = { __NullItem: true };
            item[this.textField] = "";
            item[this.valueField] = "";
            this.data.insert(0, item);
        }
    },















    _OnDrawCell: function (record, index, column) {
        var value = column ? record[column.field] : this.getItemText(record);
        var e = {
            sender: this,
            index: index,
            rowIndex: index,
            record: record,
            item: record,
            column: column,
            field: column ? column.field : null,
            value: value,
            cellHtml: value,
            rowCls: null,
            cellCls: column ? (column.cellCls || '') : "",
            rowStyle: null,
            cellStyle: column ? (column.cellStyle || '') : ""
        };

        var hasColumns = this.columns && this.columns.length > 0;
        if (!hasColumns) {
            if (index == 0 && this.showNullItem) {
                e.cellHtml = this.nullItemText;
            }
        }


        if (e.autoEscape == true) {
            e.cellHtml = mini.htmlEncode(e.cellHtml);
        }

        if (column) {
            if (column.dateFormat) {
                if (mini.isDate(e.value)) e.cellHtml = mini.formatDate(value, column.dateFormat);
                else e.cellHtml = value;
            }
            var renderer = column.renderer;
            if (renderer) {
                fn = typeof renderer == "function" ? renderer : window[renderer];
                if (fn) {
                    e.cellHtml = fn.call(column, e);
                }
            }
        }

        this.fire("drawcell", e);

        if (e.cellHtml === null || e.cellHtml === undefined || e.cellHtml === "") e.cellHtml = "&nbsp;";

        return e;
    },
    __OnScroll: function (e) {
        this._headerEl.scrollLeft = this._viewEl.scrollLeft;
    },
    __OnClick: function (e) {

        var ckAllId = this.uid + "$ck$all";
        if (e.target.id == ckAllId) {
            var ck = document.getElementById(ckAllId);
            if (ck) {
                var checked = ck.checked;

                var value = this.getValue(); ;

                if (checked) {
                    this.selectAll();
                } else {
                    this.deselectAll();
                }
                this._OnSelectionChanged();

                if (value != this.getValue()) {
                    this._OnValueChanged();

                    this.fire("itemclick", { htmlEvent: e });
                }
            }
            return;
        }
        this._fireEvent(e, 'Click');
    },

    getAttrs: function (el) {
        var attrs = mini.ListBox.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["nullItemText", "ondrawcell"
             ]
        );
        mini._ParseBool(el, attrs,
            ["showCheckBox", "showAllCheckBox", "showNullItem", "showColumns"
             ]
        );

        if (el.nodeName.toLowerCase() != "select") {
            var cs = mini.getChildNodes(el);
            for (var i = 0, l = cs.length; i < l; i++) {
                var node = cs[i];
                var property = jQuery(node).attr("property");
                if (!property) continue;
                property = property.toLowerCase();
                if (property == "columns") {
                    attrs.columns = mini._ParseColumns(node);
                } else if (property == "data") {
                    attrs.data = node.innerHTML;
                }
            }
        }

        return attrs;
    }
});
mini.regClass(mini.ListBox, "listbox");


mini.CheckBoxList = function () {
    mini.CheckBoxList.superclass.constructor.call(this);
}
mini.extend(mini.CheckBoxList, mini.ListControl, {
    formField: true,

    multiSelect: true,
    repeatItems: 0,
    repeatLayout: "none",
    repeatDirection: "horizontal",

    _itemCls: "mini-checkboxlist-item",
    _itemHoverCls: "mini-checkboxlist-item-hover",
    _itemSelectedCls: "mini-checkboxlist-item-selected",

    _tableCls: "mini-checkboxlist-table",
    _tdCls: "mini-checkboxlist-td",
    _checkType: "checkbox",

    uiCls: "mini-checkboxlist",
    _create: function () {
        var el = this.el = document.createElement("div");
        this.el.className = this.uiCls;

        this.el.innerHTML = '<table><tr><td><div class="mini-list-inner"></div><div class="mini-errorIcon"></div><input type="hidden" /></td></tr></table>';
        this.cellEl = this.el.firstChild.rows[0].cells[0];
        this._innerEl = this.cellEl.firstChild;
        this._valueEl = this.cellEl.lastChild;
        this._errorIconEl = this.cellEl.childNodes[1];
    },




    _getRepeatTable: function () {
        var table = [];
        if (this.repeatItems > 0) {
            if (this.repeatDirection == "horizontal") {
                var row = [];
                for (var i = 0, l = this.data.length; i < l; i++) {
                    var item = this.data[i];
                    if (row.length == this.repeatItems) {
                        table.push(row);
                        row = [];
                    }
                    row.push(item);
                }
                table.push(row);
            } else {
                var len = this.repeatItems > this.data.length ? this.data.length : this.repeatItems;
                for (var i = 0, l = len; i < l; i++) {
                    table.push([]);
                }
                for (var i = 0, l = this.data.length; i < l; i++) {
                    var item = this.data[i];
                    var index = i % this.repeatItems;
                    table[index].push(item);
                }
            }
        } else {
            table = [this.data.clone()];
        }
        return table;
    },
    doUpdate: function () {
        var data = this.data;
        var s = "";

        for (var i = 0, l = data.length; i < l; i++) {
            var item = data[i];
            item._i = i;
        }

        if (this.repeatLayout == "flow") {

            var table = this._getRepeatTable();
            for (var i = 0, l = table.length; i < l; i++) {
                var row = table[i];
                for (var j = 0, k = row.length; j < k; j++) {
                    var item = row[j];
                    s += this._createItemHtml(item, item._i);
                }
                if (i != l - 1) {
                    s += '<br/>';
                }
            }


        } else if (this.repeatLayout == "table") {
            var table = this._getRepeatTable();
            s += '<table class="' + this._tableCls + '" cellpadding="0" cellspacing="1">';
            for (var i = 0, l = table.length; i < l; i++) {
                var row = table[i];
                s += '<tr>';
                for (var j = 0, k = row.length; j < k; j++) {
                    var item = row[j];
                    s += '<td class="' + this._tdCls + '">';
                    s += this._createItemHtml(item, item._i);
                    s += '</td>';
                }
                s += '</tr>';
            }
            s += '</table>';
        } else {
            for (var i = 0, l = data.length; i < l; i++) {
                var item = data[i];
                s += this._createItemHtml(item, i);
            }
        }
        this._innerEl.innerHTML = s;

        for (var i = 0, l = data.length; i < l; i++) {
            var item = data[i];
            delete item._i;
        }
    },
    _createItemHtml: function (item, index) {
        var e = this._OnDrawItem(item, index);
        var id = this._createItemId(index);
        var ckId = this._createCheckId(index);
        var ckValue = this.getItemValue(item);

        var disable = '';

        var s = '<div id="' + id + '" index="' + index + '" class="' + this._itemCls + ' ';
        if (item.enabled === false) {
            s += ' mini-disabled ';
            disable = 'disabled';
        }

        var onclick = 'onclick="return false"';
        if (isChrome) {
            onclick = 'onmousedown="this._checked = this.checked;" onclick="this.checked = this._checked"';
        }
        s += e.itemCls + '" style="' + e.itemStyle + '"><input ' + onclick + ' ' + disable + ' value="' + ckValue + '" id="' + ckId + '" type="' + this._checkType + '" /><label for="' + ckId + '" onclick="return false;">';
        s += e.itemHtml + '</label></div>';
        return s;
    },
    _OnDrawItem: function (item, index) {
        var value = this.getItemText(item);
        var e = {
            index: index,
            item: item,
            itemHtml: value,
            itemCls: "",
            itemStyle: ""
        };
        this.fire("drawitem", e);

        if (e.itemHtml === null || e.itemHtml === undefined) e.itemHtml = "";

        return e;
    },

    setRepeatItems: function (value) {
        value = parseInt(value);
        if (isNaN(value)) value = 0;
        if (this.repeatItems != value) {
            this.repeatItems = value;
            this.doUpdate();
        }
    },
    getRepeatItems: function () {
        return this.repeatItems;
    },
    setRepeatLayout: function (value) {
        if (value != "flow" && value != "table") value = "none";
        if (this.repeatLayout != value) {
            this.repeatLayout = value;
            this.doUpdate();
        }
    },
    getRepeatLayout: function () {
        return this.repeatLayout;
    },
    setRepeatDirection: function (value) {
        if (value != "vertical") value = "horizontal";
        if (this.repeatDirection != value) {
            this.repeatDirection = value;
            this.doUpdate();
        }
    },
    getRepeatDirection: function () {
        return this.repeatDirection;
    },

    getAttrs: function (el) {
        var attrs = mini.CheckBoxList.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        mini._ParseString(el, attrs,
            [
                "ondrawitem"
             ]
        );

        var repeatItems = parseInt(jq.attr("repeatItems"));
        if (!isNaN(repeatItems)) {
            attrs.repeatItems = repeatItems;
        }
        var repeatLayout = jq.attr("repeatLayout");
        if (repeatLayout) {
            attrs.repeatLayout = repeatLayout;
        }
        var repeatDirection = jq.attr("repeatDirection");
        if (repeatDirection) {
            attrs.repeatDirection = repeatDirection;
        }
        return attrs;
    }
});
mini.regClass(mini.CheckBoxList, "checkboxlist");


mini.RadioButtonList = function () {
    mini.RadioButtonList.superclass.constructor.call(this);
}
mini.extend(mini.RadioButtonList, mini.CheckBoxList, {
    multiSelect: false,

    _itemCls: "mini-radiobuttonlist-item",
    _itemHoverCls: "mini-radiobuttonlist-item-hover",
    _itemSelectedCls: "mini-radiobuttonlist-item-selected",

    _tableCls: "mini-radiobuttonlist-table",
    _tdCls: "mini-radiobuttonlist-td",
    _checkType: "radio",

    uiCls: "mini-radiobuttonlist"
});
mini.regClass(mini.RadioButtonList, "radiobuttonlist");


mini.TreeSelect = function () {
    this.data = [];
    mini.TreeSelect.superclass.constructor.call(this);
}
mini.extend(mini.TreeSelect, mini.PopupEdit, {
    valueFromSelect: false,

    text: '',
    value: '',

    autoCheckParent: false,
    expandOnLoad: false,

    valueField: "id",
    textField: "text",
    nodesField: "children",
    delimiter: ',',

    multiSelect: false,
    data: [],
    url: "",

    allowInput: false,

    showTreeIcon: false,
    showTreeLines: true,

    resultAsTree: false,
    parentField: "pid",
    checkRecursive: false,

    showFolderCheckBox: false,

    popupHeight: 200,
    popupWidth: "100%",
    popupMaxHeight: 250,
    popupMinWidth: 100,

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var value = kv.value;
        delete kv.value;
        var text = kv.text;
        delete kv.text;
        var url = kv.url;
        delete kv.url;
        var data = kv.data;
        delete kv.data;

        mini.TreeSelect.superclass.set.call(this, kv);

        if (!mini.isNull(data)) {
            this.setData(data);
        }
        if (!mini.isNull(url)) {
            this.setUrl(url);
        }
        if (!mini.isNull(value)) {
            this.setValue(value);
        }
        if (!mini.isNull(text)) {
            this.setText(text);
        }
        return this;
    },

    uiCls: "mini-treeselect",
    _createPopup: function () {
        mini.TreeSelect.superclass._createPopup.call(this);

        this.tree = new mini.Tree();
        this.tree.setShowTreeIcon(true);
        this.tree.setStyle("border:0;width:100%;height:100%;");
        this.tree.setResultAsTree(this.resultAsTree);
        this.tree.render(this.popup._contentEl);
        this.tree.setCheckRecursive(this.checkRecursive);
        this.tree.setShowFolderCheckBox(this.showFolderCheckBox);

        this.tree.on("nodeclick", this.__OnNodeClick, this);
        this.tree.on("nodecheck", this.__OnCheckedChanged, this);
        this.tree.on("expand", this.__OnTreeExpand, this);
        this.tree.on("collapse", this.__OnTreeCollapse, this);
        this.tree.on("beforenodecheck", this.__OnTreeBeforeNodeCheck, this);
        this.tree.on("beforenodeselect", this.__OnTreeBeforeNodeSelect, this);
        this.tree.on("drawnode", this.__OnDrawNode, this);
        this.tree.allowAnim = false;

        var me = this;
        this.tree.on("beforeload", function (e) {
            me.fire("beforeload", e);
        }, this);
        this.tree.on("load", function (e) {
            me.fire("load", e);
        }, this);
        this.tree.on("loaderror", function (e) {
            me.fire("loaderror", e);
        }, this);
    },
    __OnDrawNode: function (e) {
        this.fire("drawnode", e);
    },
    __OnTreeBeforeNodeCheck: function (e) {
        e.tree = e.sender;
        this.fire("beforenodecheck", e);
    },
    __OnTreeBeforeNodeSelect: function (e) {
        e.tree = e.sender;
        this.fire("beforenodeselect", e);
    },
    __OnTreeExpand: function (e) {

    },
    __OnTreeCollapse: function (e) {

    },
    getSelectedNode: function () {
        return this.tree.getSelectedNode();
    },
    getCheckedNodes: function (hasParent) {
        return this.tree.getCheckedNodes(hasParent)
    },
    getSelectedNodes: function () {
        return this.tree.getSelectedNodes()
    },
    getParentNode: function (node) {
        return this.tree.getParentNode(node);
    },
    getChildNodes: function (node) {
        return this.tree.getChildNodes(node);
    },












    showPopup: function () {
        var ex = { cancel: false };
        this.fire("beforeshowpopup", ex);
        if (ex.cancel == true) return;









        mini.TreeSelect.superclass.showPopup.call(this);

        this.tree.setValue(this.value);
    },




    __OnPopupHide: function (e) {
        this.__doFocusCls();
        this.tree.clearFilter();
        this.fire("hidepopup");
    },
    getItem: function (item) {
        return typeof item == "object" ? item : this.data[item];
    },
    indexOf: function (item) {
        return this.data.indexOf(item);
    },
    getAt: function (index) {
        return this.data[index];
    },
    loadList: function (list, idField, parentField) {
        this.tree.loadList(list, idField, parentField);
        this.data = this.tree.getData();
    },
    getList: function () {
        return this.tree.getList();
    },
    load: function (data) {
        this.tree.load(data);
    },
    _eval: function (_) {
        return eval('(' + _ + ')');
    },
    setData: function (data) {
        if (typeof data == "string") {
            data = this._eval(data);
        }
        if (!mini.isArray(data)) data = [];
        this.tree.setData(data);
        this.data = this.tree.data;
    },
    getData: function () {
        return this.data;
    },
    setUrl: function (url) {
        this.getPopup();






        this.tree.setUrl(url);
        this.url = this.tree.url;
    },
    getUrl: function () {
        return this.url;
    },
    setTextField: function (value) {
        if (this.tree) this.tree.setTextField(value);
        this.textField = value;
    },
    getTextField: function () {
        return this.textField;
    },
    setNodesField: function (value) {
        if (this.tree) this.tree.setNodesField(value);
        this.nodesField = value;
    },
    getNodesField: function () {
        return this.nodesField;
    },

    setValue: function (value) {



        var vts = this.tree.getValueAndText(value);
        if (vts[1] == "" && !this.valueFromSelect) {
            vts[0] = value;
            vts[1] = value;
        }
        this.value = value;

        this._valueEl.value = value;

        this.text = this._textEl.value = vts[1];


        this._doEmpty();



        this.tree.value = this.value;



    },
    setMultiSelect: function (value) {
        if (this.multiSelect != value) {
            this.multiSelect = value;
            this.tree.setShowCheckBox(value);
            this.tree.setAllowSelect(!value);
            this.tree.setEnableHotTrack(!value);
        }
    },
    getMultiSelect: function () {
        return this.multiSelect;
    },
    __OnNodeClick: function (e) {

        if (this.multiSelect) return;


        var node = this.tree.getSelectedNode();
        var v = this.tree.getItemValue(node);


        var value = this.getValue();
        this.setValue(v);
        if (value != this.getValue()) {
            this._OnValueChanged();
        }

        this.hidePopup();
        this.focus();

        this.fire("nodeclick", { node: e.node });
    },
    __OnCheckedChanged: function (e) {

        if (!this.multiSelect) return;
        var v = this.tree.getValue();

        var value = this.getValue();
        this.setValue(v);
        if (value != this.getValue()) {
            this._OnValueChanged();
        }
        this.focus();

    },


    __OnInputKeyDown: function (e) {
        var ex = { htmlEvent: e };
        this.fire("keydown", ex);
        if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
            return false;
        }

        if (e.keyCode == 9) {
            this.hidePopup();
            return;
        }

        if (this.isReadOnly()) return;

        switch (e.keyCode) {
            case 27:
                if (this.isShowPopup()) {
                    e.stopPropagation();
                }

                this.hidePopup();
                break;
            case 13:
                var me = this;
                setTimeout(function () {
                    me.fire("enter", ex);
                }, 10);
                break;
            case 37:
                break;
            case 38:
                e.preventDefault();
                break;
            case 39:
                break;
            case 40:
                e.preventDefault();
                this.showPopup();
                break;
            default:
                var me = this;
                setTimeout(function () {
                    me._doQuery();
                }, 10);
                break;
        }
    },
    _doQuery: function () {

        var field = this.textField;
        var value = this._textEl.value.toLowerCase();
        this.tree.filter(function (node) {
            var text = String(node[field] ? node[field] : "").toLowerCase();
            if (text.indexOf(value) != -1) {
                return true;
            } else return false;
        });
        this.tree.expandAll();
        this.showPopup();
    },


    setCheckRecursive: function (value) {
        this.checkRecursive = value;
        if (this.tree) this.tree.setCheckRecursive(value);
    },
    getCheckRecursive: function () {
        return this.checkRecursive;
    },
    setResultAsTree: function (value) {
        this.resultAsTree = value;
        if (this.tree) this.tree.setResultAsTree(value);
    },
    getResultAsTree: function () {
        return this.resultAsTree;
    },
    setParentField: function (value) {
        this.parentField = value;
        if (this.tree) this.tree.setParentField(value);
    },
    getParentField: function () {
        return this.parentField;
    },
    setValueField: function (valueField) {
        if (this.tree) this.tree.setIdField(valueField);
        this.valueField = valueField;
    },
    getValueField: function () {
        return this.valueField;
    },
    setShowTreeIcon: function (value) {
        this.showTreeIcon = value;
        if (this.tree) this.tree.setShowTreeIcon(value);
    },
    getShowTreeIcon: function () {
        return this.showTreeIcon;
    },
    setShowTreeLines: function (value) {
        this.showTreeLines = value;
        if (this.tree) this.tree.setShowTreeLines(value);
    },
    getShowTreeLines: function () {
        return this.showTreeLines;
    },
    setShowFolderCheckBox: function (value) {

        this.showFolderCheckBox = value;
        if (this.tree) this.tree.setShowFolderCheckBox(value);
    },
    getShowFolderCheckBox: function () {
        return this.showFolderCheckBox;
    },
    setAutoCheckParent: function (value) {

        this.autoCheckParent = value;
        if (this.tree) this.tree.setAutoCheckParent(value);
    },
    getAutoCheckParent: function () {
        return this.autoCheckParent;
    },
    setExpandOnLoad: function (value) {

        this.expandOnLoad = value;
        if (this.tree) this.tree.setExpandOnLoad(value);
    },
    getExpandOnLoad: function () {
        return this.expandOnLoad;
    },
    setValueFromSelect: function (value) {
        this.valueFromSelect = value;
    },
    getValueFromSelect: function () {
        return this.valueFromSelect;
    },
    setDataField: function (value) {
        if (this.tree) this.tree.setDataField(value);
        this.dataField = value;
    },
    getAttrs: function (el) {
        var attrs = mini.ComboBox.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["url", "data", "textField", "valueField", "nodesField", "parentField", "onbeforenodecheck", "onbeforenodeselect",
            "expandOnLoad", "onnodeclick", "onbeforeload", "onload", "onloaderror", "ondrawnode"
             ]
        );
        mini._ParseBool(el, attrs,
            ["multiSelect", "resultAsTree", "checkRecursive", "showTreeIcon", "showTreeLines", "showFolderCheckBox",
            "autoCheckParent", "valueFromSelect"
             ]
        );

        if (attrs.expandOnLoad) {
            var level = parseInt(attrs.expandOnLoad);
            if (mini.isNumber(level)) {
                attrs.expandOnLoad = level;
            } else {
                attrs.expandOnLoad = attrs.expandOnLoad == "true" ? true : false;
            }
        }

        return attrs;
    }
});
mini.regClass(mini.TreeSelect, 'TreeSelect');


mini.Spinner = function () {
    mini.Spinner.superclass.constructor.call(this);
    this.setValue(this.minValue);
}
mini.extend(mini.Spinner, mini.ButtonEdit, {
    value: 0,
    minValue: 0,
    maxValue: 100,
    increment: 1,
    decimalPlaces: 0,
    changeOnMousewheel: true,
    allowLimitValue: true,
    defaultValue: 0,

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var value = kv.value;
        delete kv.value;

        mini.Spinner.superclass.set.call(this, kv);

        if (!mini.isNull(value)) {
            this.setValue(value);
        }

        return this;
    },

    uiCls: "mini-spinner",
    _getButtonHtml: function () {
        var hover = 'onmouseover="mini.addClass(this, \'' + this._buttonHoverCls + '\');" '
                        + 'onmouseout="mini.removeClass(this, \'' + this._buttonHoverCls + '\');"';
        return '<span class="mini-buttonedit-button" ' + hover + '><span class="mini-buttonedit-up"><span></span></span><span class="mini-buttonedit-down"><span></span></span></span>';
    },

    _initEvents: function () {
        mini.Spinner.superclass._initEvents.call(this);

        mini._BindEvents(function () {




            this.on("buttonmousedown", this.__OnButtonMouseDown, this);
            mini.on(this.el, "mousewheel", this.__OnMousewheel, this);
        }, this);

    },

    _ValueLimit: function () {
        if (this.allowLimitValue == false) return;
        if (this.minValue > this.maxValue) {
            this.maxValue = this.minValue + 100;
        }
        if (this.value < this.minValue) {
            this.setValue(this.minValue);
        }
        if (this.value > this.maxValue) {
            this.setValue(this.maxValue);
        }
    },
    getFormValue: function () {
        var v = this.value;
        v = parseFloat(v);
        if (isNaN(v)) v = 0;
        var s = String(v).split(".");
        var s1 = s[0], s2 = s[1];
        if (!s2) s2 = "";
        if (this.decimalPlaces > 0) {
            for (var i = s2.length, l = this.decimalPlaces; i < l; i++) {
                s2 += "0";
            }
            s2 = "." + s2;
        }
        return s1 + s2;
    },
    setValue: function (value) {

        value = parseFloat(value);
        if (isNaN(value)) value = this.defaultValue;
        value = parseFloat(value);

        value = parseFloat(value.toFixed(this.decimalPlaces));
        if (isNaN(value)) value = 0;
        if (this.value != value) {
            this.value = value;
            this._ValueLimit();
            this._valueEl.value = this.value;
            this.text = this._textEl.value = this.getFormValue();
        } else {
            this.text = this._textEl.value = this.getFormValue();
        }
    },
    setMaxValue: function (value) {
        value = parseFloat(value);
        if (isNaN(value)) return;
        value = parseFloat(value.toFixed(this.decimalPlaces));
        if (this.maxValue != value) {
            this.maxValue = value;
            this._ValueLimit();
        }
    },
    getMaxValue: function (value) {
        return this.maxValue;
    },
    setMinValue: function (value) {
        value = parseFloat(value);
        if (isNaN(value)) return;
        value = parseFloat(value.toFixed(this.decimalPlaces));
        if (this.minValue != value) {
            this.minValue = value;
            this._ValueLimit();
        }
    },
    getMinValue: function (value) {
        return this.minValue;
    },
    setIncrement: function (value) {
        value = parseFloat(value);
        if (isNaN(value)) return;
        if (this.increment != value) {
            this.increment = value;
        }
    },
    getIncrement: function (value) {
        return this.increment;
    },
    setDecimalPlaces: function (value) {
        value = parseInt(value);
        if (isNaN(value) || value < 0) return;
        this.decimalPlaces = value;
    },
    getDecimalPlaces: function (value) {
        return this.decimalPlaces;
    },
    setChangeOnMousewheel: function (value) {
        this.changeOnMousewheel = value;
    },
    getChangeOnMousewheel: function (value) {
        return this.changeOnMousewheel;
    },
    setAllowLimitValue: function (value) {
        this.allowLimitValue = value;
    },
    getAllowLimitValue: function (value) {
        return this.allowLimitValue;
    },


    _SpinTimer: null,
    _StartSpin: function (Increment, time, count) {
        this._StopSpin();

        this.setValue(this.value + Increment);



        var sf = this;
        var sourceCount = count;
        var now = new Date();
        this._SpinTimer = setInterval(function () {

            sf.setValue(sf.value + Increment);
            sf._OnValueChanged();

            count--;
            if (count == 0 && time > 50) {
                sf._StartSpin(Increment, time - 100, sourceCount + 3);

            }


            var now2 = new Date();
            if (now2 - now > 500) sf._StopSpin();
            now = now2;
        }, time);
        mini.on(document, "mouseup", this._OnDocumentMouseUp, this);

    },
    _StopSpin: function () {
        clearInterval(this._SpinTimer);
        this._SpinTimer = null;
    },
    __OnButtonMouseDown: function (e) {
        this._DownValue = this.getValue();

        this.__OnInputTextChanged();

        if (e.spinType == "up") {

            this._StartSpin(this.increment, 230, 2);
        } else {
            this._StartSpin(-this.increment, 230, 2);
        }
    },
    __OnInputKeyDown: function (e) {
        mini.Spinner.superclass.__OnInputKeyDown.call(this, e);

        var KEY = mini.Keyboard;

        switch (e.keyCode) {
            case KEY.Top:
                this.setValue(this.value + this.increment);
                this._OnValueChanged();
                break;
            case KEY.Bottom:
                this.setValue(this.value - this.increment);
                this._OnValueChanged();
                break;
        }
    },

    __OnMousewheel: function (e) {
        if (this.isReadOnly()) return;
        if (this.changeOnMousewheel == false) return;

        var wheelDelta = e.wheelDelta || e.originalEvent.wheelDelta;
        if (mini.isNull(wheelDelta)) wheelDelta = -e.detail * 24;
        var increment = this.increment;
        if (wheelDelta < 0) increment = -increment;
        this.setValue(this.value + increment);
        this._OnValueChanged();



        return false;
    },
    _OnDocumentMouseUp: function (e) {
        this._StopSpin();
        mini.un(document, "mouseup", this._OnDocumentMouseUp, this);

        if (this._DownValue != this.getValue()) {
            this._OnValueChanged();
        }
    },
    __OnInputTextChanged: function (e) {
        var _value = this.getValue();

        var value = parseFloat(this._textEl.value);
        this.setValue(value);










        if (_value != this.getValue()) {
            this._OnValueChanged();
        }
    },

    getAttrs: function (el) {
        var attrs = mini.Spinner.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["minValue", "maxValue", "increment", "decimalPlaces", "changeOnMousewheel"
             ]
        );
        mini._ParseBool(el, attrs,
            ["allowLimitValue"
             ]
        );

        return attrs;
    }

});
mini.regClass(mini.Spinner, 'spinner');


mini.TimeSpinner = function () {
    mini.TimeSpinner.superclass.constructor.call(this);

    this.setValue("00:00:00");
}
mini.extend(mini.TimeSpinner, mini.ButtonEdit, {

    value: null,
    format: 'H:mm:ss',

    uiCls: "mini-timespinner",
    _getButtonHtml: function () {
        var hover = 'onmouseover="mini.addClass(this, \'' + this._buttonHoverCls + '\');" '
                        + 'onmouseout="mini.removeClass(this, \'' + this._buttonHoverCls + '\');"';
        return '<span class="mini-buttonedit-button" ' + hover + '><span class="mini-buttonedit-up"><span></span></span><span class="mini-buttonedit-down"><span></span></span></span>';
    },
    _initEvents: function () {
        mini.TimeSpinner.superclass._initEvents.call(this);

        mini._BindEvents(function () {
            this.on("buttonmousedown", this.__OnButtonMouseDown, this);
            mini.on(this.el, "mousewheel", this.__OnMousewheel, this);
            mini.on(this._textEl, "keydown", this.__OnKeyDown, this);
        }, this);

    },
    setFormat: function (value) {
        if (typeof value != "string") return;
        var formats = ['H:mm:ss', 'HH:mm:ss', 'H:mm', 'HH:mm', 'H', 'HH', 'mm:ss'];


        if (this.format != value) {
            this.format = value;
            this.text = this._textEl.value = this.getFormattedValue();
        }
    },
    getFormat: function () {
        return this.format;
    },
    setValue: function (value) {
        value = mini.parseTime(value, this.format);
        if (!value) value = mini.parseTime("00:00:00", this.format);

        if (mini.isDate(value)) value = new Date(value.getTime());

        if (mini.formatDate(this.value, "H:mm:ss") != mini.formatDate(value, "H:mm:ss")) {
            this.value = value;
            this.text = this._textEl.value = this.getFormattedValue();
            this._valueEl.value = this.getFormValue();
        }
    },
    getValue: function () {
        return this.value == null ? null : new Date(this.value.getTime());
    },
    getFormValue: function () {
        if (!this.value) return "";
        return mini.formatDate(this.value, "H:mm:ss");
    },
    getFormattedValue: function () {
        if (!this.value) return "";
        return mini.formatDate(this.value, this.format);
    },
    _ChangeValue: function (Increment, timeType) {
        var value = this.getValue();
        if (value) {
            switch (timeType) {
                case "hours":
                    var hours = value.getHours() + Increment;
                    if (hours > 23) hours = 23;
                    if (hours < 0) hours = 0;
                    value.setHours(hours);
                    break;
                case "minutes":
                    var minutes = value.getMinutes() + Increment;
                    if (minutes > 59) minutes = 59;
                    if (minutes < 0) minutes = 0;
                    value.setMinutes(minutes);
                    break;
                case "seconds":
                    var seconds = value.getSeconds() + Increment;
                    if (seconds > 59) seconds = 59;
                    if (seconds < 0) seconds = 0;
                    value.setSeconds(seconds);
                    break;
            }
        } else {
            value = "00:00:00";
        }

        this.setValue(value);

    },

    _SpinTimer: null,
    _StartSpin: function (Increment, time, count) {
        this._StopSpin();

        this._ChangeValue(Increment, this._timeType);



        var sf = this;
        var sourceCount = count;
        var now = new Date();
        this._SpinTimer = setInterval(function () {

            sf._ChangeValue(Increment, sf._timeType);

            count--;
            if (count == 0 && time > 50) {
                sf._StartSpin(Increment, time - 100, sourceCount + 3);

            }


            var now2 = new Date();
            if (now2 - now > 500) sf._StopSpin();
            now = now2;
        }, time);
        mini.on(document, "mouseup", this._OnDocumentMouseUp, this);

    },
    _StopSpin: function () {
        clearInterval(this._SpinTimer);
        this._SpinTimer = null;

    },
    __OnButtonMouseDown: function (e) {
        this._DownValue = this.getFormValue();
        this._timeType = "hours";
        if (e.spinType == "up") {
            this._StartSpin(1, 230, 2);
        } else {
            this._StartSpin(-1, 230, 2);
        }
    },






















    _OnDocumentMouseUp: function (e) {
        this._StopSpin();
        mini.un(document, "mouseup", this._OnDocumentMouseUp, this);

        if (this._DownValue != this.getFormValue()) {
            this._OnValueChanged();
        }
    },
    __OnInputTextChanged: function (e) {
        var _value = this.getFormValue();

        this.setValue(this._textEl.value);

        if (_value != this.getFormValue()) {
            this._OnValueChanged();
        }
    },

    getAttrs: function (el) {
        var attrs = mini.TimeSpinner.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["format"
                ]
        );

        return attrs;
    }

});
mini.regClass(mini.TimeSpinner, 'timespinner');


mini.HtmlFile = function () {
    mini.HtmlFile.superclass.constructor.call(this);
    this.on("validation", this.__OnValidation, this);
}
mini.extend(mini.HtmlFile, mini.ButtonEdit, {
    width: 180,
    buttonText: "浏览...",
    _buttonWidth: 56,

    limitType: "",


    limitTypeErrorText: "上传文件格式为：",

    allowInput: false,
    readOnly: true,
    _cellSpacing: 0,

    uiCls: "mini-htmlfile",
    _create: function () {
        mini.HtmlFile.superclass._create.call(this);

        this._fileEl = mini.append(this.el, '<input type="file" hideFocus class="mini-htmlfile-file" name="' + this.name + '" ContentEditable=false/>');
        mini.on(this._borderEl, "mousemove", this.__OnMouseMove, this);
        mini.on(this._fileEl, "change", this.__OnFileChange, this);
    },
    _getButtonHtml: function () {
        var hover = 'onmouseover="mini.addClass(this, \'' + this._buttonHoverCls + '\');" '
                        + 'onmouseout="mini.removeClass(this, \'' + this._buttonHoverCls + '\');"';
        return '<span class="mini-buttonedit-button" ' + hover + '>' + this.buttonText + '</span>';
    },
    __OnFileChange: function (e) {

        this.value = this._textEl.value = this._fileEl.value;
        this._OnValueChanged();

        e = { htmlEvent: e };
        this.fire("fileselect", e);
    },
    __OnMouseMove: function (e) {

        var x = e.pageX, y = e.pageY;
        var box = mini.getBox(this.el);

        x = (x - box.x - 5);
        y = (y - box.y - 5);

        if (this.enabled == false) {

            x = -20;
            y = -20;
        }
        this._fileEl.style.display = "";
        this._fileEl.style.left = x + 'px';
        this._fileEl.style.top = y + 'px';
    },
    __OnValidation: function (e) {
        if (!this.limitType) return;

        var vs = e.value.split(".");
        var fileType = "*." + vs[vs.length - 1];
        var types = this.limitType.split(";");

        if (types.length > 0 && types.indexOf(fileType) == -1) {
            e.errorText = this.limitTypeErrorText + this.limitType;
            e.isValid = false;
        }
    },
    setName: function (value) {
        this.name = value;
        mini.setAttr(this._fileEl, "name", this.name);
    },
    getValue: function () {
        return this._textEl.value;
    },

    setButtonText: function (value) {
        this.buttonText = value;

    },
    getButtonText: function () {
        return this.buttonText;
    },
    setLimitType: function (value) {
        this.limitType = value;
    },
    getLimitType: function () {
        return this.limitType;
    },

    getAttrs: function (el) {
        var attrs = mini.HtmlFile.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["limitType", "buttonText", "limitTypeErrorText"
             ]
        );

        return attrs;
    }
});
mini.regClass(mini.HtmlFile, "htmlfile");


mini.FileUpload = function (config) {
    this.postParam = {};
    mini.FileUpload.superclass.constructor.call(this, config);
    this.on("validation", this.__OnValidation, this);
}

mini.extend(mini.FileUpload, mini.ButtonEdit, {
    width: 180,
    buttonText: "浏览...",
    _buttonWidth: 56,

    limitTypeErrorText: "上传文件格式为：",
    readOnly: true,
    _cellSpacing: 0,

    limitSize: '',
    limitType: '',
    typesDescription: '上传文件格式',
    uploadLimit: 0,
    queueLimit: '',
    flashUrl: '',
    uploadUrl: '',

    postParam: null,

    uploadOnSelect: false,

    uiCls: "mini-fileupload",
    _create: function () {
        mini.FileUpload.superclass._create.call(this);

        mini.addClass(this.el, "mini-htmlfile");

        this._uploadId = this.uid + "$button_placeholder";
        this._fileEl = mini.append(this.el, '<span id="' + this._uploadId + '"></span>');
        this.uploadEl = this._fileEl;

        mini.on(this._borderEl, "mousemove", this.__OnMouseMove, this);
    },
    _getButtonHtml: function () {
        var hover = 'onmouseover="mini.addClass(this, \'' + this._buttonHoverCls + '\');" '
                        + 'onmouseout="mini.removeClass(this, \'' + this._buttonHoverCls + '\');"';
        return '<span class="mini-buttonedit-button" ' + hover + '>' + this.buttonText + '</span>';
    },
    destroy: function (removeEl) {
        if (this._innerEl) {
            mini.clearEvent(this._innerEl);

            this._innerEl = null;
        }
        mini.FileUpload.superclass.destroy.call(this, removeEl);
    },
    __OnMouseMove: function (evt) {

        if (this.enabled == false) return;
        var sf = this;
        if (!this.swfUpload) {

            var upload = new SWFUpload({
                file_post_name: this.name,
                upload_url: sf.uploadUrl,
                flash_url: sf.flashUrl,


                file_size_limit: sf.limitSize,
                file_types: sf.limitType,
                file_types_description: sf.typesDescription,
                file_upload_limit: parseInt(sf.uploadLimit),
                file_queue_limit: sf.queueLimit,


                file_queued_handler: mini.createDelegate(this.__on_file_queued, this),

                upload_error_handler: mini.createDelegate(this.__on_upload_error, this),
                upload_success_handler: mini.createDelegate(this.__on_upload_success, this),
                upload_complete_handler: mini.createDelegate(this.__on_upload_complete, this),



                button_placeholder_id: this._uploadId,
                button_width: 1000,
                button_height: 50,
                button_window_mode: "transparent",


                debug: false

            });
            upload.flashReady();
            this.swfUpload = upload;

            var el = this.swfUpload.movieElement;
            el.style.zIndex = 1000;
            el.style.position = "absolute";
            el.style.left = "0px";
            el.style.top = "0px";
            el.style.width = "100%";
            el.style.height = "50px";


        } else {










        }
    },
    addPostParam: function (value) {
        mini.copyTo(this.postParam, value);
    },
    setPostParam: function (value) {
        this.addPostParam(value);
    },
    getPostParam: function () {
        return this.postParam;
    },
    setLimitType: function (value) {
        this.limitType = value;
    },
    getLimitType: function () {
        return this.limitType;
    },
    setTypesDescription: function (str) {
        this.typesDescription = str;
    },
    getTypesDescription: function () {
        return this.typesDescription;
    },
    setButtonText: function (value) {
        this.buttonText = value;
        this._buttonEl.innerHTML = value;
    },
    getButtonText: function () {
        return this.buttonText;
    },

    setUploadLimit: function (value) {
        this.uploadLimit = value;
    },

    setQueueLimit: function (value) {
        this.queueLimit = value;
    },
    setFlashUrl: function (value) {
        this.flashUrl = value;
    },

    setUploadUrl: function (value) {
        if (this.swfUpload) {
            this.swfUpload.setUploadURL(value);
        }
        this.uploadUrl = value
    },

    setName: function (value) {
        this.name = value;
    },

    startUpload: function (params) {
        var e = { cancel: false };
        this.fire("beforeupload", e);
        if (e.cancel == true) return;
        if (this.swfUpload) {
            this.swfUpload.setPostParams(this.postParam);
            this.swfUpload.startUpload()
        }
    },

    __on_file_queued: function (file) {
        var e = { file: file };




        if (this.uploadOnSelect) {
            this.startUpload()
        }
        this.setText(file.name);

        this.fire("fileselect", e);
    },
    __on_upload_success: function (file, serverData) {

        var e = { file: file, serverData: serverData };
        this.fire("uploadsuccess", e);

    },
    __on_upload_error: function (file) {
        var e = { file: file };

        this.fire("uploaderror", e);

    },
    __on_upload_complete: function (e) {
        this.fire("uploadcomplete", e);
    },
    __fileError: function () {

    },

    getAttrs: function (el) {
        var attrs = mini.FileUpload.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["limitType", "limitSize", "flashUrl", "uploadUrl", "uploadLimit", "buttonText",
                "onuploadsuccess", "onuploaderror", "onuploadcomplete", "onfileselect"
             ]
        );

        mini._ParseBool(el, attrs,
            ["uploadOnSelect"
             ]
        );

        return attrs;
    }
});
mini.regClass(mini.FileUpload, "fileupload");




mini.Lookup = function () {
    this.data = [];
    mini.Lookup.superclass.constructor.call(this);

    mini.on(this._textEl, "mouseup", this.__OnMouseUp, this);

    this.on("showpopup", this.__OnShowPopup, this);

}
mini.extend(mini.Lookup, mini.PopupEdit, {
    allowInput: true,

    valueField: "id",
    textField: "text",
    delimiter: ',',

    multiSelect: false,

    data: [],

    grid: null,
    _destroyPopup: false,


    uiCls: "mini-lookup",
    destroy: function (removeEl) {
        if (this.grid) {
            this.grid.un("rowclick", this.__OnGridRowClickChanged, this);
            this.grid.un("load", this.__OnGridLoad, this);
            this.grid = null;
        }
        mini.Lookup.superclass.destroy.call(this, removeEl);
    },
    setMultiSelect: function (value) {
        this.multiSelect = value;

        if (this.grid) this.grid.setMultiSelect(value);
    },
    setGrid: function (value) {
        if (typeof value == "string") {
            mini.parse(value);
            value = mini.get(value);
        }
        this.grid = mini.getAndCreate(value);
        if (this.grid) {
            this.grid.setMultiSelect(this.multiSelect);
            this.grid.setCheckSelectOnLoad(false);
            this.grid.on("rowclick", this.__OnGridRowClickChanged, this);
            this.grid.on("load", this.__OnGridLoad, this);
            this.grid.on("checkall", this.__OnGridRowClickChanged, this);

        }
    },
    getGrid: function () {
        return this.grid;
    },
    setValueField: function (valueField) {
        this.valueField = valueField;



    },
    getValueField: function () {
        return this.valueField;
    },
    setTextField: function (value) {

        this.textField = value;
    },
    getTextField: function () {
        return this.textField;
    },
    deselectAll: function () {
        this.data = [];
        this.setValue("");
        this.setText("");
        if (this.grid) this.grid.deselectAll();
    },

    getItemValue: function (item) {
        return String(item[this.valueField]);
    },
    getItemText: function (item) {
        var t = item[this.textField];
        return mini.isNull(t) ? '' : String(t);
    },
    getValueAndText: function (records) {
        if (mini.isNull(records)) records = [];

        var values = [];
        var texts = [];
        for (var i = 0, l = records.length; i < l; i++) {
            var record = records[i];
            if (record) {
                values.push(this.getItemValue(record));
                texts.push(this.getItemText(record));
            }
        }
        return [values.join(this.delimiter), texts.join(this.delimiter)];
    },
    _createData: function () {
        this.value = mini.isNull(this.value) ? "" : String(this.value);
        this.text = mini.isNull(this.text) ? "" : String(this.text);

        var data = [];
        var values = this.value.split(this.delimiter);
        var texts = this.text.split(this.delimiter);
        var len = values.length;

        if (this.value) {
            for (var i = 0, l = len; i < l; i++) {
                var row = {};
                var id = values[i];
                var text = texts[i];
                row[this.valueField] = id ? id : "";
                row[this.textField] = text ? text : "";
                data.push(row);
            }
        }
        this.data = data;

    },
    _getValueMaps: function (rows) {

        var vs = {};
        for (var i = 0, l = rows.length; i < l; i++) {
            var row = rows[i];
            var id = row[this.valueField];
            vs[id] = row;
        }
        return vs;
    },
    setValue: function (value) {
        mini.Lookup.superclass.setValue.call(this, value);
        this._createData();
    },
    setText: function (value) {
        mini.Lookup.superclass.setText.call(this, value);
        this._createData();
    },
    __OnGridRowClickChanged: function (e) {

        var rows = this._getValueMaps(this.grid.getData());
        var sels = this._getValueMaps(this.grid.getSelecteds());
        var vs = this._getValueMaps(this.data);
        if (this.multiSelect == false) {
            vs = {};
            this.data = [];
        }

        var removes = {};
        for (var id in vs) {
            var o = vs[id];
            if (rows[id]) {
                if (sels[id]) {

                } else {
                    removes[id] = o;
                }
            }
        }
        for (var i = this.data.length - 1; i >= 0; i--) {
            var o = this.data[i];
            var id = o[this.valueField];
            if (removes[id]) this.data.removeAt(i);
        }


        for (var id in sels) {
            var o = sels[id];
            if (!vs[id]) this.data.push(o);
        }



        var vts = this.getValueAndText(this.data);

        this.setValue(vts[0]);
        this.setText(vts[1]);

        this._OnValueChanged();
    },
    __OnGridLoad: function (e) {
        this.__OnShowPopup(e);
    },
    __OnShowPopup: function (e) {

        var vsb = String(this.value).split(this.delimiter);
        var vs = {};
        for (var i = 0, l = vsb.length; i < l; i++) {
            var v = vsb[i];
            vs[v] = 1;
        }

        var rows = this.grid.getData();


        var sels = [];
        for (var i = 0, l = rows.length; i < l; i++) {
            var row = rows[i];
            var id = row[this.valueField];
            if (vs[id]) sels.push(row);
        }

        this.grid.selects(sels);
    },



    doUpdate: function () {
        mini.Lookup.superclass.doUpdate.call(this);
        this._textEl.readOnly = true;
        this.el.style.cursor = "default";

    },
    __OnInputKeyDown: function (e) {
        mini.Lookup.superclass.__OnInputKeyDown.call(this, e);

        switch (e.keyCode) {
            case 46:
            case 8:

                break;
            case 37:

                break;
            case 39:

                break;
        }







    },
    __OnMouseUp: function (e) {
        if (this.isReadOnly()) return;


        var rg = mini.getSelectRange(this._textEl);
        var start = rg[0], end = rg[1];


        var index = this._findTextIndex(start);


    },
    _findTextIndex: function (rgIndex) {
        var index = -1;
        if (this.text == "") return index;

        var texts = String(this.text).split(this.delimiter);
        var len = 0;
        for (var i = 0, l = texts.length; i < l; i++) {
            var text = texts[i];
            if (len < rgIndex && rgIndex <= len + text.length) {
                index = i;
                break;
            }
            len = len + text.length + 1;
        }
        return index;
    },


    getAttrs: function (el) {
        var attrs = mini.Lookup.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["grid", "valueField", "textField"
             ]
        );
        mini._ParseBool(el, attrs,
            ["multiSelect"
             ]
        );

        return attrs;
    }
});

mini.regClass(mini.Lookup, 'lookup');








mini.TextBoxList = function () {
    mini.TextBoxList.superclass.constructor.call(this);

    this.data = [];
    this.doUpdate();


}
mini.extend(mini.TextBoxList, mini.ValidatorBase, {
    formField: true,

    value: "",
    text: "",
    valueField: "id",
    textField: "text",

    url: "",
    delay: 150,

    allowInput: true,

    editIndex: 0,

    _focusCls: "mini-textboxlist-focus",
    _itemHoverClass: "mini-textboxlist-item-hover",
    _itemSelectedClass: "mini-textboxlist-item-selected",
    _closeHoverClass: "mini-textboxlist-close-hover",

    textName: "",
    setTextName: function (value) {
        this.textName = value;

    },
    getTextName: function () {
        return this.textName;
    },


    uiCls: "mini-textboxlist",
    _create: function () {

        var html = '<table class="mini-textboxlist" cellpadding="0" cellspacing="0"><tr ><td class="mini-textboxlist-border"><ul></ul><a href="#"></a><input type="hidden"/></td></tr></table>';
        var d = document.createElement("div");
        d.innerHTML = html;
        this.el = d.firstChild;

        var td = this.el.getElementsByTagName("td")[0];
        this.ulEl = td.firstChild;
        this._valueEl = td.lastChild;
        this.focusEl = td.childNodes[1];
    },
    destroy: function (removeEl) {
        if (this.isShowPopup) {
            this.hidePopup();
        }
        mini.un(document, "mousedown", this.__OnDocMouseDown, this);
        mini.TextBoxList.superclass.destroy.call(this, removeEl);
    },
    _initEvents: function () {
        mini.TextBoxList.superclass._initEvents.call(this);

        mini.on(this.el, "mousemove", this.__OnMouseMove, this);
        mini.on(this.el, "mouseout", this.__OnMouseOut, this);
        mini.on(this.el, "mousedown", this.__OnMouseDown, this);
        mini.on(this.el, "click", this.__OnClick, this);
        mini.on(this.el, "keydown", this.__OnKeyDown, this);

        mini.on(document, "mousedown", this.__OnDocMouseDown, this);
    },
    __OnDocMouseDown: function (e) {
        if (this.isReadOnly()) return;
        if (this.isShowPopup) {
            if (!mini.isAncestor(this.popup.el, e.target)) {
                this.hidePopup();
            }
        }
        if (this._focused) {
            if (this.within(e) == false) {
                this.select(null, false);
                this.showInput(false);

                this.removeCls(this._focusCls);
                this._focused = false;
            }

        }
    },

    errorIconEl: null,
    getErrorIconEl: function () {
        if (!this._errorIconEl) {
            var tr = this.el.rows[0];
            var td = tr.insertCell(1);
            td.style.cssText = 'width:18px;vertical-align:top;';
            td.innerHTML = '<div class="mini-errorIcon"></div>';
            this._errorIconEl = td.firstChild;
        }
        return this._errorIconEl;
    },
    _RemoveErrorIcon: function () {
        if (this._errorIconEl) {
            jQuery(this._errorIconEl.parentNode).remove();
        }
        this._errorIconEl = null;
    },

    doLayout: function () {
        if (this.canLayout() == false) return;
        mini.TextBoxList.superclass.doLayout.call(this);

        if (this.isReadOnly() || this.allowInput == false) {
            this._inputEl.readOnly = true;
        } else {
            this._inputEl.readOnly = false;
        }
    },
    doUpdate: function () {
        if (this._ValueChangeTimer) clearInterval(this._ValueChangeTimer);
        if (this._inputEl) mini.un(this._inputEl, "keydown", this.__OnInputKeyDown, this);

        var sb = [];
        var id = this.uid;
        for (var i = 0, l = this.data.length; i < l; i++) {
            var o = this.data[i];
            var li_id = id + "$text$" + i;
            var text = mini._getMap(this.textField, o);
            if (mini.isNull(text)) text = "";
            sb[sb.length] = '<li id="' + li_id + '" class="mini-textboxlist-item">';
            sb[sb.length] = text;
            sb[sb.length] = '<span class="mini-textboxlist-close"></span></li>';
        }
        var inputid = id + "$input";
        sb[sb.length] = '<li id="' + inputid + '" class="mini-textboxlist-inputLi"><input class="mini-textboxlist-input" type="text" autocomplete="off"></li>';

        this.ulEl.innerHTML = sb.join("");

        this.editIndex = this.data.length;
        if (this.editIndex < 0) this.editIndex = 0;

        this.inputLi = this.ulEl.lastChild;
        this._inputEl = this.inputLi.firstChild;

        mini.on(this._inputEl, "keydown", this.__OnInputKeyDown, this);

        var sf = this;
        this._inputEl.onkeyup = function () {
            sf._syncInputSize();
        }

        sf._ValueChangeTimer = null;
        sf._LastInputText = sf._inputEl.value;
        this._inputEl.onfocus = function () {
            sf._ValueChangeTimer = setInterval(function () {


                if (sf._LastInputText != sf._inputEl.value) {
                    sf._startQuery();
                    sf._LastInputText = sf._inputEl.value;
                }
            }, 10);

            sf.addCls(sf._focusCls);
            sf._focused = true;

            sf.fire("focus");
        }
        this._inputEl.onblur = function () {
            clearInterval(sf._ValueChangeTimer);

            sf.fire("blur");
        }






    },
    getItemByEvent: function (event) {
        var domItem = mini.findParent(event.target, "mini-textboxlist-item");
        if (domItem) {
            var ids = domItem.id.split("$");
            var id = ids[ids.length - 1];
            return this.data[id];
        }
    },
    getItem: function (id) {
        if (typeof id == "number") return this.data[id];
        if (typeof id == "object") return id;




    },
    getItemEl: function (o) {
        var index = this.data.indexOf(o);
        var li_id = this.uid + "$text$" + index;
        return document.getElementById(li_id);
    },
    hoverItem: function (item, e) {
        if (this.isReadOnly() || this.enabled == false) return;
        this.blurItem();
        var li = this.getItemEl(item);
        mini.addClass(li, this._itemHoverClass);

        if (e && mini.hasClass(e.target, "mini-textboxlist-close")) {
            mini.addClass(e.target, this._closeHoverClass);
        }
    },
    blurItem: function () {
        var len = this.data.length;
        for (var i = 0, l = len; i < l; i++) {
            var o = this.data[i];

            var li = this.getItemEl(o);
            if (li) {
                mini.removeClass(li, this._itemHoverClass);

                mini.removeClass(li.lastChild, this._closeHoverClass);
            }
        }
    },
    showInput: function (index) {
        this.select(null);

        if (mini.isNumber(index)) {
            this.editIndex = index;
        } else {
            this.editIndex = this.data.length;
        }
        if (this.editIndex < 0) this.editIndex = 0;
        if (this.editIndex > this.data.length) this.editIndex = this.data.length;

        var inputLi = this.inputLi;
        inputLi.style.display = "block";

        if (mini.isNumber(index) && index < this.data.length) {
            var item = this.data[index];
            var itemEl = this.getItemEl(item);
            jQuery(itemEl).before(inputLi);
        } else {
            this.ulEl.appendChild(inputLi);
        }
        if (index !== false) {
            setTimeout(function () {
                try {

                    inputLi.firstChild.focus();
                    mini.selectRange(inputLi.firstChild, 100);
                } catch (e) {
                }
            }, 10);
        } else {
            this.lastInputText = "";
            this._inputEl.value = "";
        }
        return inputLi;
    },
    select: function (item) {
        item = this.getItem(item);
        if (this._selected) {
            var itemEl = this.getItemEl(this._selected);
            mini.removeClass(itemEl, this._itemSelectedClass);
        }
        this._selected = item;

        if (this._selected) {
            var itemEl = this.getItemEl(this._selected);
            mini.addClass(itemEl, this._itemSelectedClass);
        }

        var sf = this;

        if (this._selected) {
            this.focusEl.focus();
            var me = this;
            setTimeout(function () {
                try {
                    me.focusEl.focus();
                } catch (ex) { }
            }, 50);
        }

        if (this._selected) {
            sf.addCls(sf._focusCls);
            sf._focused = true;
        }
    },

    _doInsertSelectValue: function () {

        var item = this._listbox.getSelected();
        var index = this.editIndex;

        if (item) {

            item = mini.clone(item);

            this.insertItem(index, item);
        }
    },
    insertItem: function (index, item) {
        this.data.insert(index, item);
        var text = this.getText();
        var value = this.getValue();

        this.setValue(value, false);
        this.setText(text, false);

        this._createData();

        this.doUpdate();

        this.showInput(index + 1);

        this._OnValueChanged();
    },
    removeItem: function (item) {
        if (!item) return;
        var itemEl = this.getItemEl(item);
        mini.removeNode(itemEl);

        this.data.remove(item);

        var text = this.getText();
        var value = this.getValue();


        this.setValue(value, false);
        this.setText(text, false);

        this._OnValueChanged();
    },
    _createData: function () {
        var texts = (this.text ? this.text : "").split(",");
        var values = (this.value ? this.value : "").split(",");

        if (values[0] == "") values = [];
        var len = values.length;
        this.data.length = len;

        for (var i = 0, l = len; i < l; i++) {
            var o = this.data[i];
            if (!o) {
                o = {};
                this.data[i] = o;
            }



            var text = !mini.isNull(texts[i]) ? texts[i] : "";
            var value = !mini.isNull(values[i]) ? values[i] : "";

            mini._setMap(this.textField, text, o);
            mini._setMap(this.valueField, value, o);
        }

        this.value = this.getValue();
        this.text = this.getText();
    },
    getInputText: function () {
        return this._inputEl ? this._inputEl.value : "";
    },
    getText: function () {
        var sb = [];
        for (var i = 0, l = this.data.length; i < l; i++) {
            var o = this.data[i];
            var name = mini._getMap(this.textField, o);
            if (mini.isNull(name)) name = "";
            name = name.replace(",", "，");
            sb.push(name);
        }
        return sb.join(",");
    },
    getValue: function () {
        var sb = [];
        for (var i = 0, l = this.data.length; i < l; i++) {
            var o = this.data[i];
            var v = mini._getMap(this.valueField, o);
            sb.push(v);
        }
        return sb.join(",")
    },

    setName: function (value) {
        if (this.name != value) {
            this.name = value;
            this._valueEl.name = value;
        }
    },
    setValue: function (value) {

        if (mini.isNull(value)) value = "";

        if (this.value != value) {
            this.value = value;
            this._valueEl.value = value;
            this._createData();
            this.doUpdate();
        }
    },
    setText: function (value) {
        if (mini.isNull(value)) value = "";
        if (this.text !== value) {
            this.text = value;
            this._createData();
            this.doUpdate();
        }
    },
    setValueField: function (value) {
        this.valueField = value;
        this._createData();
    },
    getValueField: function () {
        return this.valueField;
    },
    setTextField: function (value) {
        this.textField = value;
        this._createData();
    },
    getTextField: function () {
        return this.textField;
    },
    setAllowInput: function (value) {
        this.allowInput = value;
        this.doLayout();
    },
    getAllowInput: function () {
        return this.allowInput;
    },
    setUrl: function (value) {
        this.url = value;
    },
    getUrl: function () {
        return this.url;
    },
    setPopupHeight: function (value) {
        this.popupHeight = value;
    },
    getPopupHeight: function () {
        return this.popupHeight;
    },
    setPopupMinHeight: function (value) {
        this.popupMinHeight = value;
    },
    getPopupMinHeight: function () {
        return this.popupMinHeight;
    },
    setPopupMaxHeight: function (value) {
        this.popupMaxHeight = value;
    },
    getPopupMaxHeight: function () {
        return this.popupMaxHeight;
    },

    doQuery: function () {
        this._startQuery(true);
    },

    _syncInputSize: function () {
        if (this.isDisplay() == false) return;
        var text = this.getInputText();
        var size = mini.measureText(this._inputEl, text);
        var width = size.width > 20 ? size.width + 4 : 20;
        var elWidth = mini.getWidth(this.el, true);
        if (width > elWidth - 15) width = elWidth - 15;
        this._inputEl.style.width = width + "px";
    },
    _startQuery: function (oldText) {
        var sf = this;



        setTimeout(function () {
            sf._syncInputSize();
        }, 1);

        this.showPopup("loading");

        this._stopQuery();

        this._loading = true;

        this.delayTimer = setTimeout(function () {
            var text = sf._inputEl.value;


            sf._doQuery();

        }, this.delay);
    },
    _doQuery: function () {
        if (this.isDisplay() == false) return;
        var text = this.getInputText();

        var sf = this;
        var dataSource = this._listbox.getData();
        var params = {

            value: this.getValue(),
            text: this.getText()
        };
        params[this.searchField] = text;

        var url = this.url;
        var fn = typeof url == "function" ? url : window[url];
        if (typeof fn == "function") {
            url = fn(this);
        }
        if (!url) return;

        var ajaxMethod = "post";
        if (url) {
            if (url.indexOf(".txt") != -1 || url.indexOf(".json") != -1) {
                ajaxMethod = "get";
            }
        }

        var e = {
            url: url,
            async: true,
            params: params,
            data: params,
            type: ajaxMethod,
            cache: false,
            cancel: false
        };
        this.fire("beforeload", e);
        if (e.data != e.params && e.params != params) {
            e.data = e.params;
        }
        if (e.cancel) return;

        mini.copyTo(e, {
            success: function (text) {
                var data = mini.decode(text);

                if (sf.dataField) {
                    data = mini._getMap(sf.dataField, data);
                }
                if (!data) data = [];

                sf._listbox.setData(data);
                sf.showPopup();
                sf._listbox._focusItem(0, true);
                sf.fire("load");
                sf._loading = false;

                if (sf._selectOnLoad) {
                    sf.__doSelectValue();
                    sf._selectOnLoad = null;
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                sf.showPopup("error");
            }
        });

        sf._ajaxer = mini.ajax(e);
    },
    _stopQuery: function () {
        if (this.delayTimer) {
            clearTimeout(this.delayTimer);
            this.delayTimer = null;
        }
        if (this._ajaxer) {
            this._ajaxer.abort();
        }
        this._loading = false;
    },


    within: function (e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        if (this.showPopup && this.popup && this.popup.within(e)) return true;
        return false;
    },

    popupLoadingText: "<span class='mini-textboxlist-popup-loading'>Loading...</span>",
    popupErrorText: "<span class='mini-textboxlist-popup-error'>Error</span>",
    popupEmptyText: "<span class='mini-textboxlist-popup-noresult'>No Result</span>",

    isShowPopup: false,
    popupHeight: "",
    popupMinHeight: 30,
    popupMaxHeight: 150,
    _createPopup: function () {
        if (!this.popup) {
            this.popup = new mini.ListBox();
            this.popup.addCls("mini-textboxlist-popup");
            this.popup.setStyle("position:absolute;left:0;top:0;");
            this.popup.showEmpty = true;
            this.popup.setValueField(this.valueField);
            this.popup.setTextField(this.textField);
            this.popup.render(document.body);

            this.popup.on("itemclick", function (e) {
                this.hidePopup();
                this._doInsertSelectValue();
            }, this);
        }
        this._listbox = this.popup;
        return this.popup;
    },
    showPopup: function (action) {
        if (this.isDisplay() == false) return;
        this.isShowPopup = true;

        var popup = this._createPopup();

        popup.el.style.zIndex = mini.getMaxZIndex();
        var control = this._listbox;
        control.emptyText = this.popupEmptyText;


        if (action == "loading") {
            control.emptyText = this.popupLoadingText;
            this._listbox.setData([]);
        } else if (action == "error") {
            control.emptyText = this.popupLoadingText;
            this._listbox.setData([]);
        }
        this._listbox.doUpdate();

        var box = this.getBox();
        var x = box.x, y = box.y + box.height;

        this.popup.el.style.display = "block";
        mini.setXY(popup.el, -1000, -1000);
        this.popup.setWidth(box.width);

        this.popup.setHeight(this.popupHeight);

        if (this.popup.getHeight() < this.popupMinHeight) {
            this.popup.setHeight(this.popupMinHeight);
        }
        if (this.popup.getHeight() > this.popupMaxHeight) {
            this.popup.setHeight(this.popupMaxHeight);
        }
        mini.setXY(popup.el, x, y);


        var popupHeight = mini.getHeight(popup.el);
        var vbox = mini.getViewportBox();

        if (y + popupHeight > vbox.bottom) {
            mini.setY(popup.el, box.y - popupHeight);
        }


    },
    hidePopup: function () {
        this.isShowPopup = false;
        if (this.popup) this.popup.el.style.display = "none";
    },

    __OnMouseMove: function (e) {
        if (this.enabled == false) return;
        var item = this.getItemByEvent(e);
        if (!item) {
            this.blurItem();
            return;
        }
        this.hoverItem(item, e);
    },
    __OnMouseOut: function (e) {
        this.blurItem();
    },
    __OnClick: function (e) {
        if (this.isReadOnly() || this.enabled == false) return;
        if (this.enabled == false) return;


        var item = this.getItemByEvent(e);
        if (!item) {
            if (mini.findParent(e.target, "mini-textboxlist-input")) {

            } else {
                this.showInput();
            }
            return;
        }
        this.focusEl.focus();
        this.select(item);

        if (e && mini.hasClass(e.target, "mini-textboxlist-close")) {
            this.removeItem(item);
        }
    },
    __OnKeyDown: function (e) {

        if (this.isReadOnly() || this.allowInput == false) return false;

        var index = this.data.indexOf(this._selected);

        var sf = this;
        function remove() {
            var item = sf.data[index];
            sf.removeItem(item);

            item = sf.data[index];
            if (!item) item = sf.data[index - 1];
            sf.select(item);
            if (!item) {
                sf.showInput();
            }
        }

        switch (e.keyCode) {
            case 8:

                e.preventDefault();
                remove();
                break;
            case 37:
            case 38:
                this.select(null);
                this.showInput(index);

                break;
            case 39:
            case 40:
                index += 1;
                this.select(null);
                this.showInput(index);

                break;
            case 46:
                remove();
                break;
        }
    },
    __doSelectValue: function () {
        var item = this._listbox.getFocusedItem();
        if (item) {
            this._listbox.setSelected(item);
        }





        this.lastInputText = this.text;
        this.hidePopup();

        this._doInsertSelectValue();
    },
    __OnInputKeyDown: function (e) {

        this._selectOnLoad = null;

        if (this.isReadOnly() || this.allowInput == false) return false;

        e.stopPropagation();

        if (this.isReadOnly() || this.allowInput == false) return;

        var range = mini.getSelectRange(this._inputEl);
        var start = range[0], end = range[1], textLen = this._inputEl.value.length;
        var isFirst = start == end && start == 0;
        var isLast = start == end && end == textLen;


        if (this.isReadOnly() || this.allowInput == false) {
            e.preventDefault();
        }
        if (e.keyCode == 9) {
            this.hidePopup();
            return;
        }
        if (e.keyCode == 16 || e.keyCode == 17 || e.keyCode == 18) return;

        switch (e.keyCode) {

            case 13:

                if (this.isShowPopup) {
                    e.preventDefault();


                    if (this._loading) {
                        this._selectOnLoad = true;
                        return;
                    }


                    this.__doSelectValue();

                }
                break;
            case 27:
                e.preventDefault();
                this.hidePopup();
                break;
            case 8:

                if (isFirst) {
                    e.preventDefault();
                }
            case 37:
                if (isFirst) {
                    if (this.isShowPopup) {
                        this.hidePopup();
                    } else {
                        if (this.editIndex > 0) {
                            var index = this.editIndex - 1;
                            if (index < 0) index = 0;
                            if (index >= this.data.length) index = this.data.length - 1;

                            this.showInput(false);
                            this.select(index);
                        }
                    }
                }
                break;
            case 39:
                if (isLast) {
                    if (this.isShowPopup) {
                        this.hidePopup();
                    } else {
                        if (this.editIndex <= this.data.length - 1) {

                            var index = this.editIndex;


                            this.showInput(false);
                            this.select(index);

                        }
                    }
                }
                break;
            case 38:
                e.preventDefault();
                if (this.isShowPopup) {
                    var index = -1;
                    var item = this._listbox.getFocusedItem();
                    if (item) index = this._listbox.indexOf(item);
                    index--;
                    if (index < 0) index = 0;
                    this._listbox._focusItem(index, true);


                }
                break;
            case 40:

                e.preventDefault();
                if (this.isShowPopup) {
                    var index = -1;
                    var item = this._listbox.getFocusedItem();
                    if (item) index = this._listbox.indexOf(item);
                    index++
                    if (index < 0) index = 0;
                    if (index >= this._listbox.getCount()) index = this._listbox.getCount() - 1;
                    this._listbox._focusItem(index, true);


                } else {
                    this._startQuery(true);
                }
                break;
            default:

                break;
        }
    },

    focus: function () {

        try {
            this._inputEl.focus();
        } catch (e) {
        }
    },
    blur: function () {
        try {
            this._inputEl.blur();
        } catch (e) {
        }
    },
    searchField: "key",
    setSearchField: function (value) {
        this.searchField = value;
    },
    getSearchField: function () {
        return this.searchField;
    },
    getAttrs: function (el) {
        var attrs = mini.TextBox.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        mini._ParseString(el, attrs,
            ["value", "text", "valueField", "textField", "url", "popupHeight",
            "textName", "onfocus", "onbeforeload", "onload", "searchField"
             ]
        );
        mini._ParseBool(el, attrs,
            ["allowInput"
             ]
        );

        mini._ParseInt(el, attrs,
            ["popupMinHeight", "popupMaxHeight"
             ]
        );
        return attrs;
    }

});

mini.regClass(mini.TextBoxList, "textboxlist");


mini.AutoComplete = function () {
    mini.AutoComplete.superclass.constructor.call(this);



    var sf = this;
    sf._ValueChangeTimer = null;

    this._textEl.onfocus = function () {

        sf._LastInputText = sf._textEl.value;
        sf._ValueChangeTimer = setInterval(function () {


            if (sf._LastInputText != sf._textEl.value) {

                sf._tryQuery();
                sf._LastInputText = sf._textEl.value;

                if (sf._textEl.value == "" && sf.value != "") {
                    sf.setValue("");
                    sf._OnValueChanged();
                }
            }
        }, 10);



    }
    this._textEl.onblur = function () {
        clearInterval(sf._ValueChangeTimer);
        if (!sf.isShowPopup()) {
            if (sf._LastInputText != sf._textEl.value) {

                if (sf._textEl.value == "" && sf.value != "") {
                    sf.setValue("");
                    sf._OnValueChanged();
                }
            }
        }
    }

    this._buttonEl.style.display = "none";

    this._doInputLayout();
}
mini.extend(mini.AutoComplete, mini.ComboBox, {
    url: "",
    allowInput: true,
    delay: 150,

    searchField: "key",

    minChars: 0,

    _buttonWidth: 0,

    uiCls: "mini-autocomplete",

    setUrl: function (value) {
        this.url = value;
    },
    setValue: function (value) {

        if (mini.isNull(value)) value = "";
        if (this.value != value) {
            this.value = value;
            this._valueEl.value = this.value;
        }
    },
    setText: function (value) {
        if (mini.isNull(value)) value = "";
        if (this.text != value) {
            this.text = value;
            this._LastInputText = value;
        }
        this._textEl.value = this.text;
    },

    setMinChars: function (value) {
        this.minChars = value;
    },
    getMinChars: function () {
        return this.minChars;
    },
    setSearchField: function (value) {
        this.searchField = value;
    },
    getSearchField: function () {
        return this.searchField;
    },



    popupLoadingText: "<span class='mini-textboxlist-popup-loading'>Loading...</span>",
    popupErrorText: "<span class='mini-textboxlist-popup-error'>Error</span>",
    popupEmptyText: "<span class='mini-textboxlist-popup-noresult'>No Result</span>",
    showPopup: function (action) {

        var popup = this.getPopup();
        var control = this._listbox;
        control.showEmpty = true;
        control.emptyText = this.popupEmptyText;
        if (action == "loading") {
            control.emptyText = this.popupLoadingText;
            this._listbox.setData([]);
        } else if (action == "error") {
            control.emptyText = this.popupLoadingText;
            this._listbox.setData([]);
        }
        this._listbox.doUpdate();

        mini.AutoComplete.superclass.showPopup.call(this);


    },




    __OnInputKeyDown: function (e) {
        var ex = { htmlEvent: e };
        this.fire("keydown", ex);
        if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
            return false;
        }
        if (e.keyCode == 9) {
            this.hidePopup();
            return;
        }

        if (this.isReadOnly()) return;

        switch (e.keyCode) {
            case 27:
                if (this.isShowPopup()) {
                    e.stopPropagation();
                }

                this.hidePopup();
                break;
            case 13:
                if (this.isShowPopup()) {
                    e.preventDefault();
                    e.stopPropagation();

                    var index = this._listbox.getFocusedIndex();

                    if (index != -1) {
                        var item = this._listbox.getAt(index);
                        var vts = this._listbox.getValueAndText([item]);
                        var value = vts[0];

                        this.setText(vts[1]);





                        this.setValue(value, false);

                        this._OnValueChanged();

                        this.hidePopup();

                    }
                } else {
                    this.fire("enter", ex);
                }
                break;
            case 37:
                break;
            case 38:
                var index = this._listbox.getFocusedIndex();
                if (index == -1) {
                    index = 0;
                    if (!this.multiSelect) {
                        var item = this._listbox.findItems(this.value)[0];
                        if (item) {
                            index = this._listbox.indexOf(item);
                        }
                    }
                }
                if (this.isShowPopup()) {
                    if (!this.multiSelect) {
                        index -= 1;
                        if (index < 0) index = 0;
                        this._listbox._focusItem(index, true);
                    }
                }
                break;
            case 39:
                break;
            case 40:

                var index = this._listbox.getFocusedIndex();
                if (this.isShowPopup()) {
                    if (!this.multiSelect) {
                        index += 1;
                        if (index > this._listbox.getCount() - 1) index = this._listbox.getCount() - 1;
                        this._listbox._focusItem(index, true);
                    }
                } else {
                    this._tryQuery(this._textEl.value);
                }
                break;
            default:
                this._tryQuery(this._textEl.value);
                break;
        }
    },
    doQuery: function () {
        this._tryQuery();
    },
    _tryQuery: function (oldText) {
        var sf = this;
        if (this._queryTimer) {
            clearTimeout(this._queryTimer);
            this._queryTimer = null;
        }
        this._queryTimer = setTimeout(function () {
            var text = sf._textEl.value;

            sf._doQuery(text);


        }, this.delay);
        this.showPopup("loading");
    },
    _doQuery: function (key) {
        if (!this.url) return;
        if (this._ajaxer) {
            this._ajaxer.abort();
        }

        var url = this.url;
        var ajaxMethod = "post";
        if (url) {
            if (url.indexOf(".txt") != -1 || url.indexOf(".json") != -1) {
                ajaxMethod = "get";
            }
        }

        var params = {};
        params[this.searchField] = key;

        var e = {
            url: url,
            async: true,
            params: params,
            data: params,
            type: ajaxMethod,
            cache: false,
            cancel: false
        };
        this.fire("beforeload", e);
        if (e.data != e.params && e.params != params) {
            e.data = e.params;
        }
        if (e.cancel) return;

        var me = sf = this;
        mini.copyTo(e, {
            success: function (text) {
                try {
                    var data = mini.decode(text);
                } catch (ex) {
                    throw new Error("autocomplete json is error");
                }
                if (sf.dataField) {
                    data = mini._getMap(sf.dataField, data);
                }
                if (!data) data = [];

                me._listbox.setData(data);
                me.showPopup();
                me._listbox._focusItem(0, true);
                me.data = data;
                me.fire("load", { data: data });

            },
            error: function (jqXHR, textStatus, errorThrown) {
                me.showPopup("error");
            }
        });

        this._ajaxer = mini.ajax(e);
    },

    getAttrs: function (el) {
        var attrs = mini.AutoComplete.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["searchField"]
        );

        return attrs;
    }
});

mini.regClass(mini.AutoComplete, "autocomplete");


mini.Form = function (el) {
    this.el = mini.byId(el);
    if (!this.el) throw new Error("form element not null");

    mini.Form.superclass.constructor.call(this);

}
mini.extend(mini.Form, mini.Component, {
    el: null,

    getFields: function () {
        if (!this.el) return [];
        var controls = mini.findControls(function (control) {
            if (!control.el || control.formField != true) return false;
            if (mini.isAncestor(this.el, control.el)) return true;
            return false;
        }, this);
        return controls;
    },
    getFieldsMap: function () {
        var fields = this.getFields();
        var map = {};
        for (var i = 0, l = fields.length; i < l; i++) {
            var field = fields[i];
            if (field.name) map[field.name] = field;
        }
        return map;
    },
    getField: function (name) {
        if (!this.el) return null;
        return mini.getbyName(name, this.el);
    },

    getData: function (formatted, deep) {
        if (mini.isNull(deep)) deep = true;
        var valueFn = formatted ? "getFormValue" : "getValue";
        var controls = this.getFields();
        var data = {};
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            var fn = control[valueFn];
            if (!fn) continue;
            if (control.name) {
                if (deep == true) {
                    mini._setMap(control.name, fn.call(control), data);
                } else {
                    data[control.name] = fn.call(control);
                }
            }
            if (control.textName && control.getText) {
                if (deep == true) {
                    mini._setMap(control.textName, control.getText(), data);
                } else {
                    data[control.textName] = control.getText();
                }
            }
        }
        return data;
    },
    setData: function (options, all, deep) {
        if (mini.isNull(deep)) deep = true;
        if (typeof options != "object") options = {};
        var map = this.getFieldsMap();
        for (var name in map) {
            var control = map[name];
            if (!control) continue;
            if (control.setValue) {
                var v = options[name];
                if (deep == true) {
                    v = mini._getMap(name, options);
                }
                if (v === undefined && all === false) continue;
                if (v === null) v = "";
                control.setValue(v);
            }
            if (control.setText && control.textName) {
                var text = options[control.textName];
                if (deep == true) {

                    text = mini._getMap(control.textName, options);
                }
                if (mini.isNull(text)) text = "";
                control.setText(text);
            }
        }

    },
    reset: function () {
        var controls = this.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            if (!control.setValue) continue;
            if (control.setText && control._clearText !== false) {
                var text = control.defaultText;
                if (mini.isNull(text)) text = "";
                control.setText(text);
            }
            control.setValue(control.defaultValue);
        }
        this.setIsValid(true);
    },
    clear: function () {
        var controls = this.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            if (!control.setValue) continue;
            if (control.setText && control._clearText !== false) {
                control.setText("");
            }
            control.setValue("");

        }
        this.setIsValid(true);
    },
    getValidateFields: function () {
        function isDisplay(control) {
            return control.isDisplay(function (p) {
                if (mini.hasClass(p, 'mini-tabs-body')) return true;
            });
        }

        var fields = [];
        var controls = this.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            if (!control.validate || !control.isDisplay) continue;
            if (isDisplay(control)) {
                fields.push(control);
            }
        }
        return fields;
    },
    validate: function (all) {
        var controls = this.getValidateFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            var succ = control.validate();
            if (succ == false && all === false) {
                break;
            }
        }
        return this.isValid();
    },
    isValid: function () {
        var controls = this.getValidateFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            if (control.isValid() == false) return false;
        }
        return true;
    },
    setIsValid: function (isValid) {
        var controls = this.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            if (!control.setIsValid) continue;
            control.setIsValid(isValid);
        }
    },
    getErrorTexts: function () {
        var errorTexts = [];
        var errors = this.getErrors();
        for (var i = 0, l = errors.length; i < l; i++) {
            var control = errors[i];
            errorTexts.push(control.errorText);
        }
        return errorTexts;
    },
    getErrors: function () {
        var errors = [];
        var controls = this.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            if (!control.isValid) continue;
            if (control.isValid() == false) {
                errors.push(control);
            }
        }
        return errors;
    },

    mask: function (options) {
        if (typeof options == "string") options = { html: options };
        options = options || {};
        options.el = this.el;
        if (!options.cls) options.cls = this._maskCls;
        mini.mask(options);
    },
    unmask: function () {
        mini.unmask(this.el);
    },
    _maskCls: "mini-mask-loading",
    loadingMsg: "数据加载中，请稍后...",
    loading: function (msg) {
        this.mask(msg || this.loadingMsg);
    },

    __OnValueChanged: function (e) {

        this._changed = true;
    },
    _changed: false,
    setChanged: function (value) {
        this._changed = value;

        var controls = this.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            control.on("valuechanged", this.__OnValueChanged, this);
        }
    },
    isChanged: function () {
        return this._changed;
    },

    setEnabled: function (value) {
        var controls = this.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            control.setEnabled(value);
        }
    }

});



mini.Fit = function () {
    mini.Fit.superclass.constructor.call(this);
}
mini.extend(mini.Fit, mini.Container, {

    style: "",
    _clearBorder: false,

    uiCls: "mini-fit",
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-fit";
        this._bodyEl = this.el;
    },
    _initEvents: function () {

    },
    isFixedSize: function () {
        return false;
    },
    doLayout: function () {
        if (!this.canLayout()) return;

        var parentNode = this.el.parentNode;
        var childNodes = mini.getChildNodes(parentNode);
        if (parentNode == document.body) {
            this.el.style.height = "0px";
        }


        var height = mini.getHeight(parentNode, true);







        for (var i = 0, l = childNodes.length; i < l; i++) {
            var node = childNodes[i];
            var tagName = node.tagName ? node.tagName.toLowerCase() : "";
            if (node == this.el || (tagName == "style" || tagName == "script")) continue;
            var pos = mini.getStyle(node, "position");
            if (pos == "absolute" || pos == "fixed") continue;

            var h = mini.getHeight(node);

            var margin = mini.getMargins(node);
            height = height - h - margin.top - margin.bottom;
        }

        var border = mini.getBorders(this.el);
        var padding = mini.getPaddings(this.el);
        var margin = mini.getMargins(this.el);

        height = height - margin.top - margin.bottom;
        if (jQuery.boxModel) {
            height = height - padding.top - padding.bottom - border.top - border.bottom;
        }
        if (height < 0) height = 0;

        this.el.style.height = height + "px";


        try {
            childNodes = mini.getChildNodes(this.el);
            for (var i = 0, l = childNodes.length; i < l; i++) {
                var node = childNodes[i];
                mini.layout(node);
            }
        } catch (e) { }

    },
    set_bodyParent: function (value) {

        if (!value) return;

        var el = this._bodyEl;

        var p = value;
        while (p.firstChild) {
            try {
                el.appendChild(p.firstChild);
            } catch (e) { }
        }
        this.doLayout();
    },


    getAttrs: function (el) {
        var attrs = mini.Fit.superclass.getAttrs.call(this, el);

        attrs._bodyParent = el;

        return attrs;
    }
});
mini.regClass(mini.Fit, "fit");


mini.Panel = function () {
    this._initButtons();
    mini.Panel.superclass.constructor.call(this);

    if (this.url) this.setUrl(this.url);

    this._contentEl = this._bodyEl;

    this._doVisibleEls();

    this._Resizer = new mini._Resizer(this);

    this._doTools();
}
mini.extend(mini.Panel, mini.Container, {
    width: 250,
    title: "",
    iconCls: "",
    iconStyle: "",

    allowResize: false,

    url: "",

    refreshOnExpand: false,
    maskOnLoad: true,

    showCollapseButton: false,
    showCloseButton: false,
    closeAction: "display",
    showHeader: true,
    showToolbar: false,
    showFooter: false,

    headerCls: "",
    headerStyle: "",
    bodyCls: "",
    bodyStyle: "",
    footerCls: "",
    footerStyle: "",
    toolbarCls: "",
    toolbarStyle: "",

    minWidth: 180,
    minHeight: 100,
    maxWidth: 5000,
    maxHeight: 3000,

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var _allowLayout = this._allowLayout;
        this._allowLayout = false;

        var toolbar = kv.toolbar;
        delete kv.toolbar;
        var footer = kv.footer;
        delete kv.footer;
        var url = kv.url;
        delete kv.url;

        mini.Panel.superclass.set.call(this, kv);

        if (toolbar) {
            this.setToolbar(toolbar);
        }
        if (footer) {
            this.setFooter(footer);
        }
        if (url) {
            this.setUrl(url);
        }

        this._allowLayout = _allowLayout;
        this.doLayout();

        return this;
    },

    uiCls: "mini-panel",
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-panel";

        var s = '<div class="mini-panel-border">'
            + '<div class="mini-panel-header" ><div class="mini-panel-header-inner" ><span class="mini-panel-icon"></span><div class="mini-panel-title" ></div><div class="mini-tools" ></div></div></div>'
            + '<div class="mini-panel-viewport">'
                + '<div class="mini-panel-toolbar"></div>'
                + '<div class="mini-panel-body" ></div>'
                + '<div class="mini-panel-footer"></div>'
                + '<div class="mini-resizer-trigger"></div>'
            + '</div>'
            + '</div>';
        this.el.innerHTML = s;

        this._borderEl = this.el.firstChild;
        this._headerEl = this._borderEl.firstChild;
        this._viewportEl = this._borderEl.lastChild;

        this._toolbarEl = mini.byClass('mini-panel-toolbar', this.el);
        this._bodyEl = mini.byClass('mini-panel-body', this.el);
        this._footerEl = mini.byClass('mini-panel-footer', this.el);
        this._resizeGridEl = mini.byClass('mini-resizer-trigger', this.el);

        var hi = mini.byClass('mini-panel-header-inner', this.el);
        this._iconEl = mini.byClass('mini-panel-icon', this.el);
        this._titleEl = mini.byClass('mini-panel-title', this.el);
        this._toolsEl = mini.byClass('mini-tools', this.el);

        mini.setStyle(this._bodyEl, this.bodyStyle);


        this._doTitle();
    },
    destroy: function (removeEl) {

        this._doRemoveIFrame();
        this._iframeEl = null;




        this._viewportEl = this._borderEl = this._bodyEl = this._footerEl = this._toolbarEl = null;
        this._toolsEl = this._titleEl = this._iconEl = this._resizeGridEl = null;
        mini.Panel.superclass.destroy.call(this, removeEl);
    },
    _initEvents: function () {
        mini._BindEvents(function () {
            mini.on(this.el, "click", this.__OnClick, this);
        }, this);
    },

    _doVisibleEls: function () {
        this._headerEl.style.display = this.showHeader ? "" : "none";
        this._toolbarEl.style.display = this.showToolbar ? "" : "none";
        this._footerEl.style.display = this.showFooter ? "" : "none";
    },
    doLayout: function () {
        if (!this.canLayout()) return;

        this._resizeGridEl.style.display = this.allowResize ? "" : "none";


        var autoHeight = this.isAutoHeight();
        var autoWidth = this.isAutoWidth();

        var w = mini.getWidth(this._viewportEl, true);
        var elWidth = w;



        if (!autoHeight) {
            var vh = this.getViewportHeight();
            mini.setHeight(this._viewportEl, vh);

            var bh = this.getBodyHeight(true);
            mini.setHeight(this._bodyEl, bh);
        } else {
            this._viewportEl.style.height = "auto";
            this._bodyEl.style.height = "auto";
        }

        mini.layout(this._borderEl);

        this.fire("layout");
    },
    deferLayout: function (time) {
        if (!time) time = 10;
        if (this._layoutTimer) return;
        var me = this;
        this._layoutTimer = setTimeout(function () {
            me._layoutTimer = null;
            me.doLayout();
        }, time);
    },
    _stopLayout: function () {
        clearTimeout(this._layoutTimer);
        this._layoutTimer = null;
    },
    getViewportWidth: function (content) {
        return mini.getWidth(this._viewportEl, content);
    },
    getViewportHeight: function (content) {
        var h = this.getHeight(true) - this.getHeaderHeight();
        if (content) {
            var padding2 = mini.getPaddings(this._viewportEl);
            var border2 = mini.getBorders(this._viewportEl);
            var margin2 = mini.getMargins(this._viewportEl);
            if (jQuery.boxModel) {
                h = h - padding2.top - padding2.bottom - border2.top - border2.bottom;
            }
            h = h - margin2.top - margin2.bottom;
        }
        return h;
    },
    getBodyHeight: function (content) {
        var h = this.getViewportHeight();
        var h = h - this.getToolbarHeight() - this.getFooterHeight();
        if (content) {
            var padding = mini.getPaddings(this._viewportEl);
            var border = mini.getBorders(this._viewportEl);
            var margin = mini.getMargins(this._viewportEl);
            if (jQuery.boxModel) {
                h = h - padding.top - padding.bottom - border.top - border.bottom;
            }
            h = h - margin.top - margin.bottom;
        }

        if (h < 0) h = 0;
        return h;
    },
    getHeaderHeight: function () {
        var h = this.showHeader ? jQuery(this._headerEl).outerHeight() : 0;
        return h;
    },
    getToolbarHeight: function () {
        var h = this.showToolbar ? jQuery(this._toolbarEl).outerHeight() : 0;
        return h;
    },
    getFooterHeight: function () {
        var h = this.showFooter ? jQuery(this._footerEl).outerHeight() : 0;
        return h;
    },

    setHeaderStyle: function (value) {
        this.headerStyle = value;
        mini.setStyle(this._headerEl, value);
        this.doLayout();
    },
    getHeaderStyle: function () {
        return this.headerStyle;
    },
    setBodyStyle: function (value) {
        this.bodyStyle = value;
        mini.setStyle(this._bodyEl, value);
        this.doLayout();
    },
    getBodyStyle: function () {
        return this.bodyStyle;
    },
    setToolbarStyle: function (value) {
        this.toolbarStyle = value;
        mini.setStyle(this._toolbarEl, value);
        this.doLayout();
    },
    getToolbarStyle: function () {
        return this.toolbarStyle;
    },
    setFooterStyle: function (value) {
        this.footerStyle = value;
        mini.setStyle(this._footerEl, value);
        this.doLayout();
    },
    getFooterStyle: function () {
        return this.footerStyle;
    },
    setHeaderCls: function (cls) {
        jQuery(this._headerEl).removeClass(this.headerCls);
        jQuery(this._headerEl).addClass(cls);
        this.headerCls = cls;
        this.doLayout();
    },
    getHeaderCls: function () {
        return this.headerCls;
    },
    setBodyCls: function (cls) {
        jQuery(this._bodyEl).removeClass(this.bodyCls);
        jQuery(this._bodyEl).addClass(cls);
        this.bodyCls = cls;
        this.doLayout();
    },
    getBodyCls: function () {
        return this.bodyCls;
    },
    setToolbarCls: function (cls) {
        jQuery(this._toolbarEl).removeClass(this.toolbarCls);
        jQuery(this._toolbarEl).addClass(cls);
        this.toolbarCls = cls;
        this.doLayout();
    },
    getToolbarCls: function () {
        return this.toolbarCls;
    },
    setFooterCls: function (cls) {
        jQuery(this._footerEl).removeClass(this.footerCls);
        jQuery(this._footerEl).addClass(cls);
        this.footerCls = cls;
        this.doLayout();
    },
    getFooterCls: function () {
        return this.footerCls;
    },
    _doTitle: function () {
        this._titleEl.innerHTML = this.title;

        this._iconEl.style.display = (this.iconCls || this.iconStyle) ? "inline" : "none";
        this._iconEl.className = "mini-panel-icon " + this.iconCls;
        mini.setStyle(this._iconEl, this.iconStyle);

    },
    setTitle: function (value) {
        this.title = value;
        this._doTitle();
    },
    getTitle: function () {
        return this.title;
    },
    setIconCls: function (value) {
        this.iconCls = value;
        this._doTitle();
    },
    getIconCls: function () {
        return this.iconCls;
    },
    _doTools: function () {
        var s = "";
        for (var i = this.buttons.length - 1; i >= 0; i--) {
            var button = this.buttons[i];
            s += '<span id="' + i + '" class="' + button.cls + ' '
                + (button.enabled ? "" : "mini-disabled") + '" style="'
                + button.style + ';' + (button.visible ? "" : "display:none;") + '"></span>';
        }
        this._toolsEl.innerHTML = s;
    },
    setShowCloseButton: function (value) {
        this.showCloseButton = value;
        var button = this.getButton("close");
        button.visible = value;
        this._doTools();
    },
    getShowCloseButton: function () {
        return this.showCloseButton;
    },
    setCloseAction: function (value) {
        this.closeAction = value;
    },
    getCloseAction: function () {
        return this.closeAction;
    },
    setShowCollapseButton: function (value) {
        this.showCollapseButton = value;
        var button = this.getButton("collapse");
        button.visible = value;
        this._doTools();
    },
    getShowCollapseButton: function () {
        return this.showCollapseButton;
    },
    setShowHeader: function (value) {
        this.showHeader = value;
        this._doVisibleEls();
        this.deferLayout();
    },
    getShowHeader: function () {
        return this.showHeader;
    },
    setShowToolbar: function (value) {
        this.showToolbar = value;
        this._doVisibleEls();
        this.deferLayout();
    },
    getShowToolbar: function () {
        return this.showToolbar;
    },
    setShowFooter: function (value) {
        this.showFooter = value;
        this._doVisibleEls();
        this.deferLayout();
    },
    getShowFooter: function () {
        return this.showFooter;
    },

    __OnClick: function (e) {
        if (mini.isAncestor(this._headerEl, e.target)) {
            var toolsEl = mini.findParent(e.target, 'mini-tools');
            if (toolsEl) {
                var button = this.getButton(parseInt(e.target.id));
                if (button) {
                    this._OnButtonClick(button, e);
                }
            }
        }
    },
    _OnButtonClick: function (button, htmlEvent) {
        var e = {
            button: button,
            index: this.buttons.indexOf(button),
            name: button.name.toLowerCase(),
            htmlEvent: htmlEvent,
            cancel: false
        };
        this.fire("beforebuttonclick", e);


        try {
            if (e.name == "close" && this.closeAction == "destroy" && this._iframeEl && this._iframeEl.contentWindow) {
                var ret = true;
                if (this._iframeEl.contentWindow.CloseWindow) {
                    ret = this._iframeEl.contentWindow.CloseWindow("close");
                } else if (this._iframeEl.contentWindow.CloseOwnerWindow) {
                    ret = this._iframeEl.contentWindow.CloseOwnerWindow("close");
                }
                if (ret === false) {
                    e.cancel = true;
                }
            }
        } catch (ex) { }

        if (e.cancel == true) return e;

        this.fire("buttonclick", e);

        if (e.name == "close") {
            if (this.closeAction == "destroy") {
                this.__HideAction = "close";
                this.destroy();
            } else {
                this.hide();
            }
        }
        if (e.name == "collapse") {
            this.toggle();
            if (this.refreshOnExpand && this.expanded && this.url) {
                this.reload();
            }
        }
        return e;
    },
    onButtonClick: function (fn, scope) {
        this.on("buttonclick", fn, scope);
    },


    _initButtons: function () {
        this.buttons = [];

        var close = this.createButton({ name: "close", cls: "mini-tools-close", visible: this.showCloseButton });
        this.buttons.push(close);

        var collapse = this.createButton({ name: "collapse", cls: "mini-tools-collapse", visible: this.showCollapseButton });
        this.buttons.push(collapse);
    },
    createButton: function (options) {
        var button = mini.copyTo({
            name: "",
            cls: "",
            style: "",
            visible: true,
            enabled: true,
            html: ""
        }, options);
        return button;
    },
    addButton: function (button, index) {
        if (typeof button == "string") {
            button = { iconCls: button };
        }
        button = this.createButton(button);
        if (typeof index != "number") index = this.buttons.length;
        this.buttons.insert(index, button);
        this._doTools();
    },
    updateButton: function (index, options) {
        var button = this.getButton(index);
        if (!button) return;
        mini.copyTo(button, options);
        this._doTools();
    },
    removeButton: function (index) {
        var button = this.getButton(index);
        if (!button) return;
        this.buttons.remove(button);
        this._doTools();
    },
    getButton: function (index) {
        if (typeof index == "number") {
            return this.buttons[index];
        } else {
            for (var i = 0, l = this.buttons.length; i < l; i++) {
                var button = this.buttons[i];
                if (button.name == index) return button;
            }
        }
    },
    setBody: function (value) {
        __mini_setControls(value, this._bodyEl, this);
    },
    set_bodyParent: function (value) {

    },
    setToolbar: function (value) {
        __mini_setControls(value, this._toolbarEl, this);
    },
    setFooter: function (value) {
        __mini_setControls(value, this._footerEl, this);
    },
    getHeaderEl: function () {
        return this._headerEl;
    },
    getToolbarEl: function () {
        return this._toolbarEl;
    },
    getBodyEl: function () {
        return this._bodyEl;
    },
    getFooterEl: function () {
        return this._footerEl;
    },
    getIFrameEl: function (index) {
        return this._iframeEl;
    },

    _getMaskWrapEl: function () {
        return this._bodyEl;
    },
    _doRemoveIFrame: function (removeAll) {
        if (this._iframeEl) {
            var iframe = this._iframeEl;

            iframe.src = "";
            try {
                iframe.contentWindow.document.write("");
                iframe.contentWindow.document.close();
            } catch (ex) { }
            if (iframe._ondestroy) iframe._ondestroy();

            try {
                this._iframeEl.parentNode.removeChild(this._iframeEl);
                this._iframeEl.removeNode(true);
            } catch (ex) { }
        }
        this._iframeEl = null;





        if (removeAll === true) {
            mini.removeChilds(this._bodyEl);
        }
    },
    _deferLoadingTime: 80,
    _doLoad: function () {

        this._doRemoveIFrame(true);

        var st = new Date();
        var sf = this;

        this.loadedUrl = this.url;
        if (this.maskOnLoad) this.loading();


        jQuery(this._bodyEl).css("overflow", "hidden");

        var iframe = mini.createIFrame(this.url,
            function (_iframe, firstLoad) {
                var t = (st - new Date()) + sf._deferLoadingTime;

                if (t < 0) t = 0;
                setTimeout(function () {
                    sf.unmask();
                }, t);


                try {
                    sf._iframeEl.contentWindow.Owner = sf.Owner;
                    sf._iframeEl.contentWindow.CloseOwnerWindow = function (action) {

                        sf.__HideAction = action;


                        var ret = true;
                        if (sf.__onDestroy) ret = sf.__onDestroy(action);
                        if (ret === false) {
                            return false;
                        }

                        var e = {
                            iframe: sf._iframeEl,
                            action: action
                        };

                        sf.fire("unload", e);

                        setTimeout(function () {
                            sf.destroy();
                        }, 10);

                    }
                } catch (e) { }


                if (firstLoad) {
                    if (sf.__onLoad) sf.__onLoad();

                    var e = {
                        iframe: sf._iframeEl
                    };


                    sf.fire("load", e);
                }
            }
        );
        this._bodyEl.appendChild(iframe);
        this._iframeEl = iframe;

    },

    load: function (url, onload, ondestroy) {
        this.setUrl(url, onload, ondestroy);
    },
    reload: function () {
        this.setUrl(this.url);
    },
    setUrl: function (value, onload, ondestroy) {
        this.url = value;
        this.__onLoad = onload;
        this.__onDestroy = ondestroy;
        if (this.expanded) {
            this._doLoad();
        }
    },
    getUrl: function () {
        return this.url;
    },
    setRefreshOnExpand: function (value) {
        this.refreshOnExpand = value;
    },
    getRefreshOnExpand: function () {
        return this.refreshOnExpand;
    },
    setMaskOnLoad: function (value) {
        this.maskOnLoad = value;
    },
    getMaskOnLoad: function (value) {
        return this.maskOnLoad;
    },
    setAllowResize: function (value) {
        if (this.allowResize != value) {
            this.allowResize = value;
            this.doLayout();
        }
    },
    getAllowResize: function () {
        return this.allowResize;
    },

    expanded: true,
    setExpanded: function (value) {
        if (this.expanded != value) {
            this.expanded = value;
            if (this.expanded) {
                this.expand();
            } else {
                this.collapse();
            }
        }
    },
    toggle: function () {
        if (this.expanded) {
            this.collapse();
        } else {
            this.expand();
        }
    },
    collapse: function () {
        this.expanded = false;

        this._height = this.el.style.height;
        this.el.style.height = "auto";
        this._viewportEl.style.display = "none";

        mini.addClass(this.el, "mini-panel-collapse");
        this.doLayout();
    },
    expand: function () {
        this.expanded = true;

        this.el.style.height = this._height;
        this._viewportEl.style.display = "block";
        delete this._height;

        mini.removeClass(this.el, "mini-panel-collapse");


        if (this.url && this.url != this.loadedUrl) {
            this._doLoad();
        }
        this.doLayout();
    },

    getAttrs: function (el) {
        var attrs = mini.Panel.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["title", "iconCls", "iconStyle", "headerCls", "headerStyle", "bodyCls", "bodyStyle",
            "footerCls", "footerStyle", "toolbarCls", "toolbarStyle", "footer", "toolbar",
            "url", "closeAction", "loadingMsg",
            "onbeforebuttonclick", "onbuttonclick", "onload"
             ]
        );
        mini._ParseBool(el, attrs,
            ["allowResize", "showCloseButton", "showHeader", "showToolbar", "showFooter",
            "showCollapseButton", "refreshOnExpand", "maskOnLoad", "expanded"
             ]
        );

        var cs = mini.getChildNodes(el, true);
        for (var i = cs.length - 1; i >= 0; i--) {
            var node = cs[i];
            var property = jQuery(node).attr("property");
            if (!property) continue;
            property = property.toLowerCase();
            if (property == "toolbar") {
                attrs.toolbar = node;
            } else if (property == "footer") {
                attrs.footer = node;
            }
        }
        attrs.body = cs;

        return attrs;
    }


});
mini.regClass(mini.Panel, "panel");

































































mini.Window = function () {

    mini.Window.superclass.constructor.call(this);

    this.addCls("mini-window");

    this.setVisible(false);
    this.setAllowDrag(this.allowDrag);
    this.setAllowResize(this.allowResize);
}

mini.extend(mini.Window, mini.Panel, {
    x: 0,
    y: 0,
    state: "restore",

    _dragCls: "mini-window-drag",
    _resizeCls: "mini-window-resize",
    allowDrag: true,

    showCloseButton: true,
    showMaxButton: false,
    showMinButton: false,
    showCollapseButton: false,

    showModal: true,

    minWidth: 150,
    minHeight: 80,
    maxWidth: 2000,
    maxHeight: 2000,

    uiCls: "mini-window",

    _create: function () {
        mini.Window.superclass._create.call(this);


    },
    _initButtons: function () {
        this.buttons = [];

        var close = this.createButton({ name: "close", cls: "mini-tools-close", visible: this.showCloseButton });
        this.buttons.push(close);

        var max = this.createButton({ name: "max", cls: "mini-tools-max", visible: this.showMaxButton });
        this.buttons.push(max);

        var min = this.createButton({ name: "min", cls: "mini-tools-min", visible: this.showMinButton });
        this.buttons.push(min);

        var collapse = this.createButton({ name: "collapse", cls: "mini-tools-collapse", visible: this.showCollapseButton });
        this.buttons.push(collapse);
    },
    _initEvents: function () {
        mini.Window.superclass._initEvents.call(this);

        mini._BindEvents(function () {

            mini.on(this.el, "mouseover", this.__OnMouseOver, this);
            mini.on(window, "resize", this.__OnWindowResize, this);

            mini.on(this.el, "mousedown", this.__OnWindowMouseDown, this);
        }, this);


    },
    doLayout: function () {
        if (!this.canLayout()) return;




        if (this.state == "max") {
            var vbox = this.getParentBox();
            this.el.style.left = "0px";
            this.el.style.top = "0px";
            mini.setSize(this.el, vbox.width, vbox.height);
        }

        mini.Window.superclass.doLayout.call(this);


        if (this.allowDrag) {
            mini.addClass(this.el, this._dragCls);
        }
        if (this.state == "max") {
            this._resizeGridEl.style.display = "none";
            mini.removeClass(this.el, this._dragCls);
        }


        this._doModal();
    },
    _doModal: function () {

        var show = this.showModal && this.isDisplay() && this.visible;
        if (!this._modalEl && this.showModal == false) return;


        if (!this._modalEl) {
            this._modalEl = mini.append(document.body, '<div class="mini-modal" style="display:none"></div>');
        }



        function resizeModal() {
            this._modalEl.style.zIndex = mini.getStyle(this.el, 'zIndex') - 1;


















        }
        if (show) {
            this._modalEl.style.display = "block";
            this._modalEl.style.zIndex = mini.getStyle(this.el, 'zIndex') - 1;








        } else {
            this._modalEl.style.display = "none";
        }
    },
    getParentBox: function () {
        var vbox = mini.getViewportBox();
        var containerEl = this._containerEl || document.body;
        if (containerEl != document.body) {
            vbox = mini.getBox(containerEl);
        }
        return vbox;
    },

    setShowModal: function (value) {

        this.showModal = value;
    },
    getShowModal: function () {
        return this.showModal;
    },
    setMinWidth: function (value) {
        if (isNaN(value)) return;
        this.minWidth = value;
    },
    getMinWidth: function () {
        return this.minWidth;
    },
    setMinHeight: function (value) {
        if (isNaN(value)) return;
        this.minHeight = value;
    },
    getMinHeight: function () {
        return this.minHeight;
    },
    setMaxWidth: function (value) {
        if (isNaN(value)) return;
        this.maxWidth = value;
    },
    getMaxWidth: function () {
        return this.maxWidth;
    },
    setMaxHeight: function (value) {
        if (isNaN(value)) return;
        this.maxHeight = value;
    },
    getMaxHeight: function () {
        return this.maxHeight;
    },
    setAllowDrag: function (value) {
        this.allowDrag = value;
        mini.removeClass(this.el, this._dragCls);
        if (value) {
            mini.addClass(this.el, this._dragCls);
        }
    },
    getAllowDrag: function () {
        return this.allowDrag;
    },









    setShowMaxButton: function (value) {
        this.showMaxButton = value;
        var button = this.getButton("max");
        button.visible = value;
        this._doTools();
    },
    getShowMaxButton: function () {
        return this.showMaxButton;
    },
    setShowMinButton: function (value) {
        this.showMinButton = value;
        var button = this.getButton("min");
        button.visible = value;
        this._doTools();
    },
    getShowMinButton: function () {
        return this.showMinButton;
    },

    max: function () {
        this.state = "max";
        this.show();

        var button = this.getButton("max");
        if (button) {
            button.cls = "mini-tools-restore";
            this._doTools();
        }
    },
    restore: function () {
        this.state = "restore";
        this.show(this.x, this.y);

        var button = this.getButton("max");
        if (button) {
            button.cls = "mini-tools-max";
            this._doTools();
        }
    },
    containerEl: null,
    showAtPos: function (x, y, options) {
        this.show(x, y, options);
    },
    showInBody: true,
    setShowInBody: function (value) {
        this.showInBody = value;
    },
    getShowInBody: function () {
        return this.showInBody;
    },
    show: function (x, y, options) {
        this._allowLayout = false;

        var containerEl = this._containerEl || document.body;
        if (!this.isRender() || (this.el.parentNode != containerEl && this.showInBody)) {
            this.render(containerEl);
        }

        this.el.style.zIndex = mini.getMaxZIndex();

        this._doShow(x, y);

        this._allowLayout = true;
        this.setVisible(true);

        if (this.state != "max") {
            var box = this.getBox()
            this.x = box.x;
            this.y = box.y;
        }





        try {
            this.el.focus();
        } catch (e) { }
    },
    hide: function () {

        this.setVisible(false);
        this._doModal();
    },
    getWidth: function () {
        this._headerEl.style.width = "50px";
        var width = mini.getWidth(this.el);
        this._headerEl.style.width = "auto";
        return width;
    },
    getBox: function () {
        this._headerEl.style.width = "50px";
        this.el.style.display = "";
        var width = mini.getWidth(this.el);
        this._headerEl.style.width = "auto";
        var box = mini.getBox(this.el);
        box.width = width;
        box.right = box.x + width;
        return box;
    },
    _measureSize: function () {

        var box = this.getBox();


        if (box.width > this.maxWidth) {
            mini.setWidth(this.el, this.maxWidth);
            box = this.getBox()
        }
        if (box.height > this.maxHeight) {
            mini.setHeight(this.el, this.maxHeight);
            box = this.getBox()
        }
        if (box.width < this.minWidth) {
            mini.setWidth(this.el, this.minWidth);
            box = this.getBox()
        }
        if (box.height < this.minHeight) {
            mini.setHeight(this.el, this.minHeight);
            box = this.getBox()
        }
    },
    _doShow: function (x, y) {
        var vbox = this.getParentBox();

        if (this.state == "max") {
            if (!this._width) {
                var box = this.getBox()
                this._width = box.width;
                this._height = box.height;

                this.x = box.x;
                this.y = box.y;
            }
        } else {
            if (mini.isNull(x)) x = "center";
            if (mini.isNull(y)) y = "middle";

            this.el.style.position = "absolute";
            this.el.style.left = "-2000px";
            this.el.style.top = "-2000px";
            this.el.style.display = "";

            if (this._width) {
                this.setWidth(this._width);
                this.setHeight(this._height);
            } else {

            }
            this._measureSize();

            var box = this.getBox()


            if (x == "left") x = 0;
            if (x == 'center') x = vbox.width / 2 - box.width / 2;
            if (x == "right") x = vbox.width - box.width;

            if (y == "top") y = 0;
            if (y == "middle") y = vbox.y + vbox.height / 2 - box.height / 2;
            if (y == "bottom") y = vbox.height - box.height;

            if (x + box.width > vbox.right) x = vbox.right - box.width;
            if (y + box.height > vbox.bottom) y = vbox.bottom - box.height;
            if (x < 0) x = 0;
            if (y < 0) y = 0;

            this.el.style.display = "";

            mini.setX(this.el, x);
            mini.setY(this.el, y);

            this.el.style.left = x + "px";
            this.el.style.top = y + "px";

        }
        this.doLayout();
    },







    _OnButtonClick: function (button, htmlEvent) {
        var e = mini.Window.superclass._OnButtonClick.call(this, button, htmlEvent);
        if (e.cancel == true) return e;

        if (e.name == "max") {
            if (this.state == "max") {
                this.restore();
            } else {
                this.max();
            }
        }
        return e;
    },
    __OnWindowResize: function (e) {
        if (this.state == "max") {
            this.doLayout();


        }



    },
    __OnWindowMouseDown: function (e) {
        if (this.el) {
            this.el.style.zIndex = mini.getMaxZIndex();
        }

        var sf = this;

        if (e.button != mini.MouseButton.Left) return;
        if (this.state != "max" && this.allowDrag && mini.isAncestor(this._headerEl, e.target) && !mini.findParent(e.target, "mini-tools")) {
            var sf = this;
            var box = this.getBox();
            var drag = new mini.Drag({
                capture: false,
                onStart: function () {
                    sf._maskProxy = mini.append(document.body, '<div class="mini-resizer-mask"></div>');
                    sf._dragProxy = mini.append(document.body, '<div class="mini-drag-proxy"></div>');

                    sf.el.style.display = "none";


                },
                onMove: function (drag) {


                    var x = drag.now[0] - drag.init[0], y = drag.now[1] - drag.init[1];

                    x = box.x + x;
                    y = box.y + y;

                    var vbox = sf.getParentBox();

                    var right = x + box.width;
                    var bottom = y + box.height;
                    if (right > vbox.width) x = vbox.width - box.width;


                    if (x < 0) x = 0;
                    if (y < 0) y = 0;





                    sf.x = x;
                    sf.y = y;


                    var dbox = { x: x, y: y, width: box.width, height: box.height };

                    mini.setBox(sf._dragProxy, dbox);
                    this.moved = true;
                },
                onStop: function () {

                    sf.el.style.display = "block";

                    if (this.moved) {
                        var box = mini.getBox(sf._dragProxy);


                        mini.setXY(sf.el, box.x, box.y);
                    }

                    jQuery(sf._maskProxy).remove();
                    sf._maskProxy = null;

                    jQuery(sf._dragProxy).remove();
                    sf._dragProxy = null;


                }
            });
            drag.start(e);
        }
    },
    destroy: function (removeEl) {

        mini.un(window, "resize", this.__OnWindowResize, this);
        if (this._modalEl) {
            jQuery(this._modalEl).remove();
            this._modalEl = null;
        }
        if (this.shadowEl) {
            jQuery(this.shadowEl).remove();
            this.shadowEl = null;
        }
        mini.Window.superclass.destroy.call(this, removeEl);
    },
    getAttrs: function (el) {
        var attrs = mini.Window.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["modalStyle"
                ]
        );
        mini._ParseBool(el, attrs,
            ["showModal", "showShadow", "allowDrag", "allowResize",
            "showMaxButton", "showMinButton", "showInBody"
                ]
        );
        mini._ParseInt(el, attrs,
            ["minWidth", "minHeight", "maxWidth", "maxHeight"
                ]
        );

        return attrs;
    },

    showAtEl: function (atEl, options) {
        atEl = mini.byId(atEl);
        if (!atEl) return;
        if (!this.isRender() || this.el.parentNode != document.body) {
            this.render(document.body);
        }

        var c = {
            xAlign: this.xAlign,
            yAlign: this.yAlign,
            xOffset: 0,
            yOffset: 0,
            popupCls: this.popupCls
        };
        mini.copyTo(c, options);



        this._popupEl = atEl;

        this.el.style.position = "absolute";
        this.el.style.left = "-2000px";
        this.el.style.top = "-2000px";
        this.el.style.display = "";

        this.doLayout();
        this._measureSize();

        var vbox = mini.getViewportBox();
        var box = this.getBox()
        var pbox = mini.getBox(atEl);
        var xy = c.xy;
        var h = c.xAlign, v = c.yAlign;

        var x = vbox.width / 2 - box.width / 2, y = 0;
        if (xy) {
            x = xy[0];
            y = xy[1];
        }

        switch (c.xAlign) {
            case "outleft":
                x = pbox.x - box.width;
                break;
            case "left":
                x = pbox.x;
                break;
            case "center":
                x = pbox.x + pbox.width / 2 - box.width / 2;
                break;
            case "right":
                x = pbox.right - box.width;
                break;
            case "outright":
                x = pbox.right;
                break;
            default:

                break;
        }

        switch (c.yAlign) {
            case "above":
                y = pbox.y - box.height;
                break;
            case "top":
                y = pbox.y;
                break;
            case "middle":
                y = pbox.y + pbox.height / 2 - box.height / 2;
                break;
            case "bottom":
                y = pbox.bottom - box.height;
                break;
            case "below":
                y = pbox.bottom;
                break;
            default:

                break;
        }
        x = parseInt(x);
        y = parseInt(y);


        if (c.outYAlign || c.outXAlign) {
            if (c.outYAlign == "above") {
                if (y + box.height > vbox.bottom) {
                    var top = pbox.y - vbox.y;
                    var bottom = vbox.bottom - pbox.bottom;
                    if (top > bottom) {
                        y = pbox.y - box.height;
                    }
                }

            }
            if (c.outXAlign == "outleft") {
                if (x + box.width > vbox.right) {
                    var left = pbox.x - vbox.x;
                    var right = vbox.right - pbox.right;
                    if (left > right) {
                        x = pbox.x - box.width;
                    }
                }
            }
            if (c.outXAlign == "right") {
                if (x + box.width > vbox.right) {
                    x = pbox.right - box.width;




                }
            }
            this._Show(x, y);
        } else {
            this.showAtPos(x + c.xOffset, y + c.yOffset);
        }
    }
});

mini.regClass(mini.Window, "window");



mini.MessageBox = {






    alertTitle: "提醒",
    confirmTitle: "确认",
    prompTitle: "输入",
    prompMessage: "请输入内容：",
    buttonText: {
        ok: "确定",
        cancel: "取消",
        yes: "是",
        no: "否"
    },
    show: function (options) {

        options = mini.copyTo({
            width: "auto",
            height: "auto",
            showModal: true,

            minWidth: 150,
            maxWidth: 800,
            minHeight: 100,
            maxHeight: 350,

            showHeader: true,
            title: "",
            titleIcon: "",
            iconCls: "",
            iconStyle: "",
            message: "",
            html: "",

            spaceStyle: "margin-right:15px",

            showCloseButton: true,
            buttons: null,
            buttonWidth: 58,
            callback: null
        }, options);

        var callback = options.callback;

        var control = new mini.Window();

        control.setBodyStyle("overflow:hidden");
        control.setShowModal(options.showModal);
        control.setTitle(options.title || "");
        control.setIconCls(options.titleIcon);
        control.setShowHeader(options.showHeader);

        control.setShowCloseButton(options.showCloseButton);

        var id1 = control.uid + "$table", id2 = control.uid + "$content";

        var icon = '<div class="' + options.iconCls + '" style="' + options.iconStyle + '"></div>';
        var s = '<table class="mini-messagebox-table" id="' + id1 + '" style="" cellspacing="0" cellpadding="0"><tr><td>'
                + icon + '</td><td id="' + id2 + '" class="mini-messagebox-content-text">'
                + (options.message || "") + '</td></tr></table>';




        var ws = '<div class="mini-messagebox-content"></div>'
             + '<div class="mini-messagebox-buttons"></div>';
        control._bodyEl.innerHTML = ws;
        var contentEl = control._bodyEl.firstChild;
        if (options.html) {
            if (typeof options.html == "string") {
                contentEl.innerHTML = options.html;
            } else if (mini.isElement(options.html)) {
                contentEl.appendChild(options.html);
            }
        } else {
            contentEl.innerHTML = s;
        }

        control._Buttons = [];

        var buttonsEl = control._bodyEl.lastChild;
        if (options.buttons && options.buttons.length > 0) {
            for (var i = 0, l = options.buttons.length; i < l; i++) {
                var button = options.buttons[i];
                var text = mini.MessageBox.buttonText[button];
                if (!text) text = button;

                var btn = new mini.Button();
                btn.setText(text);
                btn.setWidth(options.buttonWidth);
                btn.render(buttonsEl);
                btn.action = button;
                btn.on("click", function (e) {
                    var button = e.sender;
                    if (callback) callback(button.action);
                    mini.MessageBox.hide(control);
                });

                if (i != l - 1) {
                    btn.setStyle(options.spaceStyle);
                }

                control._Buttons.push(btn);
            }
        } else {
            buttonsEl.style.display = "none";
        }

        control.setMinWidth(options.minWidth);
        control.setMinHeight(options.minHeight);
        control.setMaxWidth(options.maxWidth);
        control.setMaxHeight(options.maxHeight);
        control.setWidth(options.width);
        control.setHeight(options.height);


        control.show();




        var width = control.getWidth();
        control.setWidth(width);

        var height = control.getHeight();
        control.setHeight(height);

        var tb = document.getElementById(id1);
        if (tb) {
            tb.style.width = "100%";
        }
        var td = document.getElementById(id2);
        if (td) {
            td.style.width = "100%";
        }


        var firstButton = control._Buttons[0];
        if (firstButton) {
            firstButton.focus();
        } else {
            control.focus();
        }

        control.on("beforebuttonclick", function (e) {
            if (callback) callback("close");
            e.cancel = true;
            mini.MessageBox.hide(control);
        });
        mini.on(control.el, "keydown", function (e) {





        });

        return control.uid;
    },
    hide: function (id) {

        if (!id) return;
        var control = typeof id == "object" ? id : mini.getbyUID(id);
        if (!control) return;


        for (var i = 0, l = control._Buttons.length; i < l; i++) {
            var button = control._Buttons[i];
            button.destroy();
        }
        control._Buttons = null;

        control.destroy();
    },
    alert: function (message, title, callback) {
        return mini.MessageBox.show({
            minWidth: 250,
            title: title || mini.MessageBox.alertTitle,
            buttons: ["ok"],
            message: message,
            iconCls: "mini-messagebox-warning",
            callback: callback
        });
    },
    confirm: function (message, title, callback) {
        return mini.MessageBox.show({
            minWidth: 250,
            title: title || mini.MessageBox.confirmTitle,
            buttons: ["ok", "cancel"],
            message: message,
            iconCls: "mini-messagebox-question",
            callback: callback
        });
    },
    prompt: function (message, title, callback, multi) {
        var id = "prompt$" + new Date().getTime();
        var s = message || mini.MessageBox.promptMessage;
        if (multi) {
            s = s + '<br/><textarea id="' + id + '" style="width:200px;height:60px;margin-top:3px;"></textarea>';
        } else {
            s = s + '<br/><input id="' + id + '" type="text" style="width:200px;margin-top:3px;"/>';
        }
        var uid = mini.MessageBox.show({
            title: title || mini.MessageBox.promptTitle,
            buttons: ["ok", "cancel"],
            width: 250,
            html: '<div style="padding:5px;padding-left:10px;">' + s + '</div>',
            callback: function (action) {
                var input = document.getElementById(id);
                if (callback) callback(action, input.value);
            }
        });
        var input = document.getElementById(id);
        input.focus();
        return uid;
    },
    loading: function (message, title) {
        return mini.MessageBox.show({
            minHeight: 50,
            title: title,
            showCloseButton: false,
            message: message,
            iconCls: "mini-messagebox-waiting"
        });
    }
};
mini.alert = mini.MessageBox.alert;
mini.confirm = mini.MessageBox.confirm;
mini.prompt = mini.MessageBox.prompt;
mini.loading = mini.MessageBox.loading;
mini.showMessageBox = mini.MessageBox.show;
mini.hideMessageBox = mini.MessageBox.hide;



mini.Splitter = function () {
    this._initPanes();
    mini.Splitter.superclass.constructor.call(this);
}
mini.extend(mini.Splitter, mini.Control, {
    width: 300,
    height: 180,

    vertical: false,
    allowResize: true,

    pane1: null,
    pane2: null,

    showHandleButton: true,
    handlerStyle: "",
    handlerCls: "",





    handlerSize: 5,


    uiCls: "mini-splitter",
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-splitter";
        this.el.innerHTML = '<div class="mini-splitter-border"><div id="1" class="mini-splitter-pane mini-splitter-pane1"></div><div id="2" class="mini-splitter-pane mini-splitter-pane2"></div><div class="mini-splitter-handler"></div></div>';

        this._borderEl = this.el.firstChild;
        this._pane1El = this._borderEl.firstChild;
        this._pane2El = this._borderEl.childNodes[1];
        this._handlerEl = this._borderEl.lastChild;

    },
    _initEvents: function () {
        mini._BindEvents(function () {
            mini.on(this.el, "click", this.__OnClick, this);
            mini.on(this.el, "mousedown", this.__OnMouseDown, this);
        }, this);

    },
    _initPanes: function () {
        this.pane1 = {
            id: "",
            index: 1, minSize: 30, maxSize: 1000000, size: '', showCollapseButton: false, cls: "", style: "", visible: true, expanded: true
        };
        this.pane2 = mini.copyTo({}, this.pane1);
        this.pane2.index = 2;
    },
    doUpdate: function () {
        this.doLayout();
    },
    doLayout: function () {
        if (!this.canLayout()) return;

        this._handlerEl.style.cursor = this.allowResize ? "" : "default";

        mini.removeClass(this.el, 'mini-splitter-vertical');
        if (this.vertical) {
            mini.addClass(this.el, 'mini-splitter-vertical');
        }

        mini.removeClass(this._pane1El, 'mini-splitter-pane1-vertical');
        mini.removeClass(this._pane2El, 'mini-splitter-pane2-vertical');
        if (this.vertical) {
            mini.addClass(this._pane1El, 'mini-splitter-pane1-vertical');
            mini.addClass(this._pane2El, 'mini-splitter-pane2-vertical');
        }

        mini.removeClass(this._handlerEl, 'mini-splitter-handler-vertical');
        if (this.vertical) {
            mini.addClass(this._handlerEl, 'mini-splitter-handler-vertical');
        }




        var h = this.getHeight(true);
        var w = this.getWidth(true);

        if (!jQuery.boxModel) {
            var b2 = mini.getBorders(this._borderEl);
            h = h + b2.top + b2.bottom;
            w = w + b2.left + b2.right;
        }
        if (w < 0) w = 0;
        if (h < 0) h = 0;
        this._borderEl.style.width = w + "px";
        this._borderEl.style.height = h + "px";

        var p1 = this._pane1El, p2 = this._pane2El;
        var jqP1 = jQuery(p1), jqP2 = jQuery(p2);

        p1.style.display = p2.style.display = this._handlerEl.style.display = "";


        var hSize = this.handlerSize;

        this.pane1.size = String(this.pane1.size);
        this.pane2.size = String(this.pane2.size);

        var p1SIZE = parseFloat(this.pane1.size), p2SIZE = parseFloat(this.pane2.size);

        var p1Null = isNaN(p1SIZE), p2Null = isNaN(p2SIZE);
        var p1Percent = !isNaN(p1SIZE) && this.pane1.size.indexOf("%") != -1;
        var p2Percent = !isNaN(p2SIZE) && this.pane2.size.indexOf("%") != -1;
        var p1Number = !p1Null && !p1Percent;
        var p2Number = !p2Null && !p2Percent;

        var size = this.vertical ? h - this.handlerSize : w - this.handlerSize;
        var p1Size = p2Size = 0;

        if (p1Null || p2Null) {
            if (p1Null && p2Null) {
                p1Size = parseInt(size / 2);
                p2Size = size - p1Size;
            } else if (p1Number) {
                p1Size = p1SIZE;
                p2Size = size - p1Size;
            } else if (p1Percent) {
                p1Size = parseInt(size * p1SIZE / 100);
                p2Size = size - p1Size;
            } else if (p2Number) {
                p2Size = p2SIZE;
                p1Size = size - p2Size;
            } else if (p2Percent) {
                p2Size = parseInt(size * p2SIZE / 100);
                p1Size = size - p2Size;
            }
        } else if (p1Percent && p2Number) {
            p2Size = p2SIZE;
            p1Size = size - p2Size;
        } else if (p1Number && p2Percent) {
            p1Size = p1SIZE;
            p2Size = size - p1Size;
        } else {
            var all = p1SIZE + p2SIZE;
            p1Size = parseInt(size * p1SIZE / all);
            p2Size = size - p1Size;
        }

        if (p1Size > this.pane1.maxSize) {
            p1Size = this.pane1.maxSize;
            p2Size = size - p1Size;
        }
        if (p2Size > this.pane2.maxSize) {
            p2Size = this.pane2.maxSize;
            p1Size = size - p2Size;
        }

        if (p1Size < this.pane1.minSize) {
            p1Size = this.pane1.minSize;
            p2Size = size - p1Size;
        }
        if (p2Size < this.pane2.minSize) {
            p2Size = this.pane2.minSize;
            p1Size = size - p2Size;
        }


        if (this.pane1.expanded == false) {
            p2Size = size;
            p1Size = 0;
            p1.style.display = "none";
        } else if (this.pane2.expanded == false) {
            p1Size = size;
            p2Size = 0;
            p2.style.display = "none";
        }


        if (this.pane1.visible == false) {
            p2Size = size + hSize;
            p1Size = hSize = 0;
            p1.style.display = "none";
            this._handlerEl.style.display = "none";
        } else if (this.pane2.visible == false) {
            p1Size = size + hSize;
            p2Size = hSize = 0;
            p2.style.display = "none";
            this._handlerEl.style.display = "none";
        }

        if (this.vertical) {
            mini.setWidth(p1, w);
            mini.setWidth(p2, w);

            mini.setHeight(p1, p1Size);
            mini.setHeight(p2, p2Size);

            p2.style.top = (p1Size + hSize) + "px";

            this._handlerEl.style.left = "0px";
            this._handlerEl.style.top = p1Size + "px";
            mini.setWidth(this._handlerEl, w);
            mini.setHeight(this._handlerEl, this.handlerSize);

            p1.style.left = "0px";
            p2.style.left = "0px";
        } else {

            mini.setWidth(p1, p1Size);
            mini.setWidth(p2, p2Size);

            mini.setHeight(p1, h);
            mini.setHeight(p2, h);
            p2.style.left = (p1Size + hSize) + "px";

            this._handlerEl.style.top = "0px";
            this._handlerEl.style.left = p1Size + "px";
            mini.setWidth(this._handlerEl, this.handlerSize);
            mini.setHeight(this._handlerEl, h);

            p1.style.top = "0px";
            p2.style.top = "0px";
        }


        var s = '<div class="mini-splitter-handler-buttons">';

        if (!this.pane1.expanded || !this.pane2.expanded) {
            if (!this.pane1.expanded) {
                if (this.pane1.showCollapseButton) {
                    s += '<a id="1" class="mini-splitter-pane2-button"></a>';
                }
            } else {
                if (this.pane2.showCollapseButton) {
                    s += '<a id="2" class="mini-splitter-pane1-button"></a>';
                }
            }
        } else {
            if (this.pane1.showCollapseButton) {
                s += '<a id="1" class="mini-splitter-pane1-button"></a>';
            }
            if (this.allowResize) {
                if ((!this.pane1.showCollapseButton && !this.pane2.showCollapseButton)
            ) {
                    s += '<span class="mini-splitter-resize-button"></span>';
                }
            }
            if (this.pane2.showCollapseButton) {
                s += '<a id="2" class="mini-splitter-pane2-button"></a>';
            }
        }
        s += '</div>';
        this._handlerEl.innerHTML = s;
        var buttons = this._handlerEl.firstChild;
        buttons.style.display = this.showHandleButton ? "" : "none";
        var box = mini.getBox(buttons);
        if (this.vertical) {
            buttons.style.marginLeft = -box.width / 2 + "px";
        } else {
            buttons.style.marginTop = -box.height / 2 + "px";
        }

        if (!this.pane1.visible || !this.pane2.visible || !this.pane1.expanded || !this.pane2.expanded) {
            mini.addClass(this._handlerEl, 'mini-splitter-nodrag');
        } else {
            mini.removeClass(this._handlerEl, 'mini-splitter-nodrag');
        }

        mini.layout(this._borderEl);

        this.fire("layout");
    },

    getPaneBox: function (index) {
        var el = this.getPaneEl(index);
        if (!el) return null;
        return mini.getBox(el);
    },
    getPane: function (index) {
        if (index == 1) return this.pane1;
        else if (index == 2) return this.pane2;
        return index;
    },








    setPanes: function (panes) {
        if (!mini.isArray(panes)) return;
        for (var i = 0; i < 2; i++) {
            var p = panes[i];
            this.updatePane(i + 1, p);
        }
    },
    setPaneControls: function (index, value) {
        var pane = this.getPane(index);
        if (!pane) return;
        var el = this.getPaneEl(index);
        __mini_setControls(value, el, this);
    },
    getPaneEl: function (index) {
        if (index == 1) return this._pane1El;
        return this._pane2El;
    },
    updatePane: function (index, options) {
        var pane = this.getPane(index);
        if (!pane) return;
        mini.copyTo(pane, options);

        var el = this.getPaneEl(index);


        var cs = pane.body;
        delete pane.body;
        if (cs) {
            if (!mini.isArray(cs)) cs = [cs];
            for (var i = 0, l = cs.length; i < l; i++) {
                mini.append(el, cs[i]);
            }
        }


        if (pane.bodyParent) {
            var p = pane.bodyParent;
            while (p.firstChild) {
                el.appendChild(p.firstChild);
            }
        }
        delete pane.bodyParent;

        el.id = pane.id;

        mini.setStyle(el, pane.style);
        mini.addClass(el, pane['class']);



        if (pane.controls) {
            var index = pane == this.pane1 ? 1 : 2;
            this.setPaneControls(index, pane.controls);
            delete pane.controls;
        }

        this.doUpdate();
    },
    setShowHandleButton: function (value) {
        this.showHandleButton = value;
        this.doUpdate();
    },
    getShowHandleButton: function (value) {
        return this.showHandleButton;
    },
    setVertical: function (value) {
        this.vertical = value;
        this.doUpdate();
    },
    getVertical: function () {
        return this.vertical;
    },
    expandPane: function (index) {
        var pane = this.getPane(index);
        if (!pane) return;
        pane.expanded = true;
        this.doUpdate();
        var e = { pane: pane, paneIndex: this.pane1 == pane ? 1 : 2 };
        this.fire("expand", e);
    },
    collapsePane: function (index) {

        var pane = this.getPane(index);
        if (!pane) return;
        pane.expanded = false;
        var pane2 = pane == this.pane1 ? this.pane2 : this.pane1;
        if (pane2.expanded == false) {
            pane2.expanded = true;
            pane2.visible = true;
        }
        this.doUpdate();

        var e = { pane: pane, paneIndex: this.pane1 == pane ? 1 : 2 };
        this.fire("collapse", e);
    },
    togglePane: function (index) {
        var pane = this.getPane(index);
        if (!pane) return;
        if (pane.expanded) {
            this.collapsePane(pane);
        } else {
            this.expandPane(pane);
        }
    },
    showPane: function (index) {
        var pane = this.getPane(index);
        if (!pane) return;
        pane.visible = true;
        this.doUpdate();
    },
    hidePane: function (index) {
        var pane = this.getPane(index);
        if (!pane) return;
        pane.visible = false;
        var pane2 = pane == this.pane1 ? this.pane2 : this.pane1;
        if (pane2.visible == false) {
            pane2.expanded = true;
            pane2.visible = true;
        }
        this.doUpdate();
    },
    setAllowResize: function (value) {
        if (this.allowResize != value) {
            this.allowResize = value;
            this.doLayout();
        }
    },
    getAllowResize: function () {
        return this.allowResize;
    },
    setHandlerSize: function (value) {
        if (this.handlerSize != value) {
            this.handlerSize = value;
            this.doLayout();
        }
    },
    getHandlerSize: function () {
        return this.handlerSize;
    },
    __OnClick: function (e) {
        var t = e.target;
        if (!mini.isAncestor(this._handlerEl, t)) return;
        var index = parseInt(t.id);
        var pane = this.getPane(index);

        var e = { pane: pane, paneIndex: index, cancel: false };
        if (pane.expanded) {
            this.fire("beforecollapse", e);
        } else {
            this.fire("beforeexpand", e);
        }
        if (e.cancel == true) return;

        if (t.className == "mini-splitter-pane1-button") {
            this.togglePane(index);
        } else if (t.className == "mini-splitter-pane2-button") {
            this.togglePane(index);
        }
    },
    _OnButtonClick: function (pane, htmlEvent) {
        this.fire("buttonclick", {
            pane: pane,
            index: this.pane1 == pane ? 1 : 2,
            htmlEvent: htmlEvent
        });
    },
    onButtonClick: function (fn, scope) {
        this.on("buttonclick", fn, scope);
    },


    __OnMouseDown: function (e) {
        var t = e.target;
        if (!this.allowResize) return;
        if (!this.pane1.visible || !this.pane2.visible || !this.pane1.expanded || !this.pane2.expanded) {
            return;
        }
        if (mini.isAncestor(this._handlerEl, t)) {

            if (t.className == "mini-splitter-pane1-button" || t.className == "mini-splitter-pane2-button") {

            } else {
                var drag = this._getDrag();
                drag.start(e);
            }
        }
    },
    _getDrag: function () {
        if (!this.drag) {
            this.drag = new mini.Drag({
                capture: true,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this.drag;
    },
    _OnDragStart: function (drag) {

        this.handlerBox = mini.getBox(this._handlerEl);

        this._maskProxy = mini.append(document.body, '<div class="mini-resizer-mask"></div>');

        this._dragProxy = mini.append(document.body, '<div class="mini-proxy"></div>');
        this._dragProxy.style.cursor = this.vertical ? "n-resize" : "w-resize";




        this.elBox = mini.getBox(this._borderEl, true);
        mini.setBox(this._dragProxy, this.handlerBox);

    },
    _OnDragMove: function (drag) {
        if (!this.handlerBox) return;
        if (!this.elBox) this.elBox = mini.getBox(this._borderEl, true);
        var w = this.elBox.width, h = this.elBox.height;
        var hSize = this.handlerSize;
        var size = this.vertical ? h - this.handlerSize : w - this.handlerSize;
        var p1Min = this.pane1.minSize, p1Max = this.pane1.maxSize;
        var p2Min = this.pane2.minSize, p2Max = this.pane2.maxSize;

        if (this.vertical == true) {
            var yOffset = drag.now[1] - drag.init[1];
            var y = this.handlerBox.y + yOffset;

            if (y - this.elBox.y > p1Max) y = this.elBox.y + p1Max;
            if (y + this.handlerBox.height < this.elBox.bottom - p2Max) {
                y = this.elBox.bottom - p2Max - this.handlerBox.height;
            }

            if (y - this.elBox.y < p1Min) y = this.elBox.y + p1Min;
            if (y + this.handlerBox.height > this.elBox.bottom - p2Min) {
                y = this.elBox.bottom - p2Min - this.handlerBox.height;
            }
            mini.setY(this._dragProxy, y);
        } else {
            var xOffset = drag.now[0] - drag.init[0];
            var x = this.handlerBox.x + xOffset;

            if (x - this.elBox.x > p1Max) x = this.elBox.x + p1Max;
            if (x + this.handlerBox.width < this.elBox.right - p2Max) {
                x = this.elBox.right - p2Max - this.handlerBox.width;
            }

            if (x - this.elBox.x < p1Min) x = this.elBox.x + p1Min;
            if (x + this.handlerBox.width > this.elBox.right - p2Min) {
                x = this.elBox.right - p2Min - this.handlerBox.width;
            }

            mini.setX(this._dragProxy, x);
        }
    },
    _OnDragStop: function (drag) {
        var w = this.elBox.width, h = this.elBox.height;
        var hSize = this.handlerSize;

        var p1SIZE = parseFloat(this.pane1.size), p2SIZE = parseFloat(this.pane2.size);

        var p1Null = isNaN(p1SIZE), p2Null = isNaN(p2SIZE);
        var p1Percent = !isNaN(p1SIZE) && this.pane1.size.indexOf("%") != -1;
        var p2Percent = !isNaN(p2SIZE) && this.pane2.size.indexOf("%") != -1;
        var p1Number = !p1Null && !p1Percent;
        var p2Number = !p2Null && !p2Percent;

        var size = this.vertical ? h - this.handlerSize : w - this.handlerSize;


        var box = mini.getBox(this._dragProxy);
        var p1Size = box.x - this.elBox.x, p2Size = size - p1Size;
        if (this.vertical) {
            p1Size = box.y - this.elBox.y;
            p2Size = size - p1Size;
        }

        if (p1Null || p2Null) {
            if (p1Null && p2Null) {
                p1SIZE = parseFloat(p1Size / size * 100).toFixed(1);
                this.pane1.size = p1SIZE + "%";
            } else if (p1Number) {
                p1SIZE = p1Size;
                this.pane1.size = p1SIZE;
            } else if (p1Percent) {
                p1SIZE = parseFloat(p1Size / size * 100).toFixed(1);
                this.pane1.size = p1SIZE + "%";
            } else if (p2Number) {
                p2SIZE = p2Size;
                this.pane2.size = p2SIZE;
            } else if (p2Percent) {
                p2SIZE = parseFloat(p2Size / size * 100).toFixed(1);
                this.pane2.size = p2SIZE + "%";
            }
        } else if (p1Percent && p2Number) {
            this.pane2.size = p2Size;
        } else if (p1Number && p2Percent) {
            this.pane1.size = p1Size;
        } else {
            this.pane1.size = parseFloat(p1Size / size * 100).toFixed(1);
            this.pane2.size = 100 - this.pane1.size;
        }

        jQuery(this._dragProxy).remove();
        jQuery(this._maskProxy).remove();

        this._maskProxy = null;
        this._dragProxy = null;
        this.elBox = this.handlerBox = null;

        this.doLayout();

        this.fire("resize");
    },

    getAttrs: function (el) {
        var attrs = mini.Splitter.superclass.getAttrs.call(this, el);

        mini._ParseBool(el, attrs,
            ["allowResize", "vertical", "showHandleButton", "onresize"
             ]
        );
        mini._ParseInt(el, attrs,
            ["handlerSize"
             ]
        );

        var panes = [];

        var nodes = mini.getChildNodes(el);
        for (var i = 0, l = 2; i < l; i++) {
            var node = nodes[i];
            var g = jQuery(node);

            var o = {};
            panes.push(o);
            if (!node) continue;
            o.style = node.style.cssText;
            mini._ParseString(node, o,
                ["cls", "size", "id", "class"
                 ]
            );
            mini._ParseBool(node, o,
                ["visible", "expanded", "showCollapseButton"
                 ]
            );
            mini._ParseInt(node, o,
                ["minSize", "maxSize", "handlerSize"
                 ]
            );




            o.bodyParent = node;
        }
        attrs.panes = panes;

        return attrs;
    }

});
mini.regClass(mini.Splitter, "splitter");


mini.Layout = function () {
    this.regions = [];
    this.regionMap = {};
    mini.Layout.superclass.constructor.call(this);
}
mini.extend(mini.Layout, mini.Control, {
    regions: [],
    splitSize: 5,
    collapseWidth: 28,
    collapseHeight: 25,
    regionWidth: 150,
    regionHeight: 80,
    regionMinWidth: 50,
    regionMinHeight: 25,
    regionMaxWidth: 2000,
    regionMaxHeight: 2000,

    uiCls: "mini-layout",
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-layout";
        this.el.innerHTML = '<div class="mini-layout-border"></div>';

        this._borderEl = this.el.firstChild;

        this.doUpdate();
    },
    _initEvents: function () {
        mini._BindEvents(function () {
            mini.on(this.el, "click", this.__OnClick, this);
            mini.on(this.el, "mousedown", this.__OnMouseDown, this);
            mini.on(this.el, "mouseover", this.__OnMouseOver, this);
            mini.on(this.el, "mouseout", this.__OnMouseOut, this);

            mini.on(document, "mousedown", this.__OnDocMouseDown, this);
        }, this);
    },

    getRegionEl: function (region) {
        var region = this.getRegion(region);
        if (!region) return null;
        return region._el;
    },
    getRegionHeaderEl: function (region) {
        var region = this.getRegion(region);
        if (!region) return null;
        return region._header;
    },
    getRegionBodyEl: function (region) {
        var region = this.getRegion(region);
        if (!region) return null;
        return region._body;
    },
    getRegionSplitEl: function (region) {
        var region = this.getRegion(region);
        if (!region) return null;
        return region._split
    },
    getRegionProxyEl: function (region) {
        var region = this.getRegion(region);
        if (!region) return null;
        return region._proxy;
    },
    getRegionBox: function (region) {
        var el = this.getRegionEl(region);
        if (el) return mini.getBox(el);
        return null;
    },
    getRegion: function (region) {
        if (typeof region == "string") return this.regionMap[region];
        return region;
    },
    _getButton: function (region, name) {
        var buttons = region.buttons;
        for (var i = 0, l = buttons.length; i < l; i++) {
            var button = buttons[i];
            if (button.name == name) return button;
        }
    },
    _createRegion: function (options) {

        var region = mini.copyTo({
            region: "", title: "", iconCls: "", iconStyle: "",

            showCloseButton: false, showCollapseButton: true,
            buttons: [
                { name: "close", cls: "mini-tools-close", html: "", visible: false },
                { name: "collapse", cls: "mini-tools-collapse", html: "", visible: true }
            ],
            showSplitIcon: false,
            showSplit: true,
            showHeader: true,
            splitSize: this.splitSize, collapseSize: this.collapseWidth,
            width: this.regionWidth, height: this.regionHeight,
            minWidth: this.regionMinWidth, minHeight: this.regionMinHeight,
            maxWidth: this.regionMaxWidth, maxHeight: this.regionMaxHeight,
            allowResize: true,

            cls: "", style: "",
            headerCls: "", headerStyle: "",
            bodyCls: "", bodyStyle: "",

            visible: true,
            expanded: true
        }, options);
        return region;
    },
    _CreateRegionEl: function (region) {
        var region = this.getRegion(region);
        if (!region) return;


        mini.append(this._borderEl, '<div id="' + region.region + '" class="mini-layout-region"><div class="mini-layout-region-header" style="' + region.headerStyle + '"></div><div class="mini-layout-region-body" style="' + region.bodyStyle + '"></div></div>');
        region._el = this._borderEl.lastChild;
        region._header = region._el.firstChild;
        region._body = region._el.lastChild;

        if (region.cls) mini.addClass(region._el, region.cls);
        if (region.style) mini.setStyle(region._el, region.style);

        mini.addClass(region._el, 'mini-layout-region-' + region.region);


        if (region.region != "center") {
            mini.append(this._borderEl, '<div uid="' + this.uid + '" id="' + region.region + '" class="mini-layout-split"><div class="mini-layout-spliticon"></div></div>');
            region._split = this._borderEl.lastChild;
            mini.addClass(region._split, 'mini-layout-split-' + region.region);
        }


        if (region.region != "center") {
            mini.append(this._borderEl, '<div id="' + region.region + '" class="mini-layout-proxy"></div>');
            region._proxy = this._borderEl.lastChild;
            mini.addClass(region._proxy, 'mini-layout-proxy-' + region.region);
        }

    },
    setRegionControls: function (region, value) {
        var region = this.getRegion(region);
        if (!region) return;
        var el = this.getRegionBodyEl(region);
        __mini_setControls(value, el, this);
    },
    setRegions: function (regions) {
        if (!mini.isArray(regions)) return;
        for (var i = 0, l = regions.length; i < l; i++) {
            this.addRegion(regions[i]);
        }

    },
    addRegion: function (region, index) {
        var r1 = region;
        region = this._createRegion(region);

        if (!region.region) region.region = "center";
        region.region = region.region.toLowerCase();
        if (region.region == "center" && r1 && !r1.showHeader) {
            region.showHeader = false;
        }
        if (region.region == "north" || region.region == "south") {
            if (!r1.collapseSize) {
                region.collapseSize = this.collapseHeight;
            }
        }

        this._measureRegion(region);

        if (typeof index != "number") index = this.regions.length;
        var r = this.regionMap[region.region];
        if (r) {

            return;
        }
        this.regions.insert(index, region);
        this.regionMap[region.region] = region;

        this._CreateRegionEl(region);

        var el = this.getRegionBodyEl(region);


        var cs = region.body;
        delete region.body;
        if (cs) {
            if (!mini.isArray(cs)) cs = [cs];
            for (var i = 0, l = cs.length; i < l; i++) {
                mini.append(el, cs[i]);
            }
        }


        if (region.bodyParent) {
            var p = region.bodyParent;
            while (p.firstChild) {
                el.appendChild(p.firstChild);
            }
        }
        delete region.bodyParent;


        if (region.controls) {
            this.setRegionControls(region, region.controls);
            delete region.controls;
        }

        this.doUpdate();
    },
    removeRegion: function (region) {
        var region = this.getRegion(region);
        if (!region) return;
        this.regions.remove(region);
        delete this.regionMap[region.region];

        jQuery(region._el).remove();
        jQuery(region._split).remove();
        jQuery(region._proxy).remove();

        this.doUpdate();
    },
    moveRegion: function (region, index) {
        var region = this.getRegion(region);
        if (!region) return;
        var t = this.regions[index];
        if (!t || t == region) return;
        this.regions.remove(region);
        var index = this.region.indexOf(t);
        this.regions.insert(index, region);
        this.doUpdate();
    },
    _measureRegion: function (region) {
        var button = this._getButton(region, "close");
        button.visible = region.showCloseButton;
        var button = this._getButton(region, "collapse");
        button.visible = region.showCollapseButton;

        if (region.width < region.minWidth) region.width = mini.minWidth;
        if (region.width > region.maxWidth) region.width = mini.maxWidth;
        if (region.height < region.minHeight) region.height = mini.minHeight;
        if (region.height > region.maxHeight) region.height = mini.maxHeight;
    },
    updateRegion: function (region, options) {
        region = this.getRegion(region);
        if (!region) return;
        if (options) delete options.region;
        mini.copyTo(region, options);

        this._measureRegion(region);

        this.doUpdate();
    },
    expandRegion: function (region) {
        region = this.getRegion(region);
        if (!region) return;
        region.expanded = true;
        this.doUpdate();
    },
    collapseRegion: function (region) {
        region = this.getRegion(region);
        if (!region) return;
        region.expanded = false;
        this.doUpdate();

    },
    toggleRegion: function (region) {
        region = this.getRegion(region);
        if (!region) return;
        if (region.expanded) {
            this.collapseRegion(region);
        } else {
            this.expandRegion(region);
        }
    },
    showRegion: function (region) {
        region = this.getRegion(region);
        if (!region) return;
        region.visible = true;
        this.doUpdate();
    },
    hideRegion: function (region) {
        region = this.getRegion(region);
        if (!region) return;
        region.visible = false;
        this.doUpdate();
    },
    isExpandRegion: function (region) {
        region = this.getRegion(region);
        if (!region) return null;
        return this.region.expanded;
    },
    isVisibleRegion: function (region) {
        region = this.getRegion(region);
        if (!region) return null;
        return this.region.visible;
    },
    _tryToggleRegion: function (region) {
        region = this.getRegion(region);

        var e = {
            region: region,
            cancel: false
        };
        if (region.expanded) {
            this.fire("BeforeCollapse", e);
            if (e.cancel == false) {
                this.collapseRegion(region);
            }
        } else {
            this.fire("BeforeExpand", e);
            if (e.cancel == false) {
                this.expandRegion(region);
            }
        }
    },

    _getProxyElByEvent: function (e) {
        var el = mini.findParent(e.target, 'mini-layout-proxy');
        return el;
    },
    _getRegionElByEvent: function (e) {
        var el = mini.findParent(e.target, 'mini-layout-region');
        return el;
    },
    __OnClick: function (e) {
        if (this._inAniming) return;
        var proxyEl = this._getProxyElByEvent(e);
        if (proxyEl) {
            var region = proxyEl.id;
            var collapseEl = mini.findParent(e.target, 'mini-tools-collapse');
            if (collapseEl) {
                this._tryToggleRegion(region);
            } else {
                this._VirtualToggle(region);
            }
        }

        var regionEl = this._getRegionElByEvent(e);
        if (regionEl && mini.findParent(e.target, 'mini-layout-region-header')) {
            var region = regionEl.id;
            var collapseEl = mini.findParent(e.target, 'mini-tools-collapse');
            if (collapseEl) {
                this._tryToggleRegion(region);
            }
            var closeEl = mini.findParent(e.target, 'mini-tools-close');
            if (closeEl) {
                this.updateRegion(region, { visible: false });
            }
        }
        if (mini.hasClass(e.target, 'mini-layout-spliticon')) {
            var region = e.target.parentNode.id;
            this._tryToggleRegion(region);
        }

    },
    _OnButtonClick: function (region, button, htmlEvent) {
        this.fire("buttonclick", {
            htmlEvent: htmlEvent,
            region: region,
            button: button,
            index: this.buttons.indexOf(button),
            name: button.name
        });
    },
    _OnButtonMouseDown: function (region, button, htmlEvent) {
        this.fire("buttonmousedown", {
            htmlEvent: htmlEvent,
            region: region,
            button: button,
            index: this.buttons.indexOf(button),
            name: button.name
        });
    },
    hoverProxyEl: null,
    __OnMouseOver: function (e) {
        var proxyEl = this._getProxyElByEvent(e);
        if (proxyEl) {
            mini.addClass(proxyEl, 'mini-layout-proxy-hover');
            this.hoverProxyEl = proxyEl;
        }
    },
    __OnMouseOut: function (e) {
        if (this.hoverProxyEl) {
            mini.removeClass(this.hoverProxyEl, 'mini-layout-proxy-hover');
        }
        this.hoverProxyEl = null;
    },

    onButtonClick: function (fn, scope) {
        this.on("buttonclick", fn, scope);
    },
    onButtonMouseDown: function (fn, scope) {
        this.on("buttonmousedown", fn, scope);
    }

});

mini.copyTo(mini.Layout.prototype, {
    _createHeader: function (region, proxy) {
        var s = '<div class="mini-tools">';
        if (proxy) {
            s += '<span class="mini-tools-collapse"></span>';
        } else {
            for (var i = region.buttons.length - 1; i >= 0; i--) {
                var button = region.buttons[i];
                s += '<span class="' + button.cls + '" style="'
                s += button.style + ';' + (button.visible ? "" : "display:none;") + '">' + button.html + '</span>';
            }
        }
        s += '</div>';

        s += '<div class="mini-layout-region-icon ' + region.iconCls + '" style="' + region.iconStyle + ';' + ((region.iconStyle || region.iconCls) ? "" : "display:none;") + '"></div>';
        s += '<div class="mini-layout-region-title">' + region.title + '</div>';
        return s;
    },
    doUpdate: function () {
        for (var i = 0, l = this.regions.length; i < l; i++) {
            var region = this.regions[i];
            var type = region.region;
            var el = region._el, split = region._split, proxy = region._proxy;

            if (region.cls) mini.addClass(el, region.cls);

            region._header.style.display = region.showHeader ? "" : "none";
            region._header.innerHTML = this._createHeader(region);
            if (region._proxy) region._proxy.innerHTML = this._createHeader(region, true);

            if (split) {
                mini.removeClass(split, 'mini-layout-split-nodrag');
                if (region.expanded == false || !region.allowResize) {
                    mini.addClass(split, 'mini-layout-split-nodrag')
                }
            }

        }

        this.doLayout();
    },
    doLayout: function () {

        if (!this.canLayout()) {

            return;
        }

        if (this._inAniming) {

            return;
        }

        var h = mini.getHeight(this.el, true);
        var w = mini.getWidth(this.el, true);
        var box = { x: 0, y: 0, width: w, height: h };

        var regions = this.regions.clone();
        var center = this.getRegion("center");
        regions.remove(center);
        if (center) {
            regions.push(center);
        }

        for (var i = 0, l = regions.length; i < l; i++) {
            var region = regions[i];
            region._Expanded = false;
            mini.removeClass(region._el, "mini-layout-popup");

            var type = region.region;
            var el = region._el, split = region._split, proxy = region._proxy;
            if (region.visible == false) {
                el.style.display = "none";
                if (type != "center") split.style.display = proxy.style.display = "none";
                continue;
            }
            el.style.display = "";
            if (type != "center") split.style.display = proxy.style.display = "";

            var x = box.x, y = box.y, w = box.width, h = box.height;
            var cw = region.width, ch = region.height;

            if (!region.expanded) {
                if (type == "west" || type == "east") {
                    cw = region.collapseSize;
                    mini.setWidth(el, region.width);
                } else if (type == "north" || type == "south") {
                    ch = region.collapseSize;
                    mini.setHeight(el, region.height);
                }
            }

            switch (type) {
                case "north":
                    h = ch;
                    box.y += ch;
                    box.height -= ch;
                    break;
                case "south":
                    h = ch;
                    y = box.y + box.height - ch;
                    box.height -= ch;
                    break;
                case "west":
                    w = cw;
                    box.x += cw;
                    box.width -= cw;
                    break;
                case "east":
                    w = cw;
                    x = box.x + box.width - cw;
                    box.width -= cw;
                    break;
                case "center":
                    break;
                default:
                    continue;
            }
            if (w < 0) w = 0;
            if (h < 0) h = 0;


            if (type == "west" || type == "east") {
                mini.setHeight(el, h);
            }
            if (type == "north" || type == "south") {
                mini.setWidth(el, w);
            }

            var style = "left:" + x + "px;top:" + y + "px;";
            var d = el;
            if (!region.expanded) {
                d = proxy;
                el.style.top = "-100px";
                el.style.left = "-1500px";
            } else {
                if (proxy) {
                    proxy.style.left = "-1500px";
                    proxy.style.top = "-100px";
                }
            }
            d.style.left = x + "px";
            d.style.top = y + "px";
            mini.setWidth(d, w);
            mini.setHeight(d, h);


            var regionH = jQuery(region._el).height()
            var headerH = region.showHeader ? jQuery(region._header).outerHeight() : 0;
            mini.setHeight(region._body, regionH - headerH);


            if (type == "center") continue;

            cw = ch = region.splitSize;
            var x = box.x, y = box.y, w = box.width, h = box.height;
            switch (type) {
                case "north":
                    h = ch;
                    box.y += ch;
                    box.height -= ch;
                    break;
                case "south":
                    h = ch;
                    y = box.y + box.height - ch;
                    box.height -= ch;
                    break;
                case "west":
                    w = cw;
                    box.x += cw;
                    box.width -= cw;
                    break;
                case "east":
                    w = cw;
                    x = box.x + box.width - cw;
                    box.width -= cw;
                    break;
                case "center":
                    break;
            }
            if (w < 0) w = 0;
            if (h < 0) h = 0;


            split.style.left = x + "px";
            split.style.top = y + "px";
            mini.setWidth(split, w);
            mini.setHeight(split, h);

            if (region.showSplit && region.expanded && region.allowResize == true) {
                mini.removeClass(split, 'mini-layout-split-nodrag');
            } else {
                mini.addClass(split, 'mini-layout-split-nodrag');
            }



            split.firstChild.style.display = region.showSplitIcon ? "block" : "none";
            if (region.expanded) {
                mini.removeClass(split.firstChild, 'mini-layout-spliticon-collapse');
            } else {
                mini.addClass(split.firstChild, 'mini-layout-spliticon-collapse');
            }
        }
        mini.layout(this._borderEl);

        this.fire("layout");
    },


    __OnMouseDown: function (e) {
        if (this._inAniming) return;
        if (mini.findParent(e.target, "mini-layout-split")) {
            var uid = jQuery(e.target).attr("uid");
            if (uid != this.uid) return;
            var region = this.getRegion(e.target.id);
            if (region.expanded == false || !region.allowResize || !region.showSplit) return;
            this.dragRegion = region;
            var drag = this._getDrag();
            drag.start(e);
        }
    },
    _getDrag: function () {
        if (!this.drag) {
            this.drag = new mini.Drag({
                capture: true,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this.drag;
    },
    _OnDragStart: function (drag) {
        this._maskProxy = mini.append(document.body, '<div class="mini-resizer-mask"></div>');

        this._dragProxy = mini.append(document.body, '<div class="mini-proxy"></div>');
        this._dragProxy.style.cursor = "n-resize";
        if (this.dragRegion.region == "west" || this.dragRegion.region == "east") {
            this._dragProxy.style.cursor = "w-resize";
        }

        this.splitBox = mini.getBox(this.dragRegion._split);
        mini.setBox(this._dragProxy, this.splitBox);

        this.elBox = mini.getBox(this.el, true);
    },
    _OnDragMove: function (drag) {
        var xOffset = drag.now[0] - drag.init[0];
        var x = this.splitBox.x + xOffset;
        var yOffset = drag.now[1] - drag.init[1];
        var y = this.splitBox.y + yOffset;
        var right = x + this.splitBox.width;
        var bottom = y + this.splitBox.height;

        var west = this.getRegion("west"),
            east = this.getRegion("east"),
            north = this.getRegion("north"),
            south = this.getRegion("south"),
            center = this.getRegion("center");
        var westWidth = west && west.visible ? west.width : 0;
        var eastWidth = east && east.visible ? east.width : 0;
        var northHeight = north && north.visible ? north.height : 0;
        var southHeight = south && south.visible ? south.height : 0;
        var westSplitWidth = west && west.showSplit ? mini.getWidth(west._split) : 0;
        var eastSplitWidth = east && east.showSplit ? mini.getWidth(east._split) : 0;
        var northSplitHeight = north && north.showSplit ? mini.getHeight(north._split) : 0;
        var southSplitHeight = south && south.showSplit ? mini.getHeight(south._split) : 0;

        var region = this.dragRegion, type = region.region;
        if (type == "west") {
            var maxWidth = this.elBox.width - eastWidth - eastSplitWidth - westSplitWidth - center.minWidth;
            if (x - this.elBox.x > maxWidth) x = maxWidth + this.elBox.x;

            if (x - this.elBox.x < region.minWidth) x = region.minWidth + this.elBox.x;
            if (x - this.elBox.x > region.maxWidth) x = region.maxWidth + this.elBox.x;

            mini.setX(this._dragProxy, x);
        } else if (type == "east") {
            var maxWidth = this.elBox.width - westWidth - westSplitWidth - eastSplitWidth - center.minWidth;
            if (this.elBox.right - (x + this.splitBox.width) > maxWidth) {
                x = this.elBox.right - maxWidth - this.splitBox.width;
            }

            if (this.elBox.right - (x + this.splitBox.width) < region.minWidth) {
                x = this.elBox.right - region.minWidth - this.splitBox.width;
            }
            if (this.elBox.right - (x + this.splitBox.width) > region.maxWidth) {
                x = this.elBox.right - region.maxWidth - this.splitBox.width;
            }

            mini.setX(this._dragProxy, x);
        } else if (type == "north") {
            var maxHeight = this.elBox.height - southHeight - southSplitHeight - northSplitHeight - center.minHeight;
            if (y - this.elBox.y > maxHeight) y = maxHeight + this.elBox.y;

            if (y - this.elBox.y < region.minHeight) y = region.minHeight + this.elBox.y;
            if (y - this.elBox.y > region.maxHeight) y = region.maxHeight + this.elBox.y;

            mini.setY(this._dragProxy, y);
        } else if (type == "south") {
            var maxHeight = this.elBox.height - northHeight - northSplitHeight - southSplitHeight - center.minHeight;
            if (this.elBox.bottom - (y + this.splitBox.height) > maxHeight) {
                y = this.elBox.bottom - maxHeight - this.splitBox.height;
            }

            if (this.elBox.bottom - (y + this.splitBox.height) < region.minHeight) {
                y = this.elBox.bottom - region.minHeight - this.splitBox.height;
            }
            if (this.elBox.bottom - (y + this.splitBox.height) > region.maxHeight) {
                y = this.elBox.bottom - region.maxHeight - this.splitBox.height;
            }

            mini.setY(this._dragProxy, y);
        }
    },
    _OnDragStop: function (drag) {
        var box = mini.getBox(this._dragProxy);

        var region = this.dragRegion, type = region.region;
        if (type == "west") {
            var width = box.x - this.elBox.x;
            this.updateRegion(region, { width: width });
        } else if (type == "east") {
            var width = this.elBox.right - box.right;
            this.updateRegion(region, { width: width });
        } else if (type == "north") {
            var height = box.y - this.elBox.y;
            this.updateRegion(region, { height: height });
        } else if (type == "south") {
            var height = this.elBox.bottom - box.bottom;
            this.updateRegion(region, { height: height });
        }

        jQuery(this._dragProxy).remove();
        this._dragProxy = null;
        this.elBox = this.handlerBox = null;

        jQuery(this._maskProxy).remove();
        this._maskProxy = null;
    },


    _VirtualToggle: function (region) {
        region = this.getRegion(region);

        if (region._Expanded === true) {
            this._VirtualCollapse(region);
        } else {
            this._VirtualExpand(region);
        }
    },
    _VirtualExpand: function (region) {
        if (this._inAniming) return;

        this.doLayout();

        var type = region.region, el = region._el;
        region._Expanded = true;
        mini.addClass(el, "mini-layout-popup");
        var proxyBox = mini.getBox(region._proxy);
        var box = mini.getBox(region._el);

        var config = {};
        if (type == "east") {
            var x = proxyBox.x;
            var y = proxyBox.y;
            var h = proxyBox.height;

            mini.setHeight(el, h);
            mini.setX(el, x);
            el.style.top = region._proxy.style.top;

            var left = parseInt(el.style.left);
            config = { left: left - box.width };
        } else if (type == "west") {
            var x = proxyBox.right - box.width;
            var y = proxyBox.y;
            var h = proxyBox.height;

            mini.setHeight(el, h);
            mini.setX(el, x);
            el.style.top = region._proxy.style.top;


            var left = parseInt(el.style.left);
            config = { left: left + box.width };
        } else if (type == "north") {
            var x = proxyBox.x;
            var y = proxyBox.bottom - box.height;
            var w = proxyBox.width;

            mini.setWidth(el, w);
            mini.setXY(el, x, y);

            var top = parseInt(el.style.top);
            config = { top: top + box.height };
        } else if (type == "south") {
            var x = proxyBox.x;
            var y = proxyBox.y;
            var w = proxyBox.width;

            mini.setWidth(el, w);
            mini.setXY(el, x, y);

            var top = parseInt(el.style.top);
            config = { top: top - box.height };
        }

        mini.addClass(region._proxy, "mini-layout-maxZIndex");
        this._inAniming = true;
        var sf = this;
        var jq = jQuery(el);
        jq.animate(
            config,
            250,
            function () {
                mini.removeClass(region._proxy, "mini-layout-maxZIndex");
                sf._inAniming = false;
            }
        );
    },
    _VirtualCollapse: function (region) {
        if (this._inAniming) return;
        region._Expanded = false;
        var type = region.region, el = region._el;

        var box = mini.getBox(el);

        var config = {};
        if (type == "east") {
            var left = parseInt(el.style.left);
            config = { left: left + box.width };
        } else if (type == "west") {
            var left = parseInt(el.style.left);
            config = { left: left - box.width };
        } else if (type == "north") {
            var top = parseInt(el.style.top);
            config = { top: top - box.height };
        } else if (type == "south") {
            var top = parseInt(el.style.top);
            config = { top: top + box.height };
        }

        mini.addClass(region._proxy, "mini-layout-maxZIndex");
        this._inAniming = true;
        var sf = this;
        var jq = jQuery(el);
        jq.animate(
            config,
            250,
            function () {
                mini.removeClass(region._proxy, "mini-layout-maxZIndex");
                sf._inAniming = false;
                sf.doLayout();
            }
        );
    },
    __OnDocMouseDown: function (e) {
        if (this._inAniming) return;
        for (var i = 0, l = this.regions.length; i < l; i++) {
            var region = this.regions[i];
            if (!region._Expanded) continue;
            if (mini.isAncestor(region._el, e.target)
              || mini.isAncestor(region._proxy, e.target)
              ) {

            } else {
                this._VirtualCollapse(region);
            }
        }
    },

    getAttrs: function (el) {
        var attrs = mini.Layout.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        var splitSize = parseInt(jq.attr("splitSize"));
        if (!isNaN(splitSize)) {
            attrs.splitSize = splitSize;
        }

        var regions = [];
        var nodes = mini.getChildNodes(el);
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];

            var o = {};
            regions.push(o);

            o.cls = node.className;

            o.style = node.style.cssText;
            mini._ParseString(node, o,
                ["region", "title", "iconCls", "iconStyle", "cls", "headerCls", "headerStyle",
                    "bodyCls", "bodyStyle"
                 ]
            );
            mini._ParseBool(node, o,
                ["allowResize", "visible", "showCloseButton", "showCollapseButton", "showSplit", "showHeader", "expanded",
                "showSplitIcon"
                 ]
            );
            mini._ParseInt(node, o,
                ["splitSize", "collapseSize", "width", "height", "minWidth", "minHeight"
                , "maxWidth", "maxHeight"
                 ]
            );



            o.bodyParent = node;
        }
        attrs.regions = regions;

        return attrs;
    }
});
mini.regClass(mini.Layout, "layout");


mini.Box = function () {
    mini.Box.superclass.constructor.call(this);


}
mini.extend(mini.Box, mini.Container, {

    style: "",
    borderStyle: "",
    bodyStyle: "",

    uiCls: "mini-box",
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-box";
        this.el.innerHTML = '<div class="mini-box-border"></div>';
        this._bodyEl = this._borderEl = this.el.firstChild;

        this._contentEl = this._bodyEl;
    },
    _initEvents: function () {

    },
    doLayout: function () {
        if (!this.canLayout()) return;


        var autoHeight = this.isAutoHeight();

        var autoWidth = this.isAutoWidth();

        var padding = mini.getPaddings(this._bodyEl);
        var margin = mini.getMargins(this._bodyEl);

        if (!autoHeight) {

            var h = this.getHeight(true);
            if (jQuery.boxModel) {

                h = h - padding.top - padding.bottom;
            }
            h = h - margin.top - margin.bottom;
            if (h < 0) h = 0;
            this._bodyEl.style.height = h + "px";
        } else {
            this._bodyEl.style.height = "";
        }

        var w = this.getWidth(true);
        var elWidth = w;
        w = w - margin.left - margin.right;
        if (jQuery.boxModel) {
            w = w - padding.left - padding.right;
        }
        if (w < 0) w = 0;
        this._bodyEl.style.width = w + "px";


        mini.layout(this._borderEl);

        this.fire("layout");
    },
    setBody: function (value) {
        if (!value) return;
        if (!mini.isArray(value)) value = [value];
        for (var i = 0, l = value.length; i < l; i++) {
            mini.append(this._bodyEl, value[i]);
        }
        mini.parse(this._bodyEl);
        this.doLayout();
    },
    set_bodyParent: function (value) {

        if (!value) return;

        var el = this._bodyEl;

        var p = value;
        while (p.firstChild) {
            el.appendChild(p.firstChild);
        }
        this.doLayout();
    },
    setBodyStyle: function (value) {
        mini.setStyle(this._bodyEl, value);
        this.doLayout();
    },


    getAttrs: function (el) {
        var attrs = mini.Box.superclass.getAttrs.call(this, el);


        attrs._bodyParent = el;

        mini._ParseString(el, attrs,
            ["bodyStyle"
             ]
        );

        return attrs;
    }
});
mini.regClass(mini.Box, "box");


mini.Include = function () {
    mini.Include.superclass.constructor.call(this);
}
mini.extend(mini.Include, mini.Control, {

    url: "",


    uiCls: "mini-include",
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-include";
    },
    _initEvents: function () {

    },
    doLayout: function () {
        if (!this.canLayout()) return;

        var cs = this.el.childNodes;
        if (cs) {
            for (var i = 0, l = cs.length; i < l; i++) {
                var cel = cs[i];
                mini.layout(cel);
            }
        }
    },
    setUrl: function (value) {
        this.url = value;
        mini.update({
            url: this.url,
            el: this.el,
            async: this.async
        });

        this.doLayout();
    },
    getUrl: function (value) {
        return this.url;
    },







    getAttrs: function (el) {
        var attrs = mini.Include.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["url"
             ]
        );

        return attrs;
    }
});
mini.regClass(mini.Include, "include");


mini.Tabs = function () {
    this._initTabs();
    mini.Tabs.superclass.constructor.call(this);
}
mini.extend(mini.Tabs, mini.Control, {
    activeIndex: -1,
    tabAlign: "left",
    tabPosition: "top",
    showBody: true,

    nameField: "name",
    titleField: "title",
    urlField: "url",

    url: "",
    maskOnLoad: true,

    plain: true,





    bodyStyle: "",

    _tabHoverCls: "mini-tab-hover",
    _tabActiveCls: "mini-tab-active",

    set: function (obj) {
        if (typeof obj == 'string') {
            return this;
        }

        var _allowLayout = this._allowLayout;
        this._allowLayout = false;

        var activeIndex = obj.activeIndex;
        delete obj.activeIndex;

        var url = obj.url;
        delete obj.url;

        mini.Tabs.superclass.set.call(this, obj);

        if (url) {
            this.setUrl(url);
        }
        if (mini.isNumber(activeIndex)) {
            this.setActiveIndex(activeIndex);
        }

        this._allowLayout = _allowLayout;
        this.doLayout();

        return this;
    },

    uiCls: "mini-tabs",
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-tabs";

        var s = '<table class="mini-tabs-table" cellspacing="0" cellpadding="0"><tr style="width:100%;">'
                    + '<td></td>'
                    + '<td style="text-align:left;vertical-align:top;width:100%;"><div class="mini-tabs-bodys"></div></td>'
                    + '<td></td>'
                + '</tr></table>';
        this.el.innerHTML = s;
        this._tableEl = this.el.firstChild;

        var tds = this.el.getElementsByTagName("td");
        this._td1El = tds[0];
        this._td2El = tds[1];
        this._td3El = tds[2];

        this._bodyEl = this._td2El.firstChild;
        this._borderEl = this._bodyEl;
        this.doUpdate();
    },
    destroy: function (removeEl) {
        this._tableEl = this._td1El = this._td2El = this._td3El = null;
        this._bodyEl = this._borderEl = this.headerEl = null;
        this.tabs = [];
        mini.Tabs.superclass.destroy.call(this, removeEl);
    },










    _doClearElement: function () {
        mini.removeClass(this._td1El, "mini-tabs-header");
        mini.removeClass(this._td3El, "mini-tabs-header");
        this._td1El.innerHTML = '';
        this._td3El.innerHTML = '';

        mini.removeChilds(this._td2El, this._bodyEl);
    },
    _initEvents: function () {
        mini._BindEvents(function () {
            mini.on(this.el, "mousedown", this.__OnMouseDown, this);
            mini.on(this.el, "click", this.__OnClick, this);
            mini.on(this.el, "mouseover", this.__OnMouseOver, this);
            mini.on(this.el, "mouseout", this.__OnMouseOut, this);
        }, this);

    },

    _initTabs: function () {
        this.tabs = [];
    },
    _TabID: 1,

    createTab: function (options) {
        var tab = mini.copyTo({
            _id: this._TabID++,
            name: "",
            title: "",

            newLine: false,

            iconCls: "",
            iconStyle: "",
            headerCls: "",
            headerStyle: "",
            bodyCls: "",
            bodyStyle: "",

            visible: true,
            enabled: true,
            showCloseButton: false,
            active: false,

            url: "",
            loaded: false,
            refreshOnClick: false

        }, options);
        if (options) {
            options = mini.copyTo(options, tab);
            tab = options;
        }
        return tab;
    },

    _doLoad: function () {

        var tabs = mini.getData(this.url);

        if (this.dataField) {
            tabs = mini._getMap(this.dataField, tabs);
        }
        if (!tabs) tabs = [];

        this.setTabs(tabs);
        this.fire("load");
    },

    load: function (url) {
        if (typeof url == "string") {
            this.setUrl(url);
        } else {
            this.setTabs(url);
        }
    },
    setUrl: function (value) {
        this.url = value;

        this._doLoad();
    },
    getUrl: function () {
        return this.url;
    },

    setNameField: function (value) {
        this.nameField = value;
    },
    getNameField: function () {
        return this.nameField;
    },
    setTitleField: function (value) {
        this.titleField = value;
    },
    getTitleField: function () {
        return this.titleField;
    },
    setUrlField: function (value) {
        this.urlField = value;
    },
    getUrlField: function () {
        return this.urlField;
    },
    setTabControls: function (tab, value) {
        var tab = this.getTab(tab);
        if (!tab) return;
        var el = this.getTabBodyEl(tab);
        __mini_setControls(value, el, this);
    },
    setTabs: function (tabs) {
        if (!mini.isArray(tabs)) return;
        this.beginUpdate();

        this.removeAll();


        for (var i = 0, l = tabs.length; i < l; i++) {
            var tab = tabs[i];
            tab.title = mini._getMap(this.titleField, tab);
            tab.url = mini._getMap(this.urlField, tab);
            tab.name = mini._getMap(this.nameField, tab);
        }

        for (var i = 0, l = tabs.length; i < l; i++) {
            this.addTab(tabs[i]);
        }
        this.setActiveIndex(0);
        this.endUpdate();
    },
    getTabs: function () {
        return this.tabs;
    },
    removeAll: function (butTabs) {
        var activeTab = this.getActiveTab();
        if (mini.isNull(butTabs)) butTabs = [];
        if (!mini.isArray(butTabs)) {
            butTabs = [butTabs];
        }
        for (var i = butTabs.length - 1; i >= 0; i--) {
            var t = this.getTab(butTabs[i]);
            if (!t) butTabs.removeAt(i);
            else butTabs[i] = t;
        }

        var olds = this.tabs;
        for (var i = olds.length - 1; i >= 0; i--) {
            var tab = olds[i];
            if (butTabs.indexOf(tab) == -1) {
                this.removeTab(tab);
            }
        }
        var butTab = butTabs[0];
        if (activeTab != this.getActiveTab()) {
            if (butTab) this.activeTab(butTab);
        }
    },
    addTab: function (tab, index) {
        if (typeof tab == "string") {
            tab = { title: tab };
        }
        tab = this.createTab(tab);
        if (!tab.name) tab.name = "";

        if (typeof index != "number") index = this.tabs.length;
        this.tabs.insert(index, tab);


        var bodyId = this._createTabBodyId(tab);
        var s = '<div id="' + bodyId + '" class="mini-tabs-body ' + tab.bodyCls + '" style="' + tab.bodyStyle + ';display:none;"></div>';
        mini.append(this._bodyEl, s);

        var el = this.getTabBodyEl(tab);


        var cs = tab.body;
        delete tab.body;
        if (cs) {
            if (!mini.isArray(cs)) cs = [cs];
            for (var i = 0, l = cs.length; i < l; i++) {
                mini.append(el, cs[i]);
            }
        }


        if (tab.bodyParent) {
            var p = tab.bodyParent;
            while (p.firstChild) {
                el.appendChild(p.firstChild);
            }
        }
        delete tab.bodyParent;


        if (tab.controls) {
            this.setTabControls(tab, tab.controls);
            delete tab.controls;
        }

        this.doUpdate();
        return tab;
    },
    removeTab: function (tab) {
        tab = this.getTab(tab);
        if (!tab || this.tabs.indexOf(tab) == -1) return;

        var acTab = this.getActiveTab();

        var isActive = tab == acTab;

        var autoActive = this._OnTabDestroy(tab);

        this.tabs.remove(tab);


        this._doRemoveIFrame(tab);

        var el = this.getTabBodyEl(tab);
        if (el) this._bodyEl.removeChild(el);

        if (autoActive && isActive) {
            for (var i = this.activeIndex; i >= 0; i--) {
                var tab = this.getTab(i);
                if (tab && tab.enabled && tab.visible) {
                    this.activeIndex = i;
                    break;
                }
            }
            this.doUpdate();
            this.setActiveIndex(this.activeIndex);
            this.fire("activechanged");
        } else {
            this.activeIndex = this.tabs.indexOf(acTab);
            this.doUpdate();
        }
        return tab;
    },
    moveTab: function (tab, index) {
        tab = this.getTab(tab);
        if (!tab) return;

        var t = this.tabs[index];
        if (!t || t == tab) return;
        this.tabs.remove(tab);
        var index = this.tabs.indexOf(t);
        this.tabs.insert(index, tab);
        this.doUpdate();
    },
    updateTab: function (tab, options) {
        tab = this.getTab(tab);
        if (!tab) return;
        mini.copyTo(tab, options);
        this.doUpdate();
    },

    _getMaskWrapEl: function () {
        return this._bodyEl;
    },
    _doRemoveIFrame: function (tab, removeAll) {

        if (tab._iframeEl && tab._iframeEl.parentNode) {
            tab._iframeEl.src = "";
            try {
                iframe.contentWindow.document.write("");
                iframe.contentWindow.document.close();
            } catch (ex) { }
            if (tab._iframeEl._ondestroy) tab._iframeEl._ondestroy();
            try {
                tab._iframeEl.parentNode.removeChild(tab._iframeEl);
                tab._iframeEl.removeNode(true);
            } catch (ex) { }
        }
        tab._iframeEl = null;
        tab.loadedUrl = null;

        if (removeAll === true) {
            var bodyEl = this.getTabBodyEl(tab);
            if (bodyEl) {
                var cs = mini.getChildNodes(bodyEl, true);
                for (var i = 0, l = cs.length; i < l; i++) {
                    var d = cs[i];
                    if (d && d.parentNode) d.parentNode.removeChild(d);
                }
            }
        }
    },
    _deferLoadingTime: 180,
    _cancelLoadTabs: function (tab) {

        var tabs = this.tabs;
        for (var i = 0, l = tabs.length; i < l; i++) {
            var t = tabs[i];
            if (t != tab) {
                if (t._loading && t._iframeEl) {
                    t._loading = false;
                    this._doRemoveIFrame(t, true);
                }
            }
        }
        this._loading = false;
        this.unmask();
    },
    _doLoadTab: function (tab) {
        if (!tab) return;
        var bodyEl = this.getTabBodyEl(tab);
        if (!bodyEl) return;

        this._cancelLoadTabs();

        this._doRemoveIFrame(tab, true);

        this._loading = true;
        tab._loading = true;


        this.unmask();
        if (this.maskOnLoad) this.loading();
        var st = new Date();

        var sf = this;


        sf.isLoading = true;




        var iframe = mini.createIFrame(tab.url,
            function (_iframe, firstLoad) {

                try {
                    tab._iframeEl.contentWindow.Owner = window;
                    tab._iframeEl.contentWindow.CloseOwnerWindow = function (action) {

                        tab.removeAction = action;

                        var ret = true;
                        if (tab.ondestroy) {
                            if (typeof tab.ondestroy == "string") {
                                tab.ondestroy = window[tab.ondestroy];
                            }
                            if (tab.ondestroy) {
                                ret = tab.ondestroy.call(this, e);
                            }
                        }
                        if (ret === false) {
                            return false;
                        }

                        setTimeout(function () {
                            sf.removeTab(tab);
                        }, 10);
                    }
                } catch (e) { }

                if (tab._loading != true) return;
                var t = (st - new Date()) + sf._deferLoadingTime;

                tab._loading = false;
                tab.loadedUrl = tab.url;

                if (t < 0) t = 0;
                setTimeout(function () {
                    sf.unmask();
                    sf.doLayout();
                    sf.isLoading = false;
                }, t);


                if (firstLoad) {
                    var e = {
                        sender: sf,
                        tab: tab,
                        index: sf.tabs.indexOf(tab),
                        name: tab.name,
                        iframe: tab._iframeEl
                    };
                    if (tab.onload) {
                        if (typeof tab.onload == "string") {
                            tab.onload = window[tab.onload];
                        }
                        if (tab.onload) {
                            tab.onload.call(sf, e);
                        }
                    }
                }

                sf.fire("tabload", e);
            }
        );
        setTimeout(function () {
            if (tab._iframeEl == iframe) {
                bodyEl.appendChild(iframe);
            }

        }, 1);
        tab._iframeEl = iframe;
    },
    _OnTabDestroy: function (tab) {
        var e = {
            sender: this,
            tab: tab,
            index: this.tabs.indexOf(tab),
            name: tab.name,
            iframe: tab._iframeEl,
            autoActive: true
        };
        this.fire("tabdestroy", e);
        return e.autoActive;
    },
    loadTab: function (url, tab, onload, ondestroy) {
        if (!url) return;
        tab = this.getTab(tab);
        if (!tab) tab = this.getActiveTab();
        if (!tab) return;

        var el = this.getTabBodyEl(tab);
        if (el) {
            mini.addClass(el, 'mini-tabs-hideOverflow');
        }

        tab.url = url;
        delete tab.loadedUrl;

        if (onload) tab.onload = onload;
        if (ondestroy) tab.ondestroy = ondestroy;

        var me = this;
        clearTimeout(this._loadTabTimer);
        this._loadTabTimer = null;
        this._loadTabTimer = setTimeout(function () {
            me._doLoadTab(tab);
        }, 1);
    },
    reloadTab: function (tab) {
        tab = this.getTab(tab);
        if (!tab) tab = this.getActiveTab();
        if (!tab) return;
        this.loadTab(tab.url, tab);
    },

    getTabRows: function () {
        var rows = [];
        var row = [];
        for (var i = 0, l = this.tabs.length; i < l; i++) {
            var tab = this.tabs[i];
            if (i != 0 && tab.newLine) {
                rows.push(row);
                row = [];
            }
            row.push(tab);
        }
        rows.push(row);
        return rows;
    },
    doUpdate: function () {

        if (this._allowUpdate === false) return;

        mini.removeClass(this.el, "mini-tabs-position-left");
        mini.removeClass(this.el, "mini-tabs-position-top");
        mini.removeClass(this.el, "mini-tabs-position-right");
        mini.removeClass(this.el, "mini-tabs-position-bottom");

        if (this.tabPosition == "bottom") {
            mini.addClass(this.el, "mini-tabs-position-bottom");
            this._doUpdateBottom();
        } else if (this.tabPosition == "right") {
            mini.addClass(this.el, "mini-tabs-position-right");
            this._doUpdateRight();
        } else if (this.tabPosition == "left") {
            mini.addClass(this.el, "mini-tabs-position-left");
            this._doUpdateLeft();
        } else {

            mini.addClass(this.el, "mini-tabs-position-top");
            this._doUpdateTop();
        }

        this.doLayout();

        this.setActiveIndex(this.activeIndex, false);
    },
    _handleIFrameOverflow: function () {

        var bodyEl = this.getTabBodyEl(this.activeIndex);
        if (bodyEl) {
            mini.removeClass(bodyEl, 'mini-tabs-hideOverflow');
            var dom = mini.getChildNodes(bodyEl)[0];

            if (dom && dom.tagName && dom.tagName.toUpperCase() == "IFRAME") {
                mini.addClass(bodyEl, 'mini-tabs-hideOverflow');
            }

        }
    },
    doLayout: function () {

        if (!this.canLayout()) return;


        this._handleIFrameOverflow();


        var autoHeight = this.isAutoHeight();



        h = this.getHeight(true);

        w = this.getWidth();
        var elHeight = h;
        var elWidth = w;

        if (this.showBody) {
            this._bodyEl.style.display = "";
        } else {
            this._bodyEl.style.display = "none";
        }

        if (this.plain) {
            mini.addClass(this.el, "mini-tabs-plain");
        } else {
            mini.removeClass(this.el, "mini-tabs-plain");
        }


        if (!autoHeight && this.showBody) {

            var headerHeight = jQuery(this._headerEl).outerHeight();
            var headerWidth = jQuery(this._headerEl).outerWidth();
            if (this.tabPosition == "top") {
                headerHeight = jQuery(this._headerEl.parentNode).outerHeight();

            }

            if (this.tabPosition == "left" || this.tabPosition == "right") {
                w = w - headerWidth;
            } else {
                h = h - headerHeight;
            }

            if (jQuery.boxModel) {
                var padding = mini.getPaddings(this._bodyEl);
                var border = mini.getBorders(this._bodyEl);

                h = h - padding.top - padding.bottom - border.top - border.bottom;
                w = w - padding.left - padding.right - border.left - border.right;
            }
            margin = mini.getMargins(this._bodyEl);

            h = h - margin.top - margin.bottom;
            w = w - margin.left - margin.right;



            if (h < 0) h = 0;
            if (w < 0) w = 0;

            this._bodyEl.style.width = w + "px";
            this._bodyEl.style.height = h + "px";


            if (this.tabPosition == "left" || this.tabPosition == "right") {




                var tr = this._headerEl.getElementsByTagName("tr")[0];
                var tds = tr.childNodes;
                var trs = tds[0].getElementsByTagName("tr");

                var first = last = all = 0;
                for (var i = 0, l = trs.length; i < l; i++) {
                    var tr = trs[i];
                    var trH = jQuery(tr).outerHeight();
                    all += trH;
                    if (i == 0) first = trH;
                    if (i == l - 1) last = trH;
                }

                switch (this.tabAlign) {
                    case "center":
                        var halfH = parseInt((elHeight - (all - first - last)) / 2);
                        for (var i = 0, l = tds.length; i < l; i++) {
                            tds[i].firstChild.style.height = elHeight + "px";
                            var tb = tds[i].firstChild;
                            var trs = tb.getElementsByTagName("tr");
                            var tr1 = trs[0], tr2 = trs[trs.length - 1];
                            tr1.style.height = halfH + "px";
                            tr2.style.height = halfH + "px";
                        }
                        break;
                    case "right":
                        for (var i = 0, l = tds.length; i < l; i++) {
                            var tb = tds[i].firstChild;
                            var trs = tb.getElementsByTagName("tr");
                            var tr = trs[0];

                            var size = elHeight - (all - first);
                            if (size >= 0) {
                                tr.style.height = size + "px";
                            }
                        }
                        break;
                    case "fit":
                        for (var i = 0, l = tds.length; i < l; i++) {
                            tds[i].firstChild.style.height = elHeight + "px"; ;
                        }
                        break;
                    default:
                        for (var i = 0, l = tds.length; i < l; i++) {
                            var tb = tds[i].firstChild;
                            var trs = tb.getElementsByTagName("tr");
                            var tr = trs[trs.length - 1];
                            var size = elHeight - (all - last);
                            if (size >= 0) {
                                tr.style.height = size + "px";
                            }
                        }
                        break;
                }
            }
        } else {
            this._bodyEl.style.width = "auto";
            this._bodyEl.style.height = "auto";
        }


        var tabBodyEl = this.getTabBodyEl(this.activeIndex);
        if (tabBodyEl) {
            if (!autoHeight && this.showBody) {
                var h = mini.getHeight(this._bodyEl, true);
                if (jQuery.boxModel) {
                    var padding = mini.getPaddings(tabBodyEl);
                    var border = mini.getBorders(tabBodyEl);
                    h = h - padding.top - padding.bottom - border.top - border.bottom;
                }
                tabBodyEl.style.height = h + "px";
            } else {
                tabBodyEl.style.height = "auto";
            }
        }

        switch (this.tabPosition) {
            case "bottom":
                var hds = this._headerEl.childNodes;
                for (var i = 0, l = hds.length; i < l; i++) {
                    var tb = hds[i];
                    mini.removeClass(tb, "mini-tabs-header2");
                    if (l > 1 && i != 0) {

                        mini.addClass(tb, "mini-tabs-header2");
                    }
                }
                break;
            case "left":



                var tds = this._headerEl.firstChild.rows[0].cells;
                for (var i = 0, l = tds.length; i < l; i++) {
                    var td = tds[i];
                    mini.removeClass(td, "mini-tabs-header2");
                    if (l > 1 && i == 0) {
                        mini.addClass(td, "mini-tabs-header2");
                    }
                }
                break;
            case "right":



                var tds = this._headerEl.firstChild.rows[0].cells;
                for (var i = 0, l = tds.length; i < l; i++) {
                    var td = tds[i];
                    mini.removeClass(td, "mini-tabs-header2");
                    if (l > 1 && i != 0) {
                        mini.addClass(td, "mini-tabs-header2");
                    }
                }
                break;
            default:
                var hds = this._headerEl.childNodes;
                for (var i = 0, l = hds.length; i < l; i++) {
                    var tb = hds[i];
                    mini.removeClass(tb, "mini-tabs-header2");
                    if (l > 1 && i == 0) {
                        mini.addClass(tb, "mini-tabs-header2");
                    }
                }
                break;
        }



        mini.removeClass(this.el, 'mini-tabs-scroll');
        if (this.tabPosition == "top") {



            mini.setWidth(this._headerEl, elWidth);
            if (this._headerEl.offsetWidth < this._headerEl.scrollWidth) {

                mini.setWidth(this._headerEl, elWidth - 60);
                mini.addClass(this.el, 'mini-tabs-scroll');
            }
            if (isIE && !jQuery.boxModel) {
                this._leftButtonEl.style.left = "-26px";
            }
        }

        this._doScrollButton();





        mini.layout(this._bodyEl);

        this.fire("layout");

    },

    setTabAlign: function (value) {
        this.tabAlign = value;
        this.doUpdate();
    },
    setTabPosition: function (value) {
        this.tabPosition = value;
        this.doUpdate();
    },


    getTab: function (index) {
        if (typeof index == "object") return index;
        if (typeof index == "number") {
            return this.tabs[index];
        } else {
            for (var i = 0, l = this.tabs.length; i < l; i++) {
                var tab = this.tabs[i];
                if (tab.name == index) return tab;
            }
        }
    },
    getHeaderEl: function () {
        return this._headerEl;
    },
    getBodyEl: function () {
        return this._bodyEl;
    },
    getTabEl: function (index) {
        var tab = this.getTab(index);
        if (!tab) return null;
        var id = this._createTabId(tab);
        var cs = this.el.getElementsByTagName("*");
        for (var i = 0, l = cs.length; i < l; i++) {
            var el = cs[i];
            if (el.id == id) return el;
        }
        return null;
    },
    getTabBodyEl: function (index) {
        var tab = this.getTab(index);
        if (!tab) return null;
        var id = this._createTabBodyId(tab);
        var cs = this._bodyEl.childNodes;
        for (var i = 0, l = cs.length; i < l; i++) {
            var el = cs[i];
            if (el.id == id) return el;
        }
        return null;
    },
    getTabIFrameEl: function (index) {
        var tab = this.getTab(index);
        if (!tab) return null;
        return tab._iframeEl;
    },
    _createTabId: function (tab) {
        return this.uid + "$" + tab._id;
    },
    _createTabBodyId: function (tab) {
        return this.uid + "$body$" + tab._id;
    },
    _doScrollButton: function () {
        if (this.tabPosition == "top") {
            mini.removeClass(this._leftButtonEl, "mini-disabled");
            mini.removeClass(this._rightButtonEl, "mini-disabled");
            if (this._headerEl.scrollLeft == 0) {
                mini.addClass(this._leftButtonEl, "mini-disabled");
            }
            var tabEl = this.getTabEl(this.tabs.length - 1);
            if (tabEl) {
                var tabBox = mini.getBox(tabEl);
                var scrollBox = mini.getBox(this._headerEl);
                if (tabBox.right <= scrollBox.right) {
                    mini.addClass(this._rightButtonEl, "mini-disabled");
                }
            }
        }
    },

    setActiveIndex: function (value, load) {

        var tab = this.getTab(value);

        var acTab = this.getTab(this.activeIndex);

        var fire = tab != acTab;

        var el = this.getTabBodyEl(this.activeIndex);
        if (el) el.style.display = "none";
        if (tab) {
            this.activeIndex = this.tabs.indexOf(tab);
        } else {
            this.activeIndex = -1;
        }
        var el = this.getTabBodyEl(this.activeIndex);
        if (el) el.style.display = "";

        var el = this.getTabEl(acTab);
        if (el) mini.removeClass(el, this._tabActiveCls);

        var el = this.getTabEl(tab);
        if (el) mini.addClass(el, this._tabActiveCls);

        if (el && fire) {
            if (this.tabPosition == "bottom") {
                var tb = mini.findParent(el, "mini-tabs-header");
                if (tb) {
                    jQuery(this._headerEl).prepend(tb);
                }
            } else if (this.tabPosition == "left") {
                var td = mini.findParent(el, "mini-tabs-header").parentNode;
                if (td) {
                    td.parentNode.appendChild(td);
                }
            } else if (this.tabPosition == "right") {
                var td = mini.findParent(el, "mini-tabs-header").parentNode;
                if (td) {
                    jQuery(td.parentNode).prepend(td);
                }
            } else {
                var tb = mini.findParent(el, "mini-tabs-header");
                if (tb) {
                    this._headerEl.appendChild(tb);
                }
            }
            var scrollLeft = this._headerEl.scrollLeft;
            this.doLayout();

            var rows = this.getTabRows();
            if (rows.length > 1) {

            } else {
                if (this.tabPosition == "top") {
                    this._headerEl.scrollLeft = scrollLeft;
                    var tabEl = this.getTabEl(this.activeIndex);
                    if (tabEl) {
                        var sf = this;
                        var tabBox = mini.getBox(tabEl);
                        var scrollBox = mini.getBox(sf._headerEl);

                        if (tabBox.x < scrollBox.x) {
                            sf._headerEl.scrollLeft -= (scrollBox.x - tabBox.x);
                        } else if (tabBox.right > scrollBox.right) {
                            sf._headerEl.scrollLeft += (tabBox.right - scrollBox.right);
                        }
                    }
                }
                this._doScrollButton();
            }

            for (var i = 0, l = this.tabs.length; i < l; i++) {
                var tabEl = this.getTabEl(this.tabs[i]);
                if (tabEl) {
                    mini.removeClass(tabEl, this._tabHoverCls);
                }
            }
        }
        var me = this;
        if (fire) {
            var e = {
                tab: tab,
                index: this.tabs.indexOf(tab),
                name: tab ? tab.name : ""
            };

            setTimeout(function () {



                me.fire("ActiveChanged", e);

            }, 1);
        }


        this._cancelLoadTabs(tab);
        if (load !== false) {
            if (tab && tab.url && !tab.loadedUrl) {
                var me = this;


                me.loadTab(tab.url, tab);

            }
        }

        if (me.canLayout()) {
            try {
                mini.layoutIFrames(me.el);
            } catch (e) {
            }
        }
    },
    getActiveIndex: function () {
        return this.activeIndex;
    },
    activeTab: function (tab) {
        this.setActiveIndex(tab);
    },
    getActiveTab: function () {
        return this.getTab(this.activeIndex);
    },
    getActiveIndex: function () {
        return this.activeIndex;
    },
    _tryActiveTab: function (tab) {
        tab = this.getTab(tab);
        if (!tab) return;
        var index = this.tabs.indexOf(tab);
        if (this.activeIndex == index) return;
        var e = {
            tab: tab,
            index: index,
            name: tab.name,
            cancel: false
        };
        this.fire("BeforeActiveChanged", e);
        if (e.cancel == false) {
            this.activeTab(tab);
        }
    },
    setShowBody: function (value) {
        if (this.showBody != value) {
            this.showBody = value;
            this.doLayout();
        }
    },
    getShowBody: function () {
        return this.showBody;
    },
    setBodyStyle: function (value) {
        this.bodyStyle = value;
        mini.setStyle(this._bodyEl, value);
        this.doLayout();
    },
    getBodyStyle: function () {
        return this.bodyStyle;
    },
    setMaskOnLoad: function (value) {
        this.maskOnLoad = value;
    },
    getMaskOnLoad: function () {
        return this.maskOnLoad;
    },
    setPlain: function (value) {
        this.plain = value;
        this.doLayout();
    },
    getPlain: function () {
        return this.plain;
    },

    getTabByEvent: function (e) {
        return this._getTabByEvent(e);
    },
    _getTabByEvent: function (e) {
        var el = mini.findParent(e.target, 'mini-tab');
        if (!el) return null;
        var ids = el.id.split("$");
        if (ids[0] != this.uid) return null;
        var index = parseInt(jQuery(el).attr("index"));
        return this.getTab(index);
    },
    __OnClick: function (e) {

        var tab = this._getTabByEvent(e);
        if (!tab) return;
        if (tab.enabled) {
            var me = this;
            setTimeout(function () {
                if (mini.findParent(e.target, "mini-tab-close")) {
                    me._OnCloseButtonClick(tab, e);
                } else {
                    var loadedUrl = tab.loadedUrl;
                    me._tryActiveTab(tab);
                    if (tab.refreshOnClick && tab.url == loadedUrl) {
                        me.reloadTab(tab);
                    }
                }
            }, 10);
        }
    },
    hoverTab: null,
    __OnMouseOver: function (e) {
        var tab = this._getTabByEvent(e);
        if (tab && tab.enabled) {
            var tabEl = this.getTabEl(tab);
            mini.addClass(tabEl, this._tabHoverCls);
            this.hoverTab = tab;
        }
    },
    __OnMouseOut: function (e) {
        if (this.hoverTab) {
            var tabEl = this.getTabEl(this.hoverTab);
            mini.removeClass(tabEl, this._tabHoverCls);
        }
        this.hoverTab = null;
    },
    __OnMouseDown: function (e) {
        clearInterval(this._scrollTimer);
        if (this.tabPosition == "top") {
            var sf = this;
            var count = 0, num = 10;
            if (e.target == this._leftButtonEl) {
                this._scrollTimer = setInterval(function () {
                    sf._headerEl.scrollLeft -= num;
                    count++;
                    if (count > 5) num = 18;
                    if (count > 10) num = 25;
                    sf._doScrollButton();
                }, 25);
            } else if (e.target == this._rightButtonEl) {
                this._scrollTimer = setInterval(function () {
                    sf._headerEl.scrollLeft += num;
                    count++;
                    if (count > 5) num = 18;
                    if (count > 10) num = 25;
                    sf._doScrollButton();
                }, 25);
            }
            mini.on(document, "mouseup", this.__OnDocMouseUp, this);
        }
    },
    __OnDocMouseUp: function (e) {
        clearInterval(this._scrollTimer);
        this._scrollTimer = null;
        mini.un(document, "mouseup", this.__OnDocMouseUp, this);
    },


    _doUpdateTop: function () {


        var isTop = this.tabPosition == "top";

        var s = '';
        if (isTop) {
            s += '<div class="mini-tabs-scrollCt">';
            s += '<a class="mini-tabs-leftButton" href="javascript:void(0)" hideFocus onclick="return false"></a><a class="mini-tabs-rightButton" href="javascript:void(0)" hideFocus onclick="return false"></a>';
        }
        s += '<div class="mini-tabs-headers">';
        var rows = this.getTabRows();
        for (var j = 0, k = rows.length; j < k; j++) {
            var tabs = rows[j];
            var cls = "";
            s += '<table class="mini-tabs-header" cellspacing="0" cellpadding="0"><tr><td class="mini-tabs-space mini-tabs-firstSpace"><div></div></td>';
            for (var i = 0, l = tabs.length; i < l; i++) {
                var tab = tabs[i];
                var id = this._createTabId(tab);
                if (!tab.visible) continue;
                var index = this.tabs.indexOf(tab);
                var cls = tab.headerCls || "";
                if (tab.enabled == false) {
                    cls += ' mini-disabled';
                }
                s += '<td id="' + id + '" index="' + index + '"  class="mini-tab ' + cls + '" style="' + tab.headerStyle + '">';
                if (tab.iconCls || tab.iconStyle) {
                    s += '<span class="mini-tab-icon ' + tab.iconCls + '" style="' + tab.iconStyle + '"></span>';
                }
                s += '<span class="mini-tab-text">' + tab.title + '</span>';
                if (tab.showCloseButton) {
                    var ms = "";
                    if (tab.enabled) {
                        ms = 'onmouseover="mini.addClass(this, \'mini-tab-close-hover\')" onmouseout="mini.removeClass(this, \'mini-tab-close-hover\')"'
                    }
                    s += '<span class="mini-tab-close" ' + ms + '></span>';
                }
                s += '</td>';
                if (i != l - 1) {
                    s += '<td class="mini-tabs-space2"><div></div></td>';
                }

            }
            s += '<td class="mini-tabs-space mini-tabs-lastSpace" ><div></div></td></tr></table>';
        }
        if (isTop) s += '</div>';
        s += '</div>';

        this._doClearElement();

        mini.prepend(this._td2El, s);

        var td = this._td2El;
        this._headerEl = td.firstChild.lastChild;
        if (isTop) {
            this._leftButtonEl = this._headerEl.parentNode.firstChild;
            this._rightButtonEl = this._headerEl.parentNode.childNodes[1];
        }

        switch (this.tabAlign) {
            case "center":
                var hds = this._headerEl.childNodes;
                for (var i = 0, l = hds.length; i < l; i++) {
                    var tb = hds[i];
                    var tds = tb.getElementsByTagName("td");
                    tds[0].style.width = "50%";
                    tds[tds.length - 1].style.width = "50%";
                }
                break;
            case "right":
                var hds = this._headerEl.childNodes;
                for (var i = 0, l = hds.length; i < l; i++) {
                    var tb = hds[i];
                    var tds = tb.getElementsByTagName("td");
                    tds[0].style.width = "100%";
                }
                break;
            case "fit":
                break;
            default:
                var hds = this._headerEl.childNodes;
                for (var i = 0, l = hds.length; i < l; i++) {
                    var tb = hds[i];
                    var tds = tb.getElementsByTagName("td");
                    tds[tds.length - 1].style.width = "100%";
                }
                break;
        }
    },
    _doUpdateBottom: function () {
        this._doUpdateTop();
        var td = this._td2El;

        mini.append(td, td.firstChild);
        this._headerEl = td.lastChild;
    },
    _doUpdateLeft: function () {
        var s = '<table cellspacing="0" cellpadding="0"><tr>';
        var rows = this.getTabRows();
        for (var j = 0, k = rows.length; j < k; j++) {
            var tabs = rows[j];

            var cls = "";
            if (k > 1 && j != k - 1) {
                cls = "mini-tabs-header2";
            }
            s += '<td class="' + cls + '"><table class="mini-tabs-header" cellspacing="0" cellpadding="0">';
            s += '<tr ><td class="mini-tabs-space mini-tabs-firstSpace" ><div></div></td></tr>';

            for (var i = 0, l = tabs.length; i < l; i++) {
                var tab = tabs[i];
                var id = this._createTabId(tab);
                if (!tab.visible) continue;

                var index = this.tabs.indexOf(tab);

                var cls = tab.headerCls || "";
                if (tab.enabled == false) {
                    cls += ' mini-disabled';
                }
                s += '<tr><td id="' + id + '" index="' + index + '"  class="mini-tab ' + cls + '" style="' + tab.headerStyle + '">';
                if (tab.iconCls || tab.iconStyle) {
                    s += '<span class="mini-tab-icon ' + tab.iconCls + '" style="' + tab.iconStyle + '"></span>';
                }
                s += '<span class="mini-tab-text">' + tab.title + '</span>';
                if (tab.showCloseButton) {
                    var ms = "";
                    if (tab.enabled) {
                        ms = 'onmouseover="mini.addClass(this, \'mini-tab-close-hover\')" onmouseout="mini.removeClass(this, \'mini-tab-close-hover\')"'
                    }
                    s += '<span class="mini-tab-close" ' + ms + '></span>';
                }
                s += '</td></tr>';

                if (i != l - 1) {
                    s += '<tr><td class="mini-tabs-space2"><div></div></td></tr>';
                }

            }

            s += '<tr ><td class="mini-tabs-space mini-tabs-lastSpace" ><div></div></td></tr>';
            s += '</table></td>';
        }

        s += '</tr ></table>';

        this._doClearElement();
        mini.addClass(this._td1El, "mini-tabs-header");
        mini.append(this._td1El, s);
        this._headerEl = this._td1El;

    },
    _doUpdateRight: function () {
        this._doUpdateLeft();

        mini.removeClass(this._td1El, "mini-tabs-header");
        mini.removeClass(this._td3El, "mini-tabs-header");
        mini.append(this._td3El, this._td1El.firstChild);
        this._headerEl = this._td3El;

    },

    _OnCloseButtonClick: function (tab, htmlEvent) {
        var e = {
            tab: tab,
            index: this.tabs.indexOf(tab),
            name: tab.name.toLowerCase(),
            htmlEvent: htmlEvent,
            cancel: false
        };

        this.fire("beforecloseclick", e);

        if (e.cancel == true) return;

        try {
            if (tab._iframeEl && tab._iframeEl.contentWindow) {
                var ret = true;
                if (tab._iframeEl.contentWindow.CloseWindow) {
                    ret = tab._iframeEl.contentWindow.CloseWindow("close");
                } else if (tab._iframeEl.contentWindow.CloseOwnerWindow) {
                    ret = tab._iframeEl.contentWindow.CloseOwnerWindow("close");
                }
                if (ret === false) {
                    e.cancel = true;
                }
            }
        } catch (ex) { }

        if (e.cancel == true) return;

        tab.removeAction = "close";
        this.removeTab(tab);
        this.fire("closeclick", e);
    },
    onBeforeCloseClick: function (fn, scope) {
        this.on("beforecloseclick", fn, scope);
    },
    onCloseClick: function (fn, scope) {
        this.on("closeclick", fn, scope);
    },
    onActiveChanged: function (fn, scope) {
        this.on("activechanged", fn, scope);
    },

    getAttrs: function (el) {
        var attrs = mini.Tabs.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["tabAlign", "tabPosition", "bodyStyle", "onactivechanged", "onbeforeactivechanged", "url",
                "ontabload", "ontabdestroy", "onbeforecloseclick", "oncloseclick",
                "titleField", "urlField", "nameField", "loadingMsg"
             ]
        );
        mini._ParseBool(el, attrs,
            ["allowAnim", "showBody", "maskOnLoad", "plain"
             ]
        );
        mini._ParseInt(el, attrs,
            ["activeIndex"
             ]
        );

        var tabs = [];
        var nodes = mini.getChildNodes(el);
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];

            var o = {};
            tabs.push(o);

            o.style = node.style.cssText;
            mini._ParseString(node, o,
                ["name", "title", "url", "cls", "iconCls", "iconStyle", "headerCls", "headerStyle", "bodyCls", "bodyStyle",
                    "onload", "ondestroy", "data-options"
                 ]
            );
            mini._ParseBool(node, o,
                ["newLine", "visible", "enabled", "showCloseButton", "refreshOnClick"
                 ]
            );



            o.bodyParent = node;


            var options = o["data-options"];
            if (options) {

                options = eval("(" + options + ")");
                if (options) {

                    mini.copyTo(o, options);
                }
            }
        }
        attrs.tabs = tabs;

        return attrs;
    }
});
mini.regClass(mini.Tabs, "tabs");


mini.Menu = function () {
    this.items = [];
    mini.Menu.superclass.constructor.call(this);


}
mini.extend(mini.Menu, mini.Control);
mini.copyTo(mini.Menu.prototype, mini.Popup_prototype);
var mini_Popup_prototype_hide = mini.Popup_prototype.hide;

mini.copyTo(mini.Menu.prototype, {
    height: "auto",
    width: "auto",
    minWidth: 140,
    vertical: true,
    allowSelectItem: false,
    _selectedItem: null,
    _itemSelectedCls: "mini-menuitem-selected",

    textField: "text",
    resultAsTree: false,
    idField: "id",
    parentField: "pid",
    itemsField: "children",

    showNavArrow: true,

    imgPath: '',



    _clearBorder: false,

    showAction: "none",
    hideAction: "outerclick",

    getbyName: function (name) {

        for (var i = 0, l = this.items.length; i < l; i++) {
            var item = this.items[i];
            if (item.name == name) {
                return item;
            }
            if (item.menu) {
                var control = item.menu.getbyName(name);
                if (control) return control;
            }
        }
        return null;
    },

    set: function (obj) {
        if (typeof obj == 'string') {
            return this;
        }

        if (obj.imgPath) this.setImgPath(obj.imgPath);
        delete obj.imgPath;

        this.ownerItem = obj.ownerItem;
        delete obj.ownerItem;

        var url = obj.url;
        delete obj.url;

        mini.Menu.superclass.set.call(this, obj);

        if (url) {
            this.setUrl(url);
        }

        return this;
    },

    uiCls: "mini-menu",
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-menu";
        this.el.innerHTML = '<div class="mini-menu-border"><a class="mini-menu-topArrow" href="#" onclick="return false"></a><div class="mini-menu-inner"></div><a class="mini-menu-bottomArrow" href="#" onclick="return false"></a></div>';
        this._borderEl = this.el.firstChild;

        this._topArrowEl = this._borderEl.childNodes[0];
        this._bottomArrowEl = this._borderEl.childNodes[2];

        this._innerEl = this._borderEl.childNodes[1];
        this._innerEl.innerHTML = '<div class="mini-menu-float"></div><div class="mini-menu-toolbar"></div><div style="clear:both;"></div>';
        this._contentEl = this._innerEl.firstChild;
        this._toolbarEl = this._innerEl.childNodes[1];




        if (this.isVertical() == false) mini.addClass(this.el, 'mini-menu-horizontal');

    },
    destroy: function (removeEl) {
        if (this._topArrowEl) {
            this._topArrowEl.onmousedown = this._bottomArrowEl.onmousedown = null;
        }

        this._popupEl = this.popupEl = this._borderEl = this._innerEl = this._contentEl = null;
        this._topArrowEl = this._bottomArrowEl = null;
        this.owner = null;
        mini.un(document, "mousedown", this.__OnBodyMouseDown, this);
        mini.un(window, "resize", this.__OnWindowResize, this);

        mini.Menu.superclass.destroy.call(this, removeEl);

    },
    _disableContextMenu: false,
    _initEvents: function () {
        mini._BindEvents(function () {
            mini.on(document, "mousedown", this.__OnBodyMouseDown, this);
            mini_onOne(this.el, "mouseover", this.__OnMouseOver, this);
            mini.on(window, "resize", this.__OnWindowResize, this);
            if (this._disableContextMenu) {
                mini_onOne(this.el, "contextmenu", function (e) {
                    e.preventDefault();

                }, this);
            }

            mini_onOne(this._topArrowEl, "mousedown", this.__OnTopMouseDown, this);
            mini_onOne(this._bottomArrowEl, "mousedown", this.__OnBottomMouseDown, this);

        }, this);

    },
    within: function (e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        for (var i = 0, l = this.items.length; i < l; i++) {
            var item = this.items[i];
            if (item.within(e)) return true;
        }
        return false;
    },






    setVertical: function (value) {
        this.vertical = value;
        if (!value) {
            mini.addClass(this.el, 'mini-menu-horizontal');
        } else {
            mini.removeClass(this.el, 'mini-menu-horizontal');
        }

    },
    getVertical: function () {
        return this.vertical;
    },
    isVertical: function () {
        return this.vertical;
    },

    show: function () {
        this.setVisible(true);
    },
    hide: function () {
        this.hideItems();
        mini_Popup_prototype_hide.call(this);
    },
    hideItems: function () {
        for (var i = 0, l = this.items.length; i < l; i++) {
            var menuitem = this.items[i];
            menuitem.hideMenu();
        }
    },

    showItemMenu: function (item) {
        for (var i = 0, l = this.items.length; i < l; i++) {
            var menuitem = this.items[i];
            if (menuitem == item) {
                menuitem.showMenu();
            } else {
                menuitem.hideMenu();
            }
        }
    },
    hasShowItemMenu: function () {
        for (var i = 0, l = this.items.length; i < l; i++) {
            var menuitem = this.items[i];
            if (menuitem && menuitem.menu && menuitem.menu.isPopup) {
                return true;
            }
        }
        return false;
    },

    setData: function (value) {
        if (!mini.isArray(value)) value = [];
        this.setItems(value);
    },
    getData: function () {
        return this.getItems();
    },
    setItems: function (items) {
        if (!mini.isArray(items)) items = [];

        this.removeAll();
        var sss = new Date();

        for (var i = 0, l = items.length; i < l; i++) {
            this.addItem(items[i]);
        }

    },
    getItems: function () {
        return this.items;
    },
    addItem: function (item) {
        if (item == "-" || item == "|" || item.type == "separator") {
            mini.append(this._contentEl, '<span class="mini-separator"></span>');
            return;
        }

        if (!mini.isControl(item) && !mini.getClass(item.type)) {
            item.type = "menuitem";
        }

        item.ownerMenu = this;



        item = mini.getAndCreate(item);

        this.items.push(item);

        this._contentEl.appendChild(item.el);

        item.ownerMenu = this;



        this.fire("itemschanged");
    },
    removeItem: function (item) {
        item = mini.get(item);
        if (!item) return;
        this.items.remove(item);

        this._contentEl.removeChild(item.el);

        this.fire("itemschanged");
    },
    removeItemAt: function (index) {
        var item = this.items[index];
        this.removeItem(item);
    },
    removeAll: function () {
        var items = this.items.clone();
        for (var i = items.length - 1; i >= 0; i--) {
            this.removeItem(items[i]);
        }
        this._contentEl.innerHTML = "";
    },
    getGroupItems: function (name) {
        if (!name) return [];
        var items = [];
        for (var i = 0, l = this.items.length; i < l; i++) {
            var item = this.items[i];
            if (item.groupName == name) items.push(item);
        }
        return items;
    },
    getItem: function (item) {
        if (typeof item == "number") return this.items[item];
        if (typeof item == "string") {
            for (var i = 0, l = this.items.length; i < l; i++) {
                var it = this.items[i];
                if (it.id == item) return it;
            }
            return null;
        }
        if (item && this.items.indexOf(item) != -1) return item;
        return null;
    },

    setAllowSelectItem: function (value) {
        this.allowSelectItem = value;
    },
    getAllowSelectItem: function () {
        return this.allowSelectItem;
    },
    setSelectedItem: function (item) {
        item = this.getItem(item);
        this._OnItemSelect(item);
    },
    getSelectedItem: function (item) {
        return this._selectedItem;
    },

    setShowNavArrow: function (value) {
        this.showNavArrow = value;
    },
    getShowNavArrow: function () {
        return this.showNavArrow;
    },
    setTextField: function (value) {
        this.textField = value;
    },
    getTextField: function () {
        return this.textField;
    },
    setResultAsTree: function (value) {
        this.resultAsTree = value;
    },
    getResultAsTree: function () {
        return this.resultAsTree;
    },
    setIdField: function (value) {
        this.idField = value;
    },
    getIdField: function () {
        return this.idField;
    },
    setParentField: function (value) {
        this.parentField = value;
    },
    getParentField: function () {
        return this.parentField;
    },

    doLayout: function () {

        if (!this.canLayout()) return;

        if (!this.isAutoHeight()) {

            var height = mini.getHeight(this.el, true);

            mini.setHeight(this._borderEl, height);
            this._topArrowEl.style.display = this._bottomArrowEl.style.display = "none";
            this._contentEl.style.height = "auto";

            if (this.showNavArrow && this._borderEl.scrollHeight > this._borderEl.clientHeight) {
                this._topArrowEl.style.display = this._bottomArrowEl.style.display = "block";
                height = mini.getHeight(this._borderEl, true);
                var th = mini.getHeight(this._topArrowEl);
                var bh = mini.getHeight(this._bottomArrowEl);
                var h = height - th - bh;
                if (h < 0) h = 0;
                mini.setHeight(this._contentEl, h);
            } else {
                this._contentEl.style.height = "auto";
            }
        } else {
            this._borderEl.style.height = "auto";
            this._contentEl.style.height = "auto";
        }
    },
    _measureSize: function () {
        if (this.height == "auto") {
            this.el.style.height = "auto";
            this._borderEl.style.height = "auto";
            this._contentEl.style.height = "auto";
            this._topArrowEl.style.display = this._bottomArrowEl.style.display = "none";

            var vbox = mini.getViewportBox();
            var box = mini.getBox(this.el);
            this.maxHeight = vbox.height - 25;
            if (this.ownerItem) {
                var box = mini.getBox(this.ownerItem.el);
                var topH = box.top;
                var bottomH = vbox.height - box.bottom;
                var maxHeight = topH > bottomH ? topH : bottomH;
                maxHeight -= 10;
                this.maxHeight = maxHeight;
            }
        }

        this.el.style.display = "";
        var box = mini.getBox(this.el);

        if (box.width > this.maxWidth) {
            mini.setWidth(this.el, this.maxWidth);
            box = mini.getBox(this.el);
        }
        if (box.height > this.maxHeight) {
            mini.setHeight(this.el, this.maxHeight);
            box = mini.getBox(this.el);
        }
        if (box.width < this.minWidth) {
            mini.setWidth(this.el, this.minWidth);
            box = mini.getBox(this.el);
        }
        if (box.height < this.minHeight) {
            mini.setHeight(this.el, this.minHeight);
            box = mini.getBox(this.el);
        }
    },

    url: "",
    _doLoad: function () {

        var items = mini.getData(this.url);

        if (this.dataField) {
            items = mini._getMap(this.dataField, items);
        }
        if (!items) items = [];

        if (this.resultAsTree == false) {
            items = mini.arrayToTree(items, this.itemsField, this.idField, this.parentField)
        }

        var list = mini.treeToArray(items, this.itemsField, this.idField, this.parentField)
        for (var i = 0, l = list.length; i < l; i++) {
            var o = list[i];
            o.text = mini._getMap(this.textField, o);
            if (mini.isNull(o.text)) o.text = "";
        }
        var sss = new Date();
        this.setItems(items);

        this.fire("load");
    },
    loadList: function (list, idField, parentField) {
        if (!list) return;

        idField = idField || this.idField;
        parentField = parentField || this.parentField;

        for (var i = 0, l = list.length; i < l; i++) {
            var o = list[i];
            o.text = mini._getMap(this.textField, o);
            if (mini.isNull(o.text)) o.text = "";
        }

        var tree = mini.arrayToTree(list, this.itemsField, idField, parentField);

        this.load(tree);
    },
    load: function (url) {
        if (typeof url == "string") {
            this.setUrl(url);
        } else {
            this.setItems(url);
        }
    },
    setUrl: function (value) {
        this.url = value;

        this._doLoad();
    },
    getUrl: function () {
        return this.url;
    },
    hideOnClick: true,
    setHideOnClick: function (value) {
        this.hideOnClick = value;
    },
    getHideOnClick: function () {
        return this.hideOnClick;
    },

    setImgPath: function (value) {
        this.imgPath = value;
    },
    getImgPath: function () {
        return this.imgPath;
    },

    _OnItemClick: function (item, htmlEvent) {
        var e = {
            item: item,
            isLeaf: !item.menu,
            htmlEvent: htmlEvent
        };
        if (this.hideOnClick) {
            if (this.isPopup) {
                this.hide();
            } else {
                this.hideItems();
            }
        }

        if (this.allowSelectItem && this._selectedItem != item) {
            this.setSelectedItem(item);
        }

        this.fire("itemclick", e);
        if (this.ownerItem) {

        }
    },
    _OnItemSelect: function (item) {
        if (this._selectedItem) {
            this._selectedItem.removeCls(this._itemSelectedCls);
        }
        this._selectedItem = item;

        if (this._selectedItem) {
            this._selectedItem.addCls(this._itemSelectedCls);
        }
        var e = {
            item: this._selectedItem
        };
        this.fire("itemselect", e);
    },
    onItemClick: function (fn, scope) {
        this.on("itemclick", fn, scope);
    },
    onItemSelect: function (fn, scope) {
        this.on("itemselect", fn, scope);
    },

    __OnTopMouseDown: function (e) {
        this._startScrollMove(-20);
    },
    __OnBottomMouseDown: function (e) {

        this._startScrollMove(20);
    },
    _startScrollMove: function (value) {
        clearInterval(this._scrollTimer);
        var fn = function () {
            clearInterval(me._scrollTimer);
            mini.un(document, "mouseup", fn);
        };
        mini.on(document, "mouseup", fn);

        var me = this;

        this._scrollTimer = setInterval(function () {
            me._contentEl.scrollTop += value;


        }, 50);
    },
    setToolbar: function (value) {
        __mini_setControls(value, this._toolbarEl, this);
    },

    parseItems: function (nodes) {

        var data = [];
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];

            if (node.className == "separator") {
                data.add("-");
                continue;
            }

            var cnodes = mini.getChildNodes(node);

            var nodeItem = cnodes[0];
            var nodeChild = cnodes[1];

            var o = new mini.MenuItem();

            if (!nodeChild) {

                mini.applyTo.call(o, node);
                data.add(o);
                continue;
            }

            mini.applyTo.call(o, nodeItem);
            o.render(document.body);


            var menu = new mini.Menu();

            mini.applyTo.call(menu, nodeChild);

            o.setMenu(menu);

            menu.render(document.body);


            data.add(o);
        }
        return data.clone();
    },
    getAttrs: function (el) {

        var attrs = mini.Menu.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        mini._ParseString(el, attrs,
            ["popupEl", "popupCls", "showAction", "hideAction", "xAlign", "yAlign", "modalStyle",
            "onbeforeopen", "open", "onbeforeclose", "onclose", "url", "onitemclick", "onitemselect",
            "textField", "idField", "parentField", "toolbar", "imgPath"
                ]
        );
        mini._ParseBool(el, attrs,
            ["resultAsTree", "hideOnClick", "showNavArrow"
                ]
        );


        var nodes = mini.getChildNodes(el);

        for (var i = nodes.length - 1; i >= 0; i--) {
            var node = nodes[i];
            var property = jQuery(node).attr("property");
            if (!property) continue;
            property = property.toLowerCase();
            if (property == "toolbar") {
                attrs.toolbar = node;
                node.parentNode.removeChild(node);
            }
        }


        var nodes = mini.getChildNodes(el);
        var items = this.parseItems(nodes);
        if (items.length > 0) {
            attrs.items = items;
        }

        var vertical = jq.attr("vertical");
        if (vertical) {

            attrs.vertical = vertical == "true" ? true : false;
        }
        var allowSelectItem = jq.attr("allowSelectItem");
        if (allowSelectItem) {
            attrs.allowSelectItem = allowSelectItem == "true" ? true : false;
        }

        return attrs;
    }

});
mini.regClass(mini.Menu, 'menu');


mini.MenuBar = function () {
    mini.MenuBar.superclass.constructor.call(this);
}
mini.extend(mini.MenuBar, mini.Menu, {
    uiCls: "mini-menubar",
    vertical: false,
    setVertical: function (value) {
        this.vertical = false;
    }
});
mini.regClass(mini.MenuBar, 'menubar');


mini.ContextMenu = function () {
    mini.ContextMenu.superclass.constructor.call(this);
}
mini.extend(mini.ContextMenu, mini.Menu, {
    uiCls: "mini-contextmenu",
    vertical: true,
    visible: false,
    _disableContextMenu: true,
    setVertical: function (value) {
        this.vertical = true;
    }
});
mini.regClass(mini.ContextMenu, 'contextmenu');


mini.MenuItem = function () {
    mini.MenuItem.superclass.constructor.call(this);
}
mini.extend(mini.MenuItem, mini.Control, {
    text: "",
    iconCls: "",
    iconStyle: "",
    iconPosition: "left",

    showIcon: true,
    showAllow: true,

    checked: false,
    checkOnClick: false,
    groupName: "",

    _hoverCls: "mini-menuitem-hover",
    _pressedCls: "mini-menuitem-pressed",
    _checkedCls: "mini-menuitem-checked",

    _clearBorder: false,

    menu: null,

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        this.ownerMenu = kv.ownerMenu;
        delete kv.ownerMenu;




        mini.MenuItem.superclass.set.call(this, kv);


        return this;
    },

    uiCls: "mini-menuitem",
    _create: function () {
        var el = this.el = document.createElement("div");
        this.el.className = "mini-menuitem";

        this.el.innerHTML = '<div class="mini-menuitem-inner"><div class="mini-menuitem-icon"></div><div class="mini-menuitem-text"></div><div class="mini-menuitem-allow"></div></div>';
        this._innerEl = this.el.firstChild;
        this._iconEl = this._innerEl.firstChild;
        this._textEl = this._innerEl.childNodes[1];
        this.allowEl = this._innerEl.lastChild;
    },
    _initEvents: function () {
        mini._BindEvents(function () {
            mini_onOne(this.el, "mouseover", this.__OnMouseOver, this);
        }, this);

    },
    _inputEventsInited: false,
    _initInputEvents: function () {
        if (this._inputEventsInited) return;
        this._inputEventsInited = true;

        mini_onOne(this.el, "click", this.__OnClick, this);
        mini_onOne(this.el, "mouseup", this.__OnMouseUp, this);

        mini_onOne(this.el, "mouseout", this.__OnMouseOut, this);


    },
    destroy: function (removeEl) {
        if (this.el) {
            this.el.onmouseover = null
        }
        this.menu = this._innerEl = this._iconEl = this._textEl = this.allowEl = null;
        mini.MenuItem.superclass.destroy.call(this, removeEl);
    },
    within: function (e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        if (this.menu && this.menu.within(e)) return true;
        return false;
    },
    _getIconImg: function () {


        return this.img && this.getTopMenu() ? this.getTopMenu().imgPath + this.img : this.img;
    },
    _doUpdateIcon: function () {



        var img = this._getIconImg();
        var hasIcon = !!(this.iconStyle || this.iconCls || this.checkOnClick || img);
        if (this._iconEl) {
            mini.setStyle(this._iconEl, this.iconStyle);
            mini.addClass(this._iconEl, this.iconCls);


            if (img) {
                var style = 'background-image:url(' + img + ')';
                mini.setStyle(this._iconEl, style);
            }

            if (this.checked) jQuery(this._iconEl).css({ "background-image": "" });

            this._iconEl.style.display = hasIcon ? "block" : "none";
        }
        if (this.iconPosition == "top") {
            mini.addClass(this.el, "mini-menuitem-icontop");
        } else {
            mini.removeClass(this.el, "mini-menuitem-icontop");
        }
    },















    doUpdate: function () {
        if (this._textEl) this._textEl.innerHTML = this.text;
        this._doUpdateIcon();


        if (this.checked) {
            mini.addClass(this.el, this._checkedCls);
            jQuery(this._iconEl).css({ "background-image": "" });
        } else {
            mini.removeClass(this.el, this._checkedCls);
        }
        if (this.allowEl) {
            if (this.menu && this.menu.items.length > 0) {
                this.allowEl.style.display = "block";
            } else {
                this.allowEl.style.display = "none";
            }
        }
    },
    setText: function (value) {
        this.text = value;

        if (this._textEl) this._textEl.innerHTML = this.text;
    },
    getText: function () {
        return this.text;
    },
    setIconCls: function (value) {
        mini.removeClass(this._iconEl, this.iconCls);
        this.iconCls = value;

        this._doUpdateIcon();
    },
    getIconCls: function () {
        return this.iconCls;
    },
    setImg: function (value) {
        this.img = value;

        this._doUpdateIcon();
    },
    getImg: function () {
        return this.img;
    },
    setIconStyle: function (value) {
        this.iconStyle = value;

        this._doUpdateIcon();
    },
    getIconStyle: function () {
        return this.iconStyle;
    },
    setIconPosition: function (value) {
        this.iconPosition = value;

        this._doUpdateIcon();
    },
    getIconPosition: function () {
        return this.iconPosition;
    },
    setCheckOnClick: function (value) {
        this.checkOnClick = value;
        if (value) {
            mini.addClass(this.el, "mini-menuitem-showcheck");
        } else {
            mini.removeClass(this.el, "mini-menuitem-showcheck");
        }
        this.doUpdate();
    },
    getCheckOnClick: function () {
        return this.checkOnClick;
    },
    setChecked: function (value) {
        if (this.checked != value) {
            this.checked = value;
            this.doUpdate();
            this.fire("checkedchanged");
        }
    },
    getChecked: function () {
        return this.checked;
    },
    setGroupName: function (value) {
        if (this.groupName != value) {
            this.groupName = value;
        }
    },
    getGroupName: function () {
        return this.groupName;
    },
    setChildren: function (value) {
        this.setMenu(value);
    },
    setMenu: function (value) {
        if (mini.isArray(value)) {
            value = {
                type: "menu",
                items: value
            };
        }
        if (this.menu !== value) {
            value.ownerItem = this;
            this.menu = mini.getAndCreate(value);
            this.menu.hide();
            this.menu.ownerItem = this;
            this.doUpdate();
            this.menu.on("itemschanged", this.__OnItemsChanged, this);

        }
    },
    getMenu: function () {
        return this.menu;
    },
    showMenu: function () {
        if (this.menu && this.menu.isDisplay() == false) {
            this.menu.setHideAction("outerclick");

            var options = {
                xAlign: "outright",
                yAlign: "top",
                outXAlign: "outleft",

                popupCls: "mini-menu-popup"
            };

            if (this.ownerMenu && this.ownerMenu.vertical == false) {

                options.xAlign = "left";
                options.yAlign = "below";
                options.outXAlign = null;
            }



            this.menu.showAtEl(this.el, options);

        }
    },
    hideMenu: function () {
        if (this.menu) this.menu.hide();
    },
    hide: function () {
        this.hideMenu();
        this.setVisible(false);
    },

    __OnItemsChanged: function (e) {
        this.doUpdate();
    },
    getTopMenu: function () {
        if (this.ownerMenu) {
            if (this.ownerMenu.ownerItem) return this.ownerMenu.ownerItem.getTopMenu();
            else return this.ownerMenu;
        }
        return null;
    },

    __OnClick: function (e) {

        if (this.isReadOnly()) return;

        if (this.checkOnClick) {
            if (this.ownerMenu && this.groupName) {
                var groups = this.ownerMenu.getGroupItems(this.groupName);
                if (groups.length > 0) {
                    if (this.checked == false) {
                        for (var i = 0, l = groups.length; i < l; i++) {
                            var item = groups[i];
                            if (item != this) {

                                item.setChecked(false);
                            }
                        }
                        this.setChecked(true);
                    }
                } else {
                    this.setChecked(!this.checked);
                }
            } else {
                this.setChecked(!this.checked);
            }
        }

        this.fire("click");

        var topMenu = this.getTopMenu();
        if (topMenu) {
            topMenu._OnItemClick(this, e);
        }
    },
    __OnMouseUp: function (e) {
        if (this.isReadOnly()) return;

        if (this.ownerMenu) {
            var me = this;
            setTimeout(function () {
                if (me.isDisplay()) {
                    me.ownerMenu.showItemMenu(me);

                }
            }, 1);
        }
    },
    __OnMouseOver: function (e) {

        if (this.isReadOnly()) return;
        this._initInputEvents();
        mini.addClass(this.el, this._hoverCls);

        this.el.title = this.text;

        if (this._textEl.scrollWidth > this._textEl.clientWidth) {
            this.el.title = this.text;
        } else {
            this.el.title = "";
        }

        if (this.ownerMenu) {
            if (this.ownerMenu.isVertical() == true) {
                this.ownerMenu.showItemMenu(this);
            } else if (this.ownerMenu.hasShowItemMenu()) {
                this.ownerMenu.showItemMenu(this);
            }
        }
    },

    __OnMouseOut: function (e) {
        mini.removeClass(this.el, this._hoverCls);
    },
    onClick: function (fn, scope) {
        this.on("click", fn, scope);
    },
    onCheckedChanged: function (fn, scope) {
        this.on("checkedchanged", fn, scope);
    },

    getAttrs: function (el) {
        var attrs = mini.MenuItem.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        attrs.text = el.innerHTML;
        mini._ParseString(el, attrs,
            ["img", "text", "iconCls", "iconStyle", "iconPosition", "groupName", "onclick", "oncheckedchanged"
             ]
        );
        mini._ParseBool(el, attrs,
            ["checkOnClick", "checked"
             ]
        );

        return attrs;
    }
});
mini.regClass(mini.MenuItem, 'menuitem');



mini.Separator = function () {
    mini.Separator.superclass.constructor.call(this);
}
mini.extend(mini.Separator, mini.Control, {
    _clearBorder: false,
    uiCls: "mini-separator",
    _create: function () {
        this.el = document.createElement("span");
        this.el.className = "mini-separator";
    }
});
mini.regClass(mini.Separator, 'separator');


mini.OutlookBar = function () {
    this._initGroups();
    mini.OutlookBar.superclass.constructor.call(this);
}
mini.extend(mini.OutlookBar, mini.Control, {
    width: 180,

    expandOnLoad: true,

    activeIndex: -1,
    autoCollapse: false,

    groupCls: "",
    groupStyle: "",
    groupHeaderCls: "",
    groupHeaderStyle: "",
    groupBodyCls: "",
    groupBodyStyle: "",

    groupHoverCls: "",
    groupActiveCls: "",

    allowAnim: true,

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var _allowLayout = this._allowLayout;
        this._allowLayout = false;

        var activeIndex = kv.activeIndex;
        delete kv.activeIndex;

        mini.OutlookBar.superclass.set.call(this, kv);

        if (mini.isNumber(activeIndex)) {
            this.setActiveIndex(activeIndex);
        }

        this._allowLayout = _allowLayout;
        this.doLayout();

        return this;
    },

    uiCls: "mini-outlookbar",
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-outlookbar";
        this.el.innerHTML = '<div class="mini-outlookbar-border"></div>';
        this._borderEl = this.el.firstChild;

    },
    _initEvents: function () {

        mini._BindEvents(function () {
            mini.on(this.el, "click", this.__OnClick, this);
        }, this);
    },

    _createGroupId: function (group) {
        return this.uid + "$" + group._id;
    },
    _GroupId: 1,
    _initGroups: function () {
        this.groups = [];
    },
    _createGroupEl: function (group) {

        var id = this._createGroupId(group);
        var s = '<div id="' + id + '" class="mini-outlookbar-group ' + group.cls + '" style="' + group.style + '">'
                    + '<div class="mini-outlookbar-groupHeader ' + group.headerCls + '" style="' + group.headerStyle + ';"></div>'
                    + '<div class="mini-outlookbar-groupBody ' + group.bodyCls + '" style="' + group.bodyStyle + ';"></div>'
                + '</div>';
        var el = mini.append(this._borderEl, s);

        var bodyEl = el.lastChild;
        var cs = group.body;
        delete group.body;
        if (cs) {
            if (!mini.isArray(cs)) cs = [cs];
            for (var i = 0, l = cs.length; i < l; i++) {
                var node = cs[i];
                mini.append(bodyEl, node);

            }
            cs.length = 0;
        }


        if (group.bodyParent) {
            var p = group.bodyParent;
            while (p.firstChild) {
                bodyEl.appendChild(p.firstChild);
            }
        }
        delete group.bodyParent;

        return el;
    },
    createGroup: function (options) {
        var group = mini.copyTo({
            _id: this._GroupId++,
            name: "",
            title: "",

            cls: "",
            style: "",
            iconCls: "",
            iconStyle: "",
            headerCls: "",
            headerStyle: "",
            bodyCls: "",
            bodyStyle: "",

            visible: true,
            enabled: true,
            showCollapseButton: true,
            expanded: this.expandOnLoad

        }, options);


        return group;
    },
    setGroups: function (groups) {
        if (!mini.isArray(groups)) return;
        this.removeAll();
        for (var i = 0, l = groups.length; i < l; i++) {
            this.addGroup(groups[i]);
        }
    },
    getGroups: function () {
        return this.groups;
    },
    addGroup: function (group, index) {
        if (typeof group == "string") {
            group = { title: group };
        }
        group = this.createGroup(group);

        if (typeof index != "number") index = this.groups.length;
        this.groups.insert(index, group);

        var el = this._createGroupEl(group);
        group._el = el;
        var index = this.groups.indexOf(group);
        var targetGroup = this.groups[index + 1];
        if (targetGroup) {
            var tEl = this.getGroupEl(targetGroup);
            jQuery(tEl).before(el);
        }
        this.doUpdate();
        return group;
    },
    updateGroup: function (group, options) {
        var group = this.getGroup(group);
        if (!group) return;
        mini.copyTo(group, options);
        this.doUpdate();
    },
    removeGroup: function (group) {
        group = this.getGroup(group);
        if (!group) return;
        var groupEl = this.getGroupEl(group);
        if (groupEl) groupEl.parentNode.removeChild(groupEl);


        this.groups.remove(group);
        this.doUpdate();
    },
    removeAll: function () {
        for (var i = this.groups.length - 1; i >= 0; i--) {
            this.removeGroup(i);
        }
    },
    moveGroup: function (group, index) {
        group = this.getGroup(group);
        if (!group) return;
        target = this.getGroup(index);

        var groupEl = this.getGroupEl(group);
        this.groups.remove(group);

        if (target) {
            index = this.groups.indexOf(target);
            this.groups.insert(index, group);
            var tEl = this.getGroupEl(target);
            jQuery(tEl).before(groupEl);
        } else {
            this.groups.add(group);
            this._borderEl.appendChild(groupEl);
        }

        this.doUpdate();
    },
    doUpdate: function () {
        for (var i = 0, l = this.groups.length; i < l; i++) {
            var group = this.groups[i];
            var groupEl = group._el;
            var headerEl = groupEl.firstChild;
            var groupBodyEl = groupEl.lastChild;

            var icons = '<div class="mini-outlookbar-icon ' + group.iconCls + '" style="' + group.iconStyle + ';"></div>';
            var s = '<div class="mini-tools"><span class="mini-tools-collapse"></span></div>'
                    + ((group.iconStyle || group.iconCls) ? icons : '')
                    + '<div class="mini-outlookbar-groupTitle">' + group.title + '</div><div style="clear:both;"></div>';

            headerEl.innerHTML = s;

            if (group.enabled) {
                mini.removeClass(groupEl, "mini-disabled");
            } else {
                mini.addClass(groupEl, "mini-disabled");
            }

            mini.addClass(groupEl, group.cls);
            mini.setStyle(groupEl, group.style);

            mini.addClass(groupBodyEl, group.bodyCls);
            mini.setStyle(groupBodyEl, group.bodyStyle);

            mini.addClass(headerEl, group.headerCls);
            mini.setStyle(headerEl, group.headerStyle);

            mini.removeClass(groupEl, "mini-outlookbar-firstGroup");
            mini.removeClass(groupEl, "mini-outlookbar-lastGroup");
            if (i == 0) {
                mini.addClass(groupEl, "mini-outlookbar-firstGroup");
            }
            if (i == l - 1) {
                mini.addClass(groupEl, "mini-outlookbar-lastGroup");
            }
        }
        this.doLayout();
    },
    doLayout: function () {
        if (!this.canLayout()) return;
        if (this._inAniming) return;

        this._doLayoutInner();

        for (var i = 0, l = this.groups.length; i < l; i++) {
            var group = this.groups[i];
            var groupEl = group._el;
            var groupBodyEl = groupEl.lastChild;

            if (group.expanded) {
                mini.addClass(groupEl, "mini-outlookbar-expand");
                mini.removeClass(groupEl, "mini-outlookbar-collapse");
            } else {
                mini.removeClass(groupEl, "mini-outlookbar-expand");
                mini.addClass(groupEl, "mini-outlookbar-collapse");
            }
            groupBodyEl.style.height = "auto";
            groupBodyEl.style.display = group.expanded ? "block" : "none";

            groupEl.style.display = group.visible ? "" : "none";

            var w = mini.getWidth(groupEl, true);
            var padding = mini.getPaddings(groupBodyEl);
            var border = mini.getBorders(groupBodyEl);
            if (jQuery.boxModel) {
                w = w - padding.left - padding.right - border.left - border.right;
            }
            groupBodyEl.style.width = w + "px";
        }

        var autoHeight = this.isAutoHeight();

        var acGroup = this.getActiveGroup();
        if (!autoHeight && this.autoCollapse && acGroup) {
            var groupEl = this.getGroupEl(this.activeIndex);
            groupEl.lastChild.style.height = this._getFillGroupBodyHeight() + "px";
        } else {

        }



        mini.layout(this._borderEl);
    },
    _doLayoutInner: function () {
        if (this.isAutoHeight()) {
            this._borderEl.style.height = "auto";
        } else {
            var h = this.getHeight(true);
            if (!jQuery.boxModel) {
                var b2 = mini.getBorders(this._borderEl);
                h = h + b2.top + b2.bottom;
            }
            if (h < 0) h = 0;
            this._borderEl.style.height = h + "px";
        }
    },

    _getFillGroupBodyHeight: function () {

        var h = jQuery(this.el).height();
        var b2 = mini.getBorders(this._borderEl);
        h = h - b2.top - b2.bottom;

        var acGroup = this.getActiveGroup();
        var h2 = 0;
        for (var i = 0, l = this.groups.length; i < l; i++) {
            var group = this.groups[i];
            var div = this.getGroupEl(group);
            if (group.visible == false || group == acGroup) continue;
            var display = div.lastChild.style.display;
            div.lastChild.style.display = "none";
            var dh = jQuery(div).outerHeight();
            div.lastChild.style.display = display;


            var margin = mini.getMargins(div);

            dh = dh + margin.top + margin.bottom;

            h2 += dh;
        }

        h = h - h2;

        var groupEl = this.getGroupEl(this.activeIndex);
        if (!groupEl) return 0;
        h = h - jQuery(groupEl.firstChild).outerHeight();
        if (jQuery.boxModel) {

            var padding = mini.getPaddings(groupEl.lastChild);
            var border = mini.getBorders(groupEl.lastChild);

            h = h - padding.top - padding.bottom - border.top - border.bottom;
        }

        var padding = mini.getPaddings(groupEl);
        var border = mini.getBorders(groupEl);
        var margin = mini.getMargins(groupEl);

        h = h - margin.top - margin.bottom;
        h = h - padding.top - padding.bottom - border.top - border.bottom;

        if (h < 0) h = 0;
        return h;
    },

    getGroup: function (index) {
        if (typeof index == "object") return index;
        if (typeof index == "number") {
            return this.groups[index];
        } else {
            for (var i = 0, l = this.groups.length; i < l; i++) {
                var group = this.groups[i];
                if (group.name == index) return group;
            }
        }
    },
    _getGroupById: function (id) {
        for (var i = 0, l = this.groups.length; i < l; i++) {
            var group = this.groups[i];
            if (group._id == id) return group;
        }
    },
    getGroupEl: function (index) {
        var group = this.getGroup(index);
        if (!group) return null;
        return group._el;
    },
    getGroupBodyEl: function (index) {
        var groupEl = this.getGroupEl(index);
        if (groupEl) return groupEl.lastChild;
        return null;
    },

    setAutoCollapse: function (value) {
        this.autoCollapse = value;
    },
    getAutoCollapse: function () {
        return this.autoCollapse;
    },
    setExpandOnLoad: function (value) {
        this.expandOnLoad = value;
    },
    getExpandOnLoad: function () {
        return this.expandOnLoad;
    },

    setActiveIndex: function (value) {

        var group = this.getGroup(value);
        var acGroup = this.getGroup(this.activeIndex);
        var fire = group != acGroup;

        if (group) {
            this.activeIndex = this.groups.indexOf(group);
        } else {
            this.activeIndex = -1;
        }




        var group = this.getGroup(this.activeIndex);
        if (group) {
            var anim = this.allowAnim;
            this.allowAnim = false;
            this.expandGroup(group);
            this.allowAnim = anim;
        }





    },
    getActiveIndex: function () {
        return this.activeIndex;
    },
    getActiveGroup: function () {
        return this.getGroup(this.activeIndex);
    },
    showGroup: function (group) {
        group = this.getGroup(group);
        if (!group || group.visible == true) return;
        group.visible = true;
        this.doUpdate();
    },
    hideGroup: function (group) {
        group = this.getGroup(group);
        if (!group || group.visible == false) return;
        group.visible = false;
        this.doUpdate();
    },
    toggleGroup: function (group) {
        group = this.getGroup(group);
        if (!group) return;
        if (group.expanded) {
            this.collapseGroup(group);
        } else {
            this.expandGroup(group);
        }
    },
    collapseGroup: function (group) {
        group = this.getGroup(group);
        if (!group) return;
        var expanded = group.expanded;

        var fillHeight = 0;
        if (this.autoCollapse && !this.isAutoHeight()) {
            fillHeight = this._getFillGroupBodyHeight();
        }

        var fire = false;
        group.expanded = false;
        var index = this.groups.indexOf(group);
        if (index == this.activeIndex) {
            this.activeIndex = -1;
            fire = true;
        }

        var el = this.getGroupBodyEl(group);
        if (this.allowAnim && expanded) {
            this._inAniming = true;

            el.style.display = "block";
            el.style.height = "auto";
            if (this.autoCollapse && !this.isAutoHeight()) {
                el.style.height = fillHeight + "px";
            }
            var config = { height: "1px" };

            mini.addClass(el, "mini-outlookbar-overflow");

            var sf = this;
            var jq = jQuery(el);
            jq.animate(
            config,
            180,
            function () {
                sf._inAniming = false;
                mini.removeClass(el, "mini-outlookbar-overflow");
                sf.doLayout();
            }
            );
        } else {
            this.doLayout();
        }

        var e = {
            group: group,
            index: this.groups.indexOf(group),
            name: group.name
        };
        this.fire("Collapse", e);

        if (fire) {

            this.fire("activechanged");
        }
    },
    expandGroup: function (group) {
        group = this.getGroup(group);
        if (!group) return;

        var expanded = group.expanded;


        group.expanded = true;
        this.activeIndex = this.groups.indexOf(group);

        fire = true;

        if (this.autoCollapse) {
            for (var i = 0, l = this.groups.length; i < l; i++) {
                var g = this.groups[i];
                if (g.expanded && g != group) {
                    this.collapseGroup(g);
                }
            }
        }

        var el = this.getGroupBodyEl(group);
        if (this.allowAnim && expanded == false) {
            this._inAniming = true;

            el.style.display = "block";

            if (this.autoCollapse && !this.isAutoHeight()) {
                var fillHeight = this._getFillGroupBodyHeight();
                el.style.height = (fillHeight) + "px";
            } else {
                el.style.height = "auto";
            }

            var h = mini.getHeight(el);

            el.style.height = "1px";
            var config = { height: h + "px" };

            var overflow = el.style.overflow;
            el.style.overflow = "hidden";
            mini.addClass(el, "mini-outlookbar-overflow");


            var sf = this;
            var jq = jQuery(el);
            jq.animate(
                config,
                180,
                function () {
                    el.style.overflow = overflow;
                    mini.removeClass(el, "mini-outlookbar-overflow");
                    sf._inAniming = false;
                    sf.doLayout();
                }
            );
        } else {
            this.doLayout();
        }

        var e = {
            group: group,
            index: this.groups.indexOf(group),
            name: group.name
        };
        this.fire("Expand", e);

        if (fire) {

            this.fire("activechanged");
        }
    },
    _tryToggleGroup: function (group) {
        group = this.getGroup(group);
        var e = {
            group: group,
            groupIndex: this.groups.indexOf(group),
            groupName: group.name,
            cancel: false
        };
        if (group.expanded) {
            this.fire("BeforeCollapse", e);
            if (e.cancel == false) {
                this.collapseGroup(group);
            }
        } else {
            this.fire("BeforeExpand", e);
            if (e.cancel == false) {
                this.expandGroup(group);
            }
        }
    },

    _getGroupByEvent: function (e) {
        var el = mini.findParent(e.target, 'mini-outlookbar-group');
        if (!el) return null;
        var ids = el.id.split("$");
        var id = ids[ids.length - 1];
        return this._getGroupById(id);
    },
    __OnClick: function (e) {
        if (this._inAniming) return;
        var hd = mini.findParent(e.target, 'mini-outlookbar-groupHeader');
        if (!hd) return;

        var group = this._getGroupByEvent(e);
        if (!group) return;

        this._tryToggleGroup(group);
    },








    parseGroups: function (nodes) {
        var groups = [];
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];

            var group = {};
            groups.push(group);

            group.style = node.style.cssText;
            mini._ParseString(node, group,
                ["name", "title", "cls", "iconCls", "iconStyle", "headerCls", "headerStyle", "bodyCls", "bodyStyle"
                 ]
            );
            mini._ParseBool(node, group,
                ["visible", "enabled", "showCollapseButton", "expanded"
                 ]
            );



            group.bodyParent = node;

        }
        return groups;
    },
    getAttrs: function (el) {
        var attrs = mini.OutlookBar.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["onactivechanged", "oncollapse", "onexpand"
                ]
        );


        mini._ParseBool(el, attrs,
            ["autoCollapse", "allowAnim", "expandOnLoad"
                ]
        );
        mini._ParseInt(el, attrs,
            ["activeIndex"
                ]
        );

        var nodes = mini.getChildNodes(el);
        attrs.groups = this.parseGroups(nodes);

        return attrs;
    }
});
mini.regClass(mini.OutlookBar, "outlookbar");


mini.OutlookMenu = function () {
    mini.OutlookMenu.superclass.constructor.call(this);

    this.data = [];
}
mini.extend(mini.OutlookMenu, mini.OutlookBar, {
    url: "",
    textField: "text",
    iconField: "iconCls",
    urlField: "url",

    resultAsTree: false,
    itemsField: "children",
    idField: "id",
    parentField: "pid",

    style: "width:100%;height:100%;",


    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var url = kv.url;
        delete kv.url;
        var activeIndex = kv.activeIndex;
        delete kv.activeIndex;

        mini.OutlookMenu.superclass.set.call(this, kv);

        if (url) {
            this.setUrl(url);
        }
        if (mini.isNumber(activeIndex)) {
            this.setActiveIndex(activeIndex);
        }
        return this;
    },
    uiCls: "mini-outlookmenu",
    destroy: function (removeEl) {
        if (this._menus) {
            var cs = this._menus.clone();
            for (var i = 0, l = cs.length; i < l; i++) {
                var p = cs[i];
                p.destroy();
            }
            this._menus.length = 0;
        }

        mini.OutlookMenu.superclass.destroy.call(this, removeEl);
    },










    _doParseFields: function (list) {
        for (var i = 0, l = list.length; i < l; i++) {
            var o = list[i];
            o.text = o[this.textField];
            o.url = o[this.urlField];
            o.iconCls = o[this.iconField];
        }
    },
    _doLoad: function () {
        var items = [];
        try {
            items = mini.getData(this.url);
        } catch (ex) {

            if (mini_debugger == true) {
                alert("outlooktree json is error.");
            }
        }
        if (this.dataField) {
            items = mini._getMap(this.dataField, items);
        }
        if (!items) items = [];

        if (this.resultAsTree == false) {
            items = mini.arrayToTree(items, this.itemsField, this.idField, this.parentField)
        }

        var list = mini.treeToArray(items, this.itemsField, this.idField, this.parentField)
        this._doParseFields(list);







        this.createNavBarMenu(items);
        this.fire("load");
    },
    loadList: function (list, idField, parentField) {
        idField = idField || this.idField;
        parentField = parentField || this.parentField;
        this._doParseFields(list);
        var tree = mini.arrayToTree(list, this.nodesField, idField, parentField);
        this.load(tree);
    },
    load: function (value) {
        if (typeof value == "string") {
            this.setUrl(value);
        } else {
            this.createNavBarMenu(value);
        }
    },
    setData: function (value) {
        this.load(value);
    },
    setUrl: function (value) {
        this.url = value;
        this._doLoad();
    },
    getUrl: function () {
        return this.url;
    },
    setTextField: function (value) {
        this.textField = value;
    },
    getTextField: function () {
        return this.textField;
    },
    setIconField: function (value) {
        this.iconField = value;
    },
    getIconField: function () {
        return this.iconField;
    },
    setUrlField: function (value) {
        this.urlField = value;
    },
    getUrlField: function () {
        return this.urlField;
    },
    setResultAsTree: function (value) {
        this.resultAsTree = value;
    },
    getResultAsTree: function () {
        return this.resultAsTree;
    },
    setNodesField: function (value) {
        this.nodesField = value;
    },
    getNodesField: function () {
        return this.nodesField;
    },
    setIdField: function (value) {
        this.idField = value;
    },
    getIdField: function () {
        return this.idField;
    },
    setParentField: function (value) {
        this.parentField = value;
    },
    getParentField: function () {
        return this.parentField;
    },
    _selected: null,
    getSelected: function () {
        return this._selected;
    },
    selectNode: function (node) {

        node = this.getNode(node);
        if (!node) return;

        var menu = this._getOwnerMenu(node);
        if (!menu) return;
        this.expandGroup(menu._ownerGroup);

        setTimeout(function () {
            try {
                menu.setSelectedItem(node);
            } catch (ex) { }
        }, 100);

    },
    findNodes: function (fn, scope) {
        var nodes = [];
        scope = scope || this;
        for (var i = 0, l = this._menus.length; i < l; i++) {
            var items = this._menus[i].getItems();
            var nds = [];
            for (var j = 0, k = items.length; j < k; j++) {
                var item = items[j];
                if (fn && fn.call(scope, item) === true) {
                    nds.push(item);
                }
            }
            nodes.addRange(nds);
        }
        return nodes;
    },
    getNode: function (node) {
        for (var i = 0, l = this._menus.length; i < l; i++) {
            var menu = this._menus[i];
            var n = menu.getItem(node);
            if (n) return n;
        }
        return null;
    },
    getList: function () {
        var list = [];
        for (var i = 0, l = this._menus.length; i < l; i++) {
            var menu = this._menus[i];
            var items = menu.getItems();
            list.addRange(items);
        }
        return list;
    },
    _getOwnerMenu: function (node) {
        if (!node) return;
        for (var i = 0, l = this._menus.length; i < l; i++) {
            var menu = this._menus[i];
            var n = menu.getItem(node);
            if (n) return menu;
        }
    },

    getAttrs: function (el) {
        var attrs = mini.OutlookMenu.superclass.getAttrs.call(this, el);

        attrs.text = el.innerHTML;
        mini._ParseString(el, attrs,
            ["url", "textField", "urlField", "idField", "parentField", "itemsField", "iconField",
                "onitemclick", "onitemselect", "ondrawnode"]
        );
        mini._ParseBool(el, attrs,
            ["resultAsTree"]
        );

        return attrs;
    },

    autoCollapse: true,
    activeIndex: 0,
    createNavBarMenu: function (tree) {
        if (!mini.isArray(tree)) tree = [];
        this.data = tree;


        var groups = [];
        for (var i = 0, l = this.data.length; i < l; i++) {
            var o = this.data[i];
            var group = {};
            group.title = o.text;
            group.iconCls = o.iconCls;
            groups.push(group);

            group._children = o[this.itemsField];
        }

        this.setGroups(groups);
        this.setActiveIndex(this.activeIndex);



        this._menus = [];
        for (var i = 0, l = this.groups.length; i < l; i++) {
            var group = this.groups[i];
            var groupBodyEl = this.getGroupBodyEl(group);

            var menu = new mini.Menu();
            menu._ownerGroup = group;
            menu.set({
                showNavArrow: false,
                style: "width:100%;height:100%;border:0;background:none",
                borderStyle: "border:0",
                allowSelectItem: true,
                items: group._children
            });
            menu.render(groupBodyEl);
            menu.on("itemclick", this.__OnItemClick, this);
            menu.on("itemselect", this.__OnItemSelect, this);

            this._onDrawNodes(menu.getItems());

            this._menus.push(menu);
            delete group._children


        }
    },
    _onDrawNodes: function (items) {
        if (!items) return;
        for (var i = 0, l = items.length; i < l; i++) {
            var item = items[i];
            var e = { node: item, img: item.img, nodeHtml: '' };
            this.fire("drawnode", e);
            if (e.img != item.img && item.setImg) {
                item.setImg(e.img);
            }
            if (e.nodeHtml != '') {
                item.setText(e.nodeHtml);
            }
        }
    },
    __OnItemClick: function (e) {
        var eve = {
            item: e.item,
            htmlEvent: e.htmlEvent
        };
        this.fire("itemclick", eve);
    },
    __OnItemSelect: function (e) {
        if (!e.item) return;
        for (var i = 0, l = this._menus.length; i < l; i++) {
            var menu = this._menus[i];
            if (menu != e.sender) {
                menu.setSelectedItem(null);
            }
        }
        var eve = {
            item: e.item,
            htmlEvent: e.htmlEvent
        };
        this._selected = e.item;
        this.fire("itemselect", eve);
    }
});
mini.regClass(mini.OutlookMenu, "outlookmenu");




mini.OutlookTree = function () {
    mini.OutlookTree.superclass.constructor.call(this);

    this.data = [];
}
mini.extend(mini.OutlookTree, mini.OutlookBar, {
    url: "",
    textField: "text",
    iconField: "iconCls",
    urlField: "url",

    resultAsTree: false,
    nodesField: "children",
    idField: "id",
    parentField: "pid",

    style: "width:100%;height:100%;",


    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var url = kv.url;
        delete kv.url;
        var activeIndex = kv.activeIndex;
        delete kv.activeIndex;

        mini.OutlookTree.superclass.set.call(this, kv);

        if (url) {
            this.setUrl(url);
        }
        if (mini.isNumber(activeIndex)) {
            this.setActiveIndex(activeIndex);
        }
        return this;
    },
    uiCls: "mini-outlooktree",
    destroy: function (removeEl) {
        if (this._trees) {
            var cs = this._trees.clone();
            for (var i = 0, l = cs.length; i < l; i++) {
                var p = cs[i];
                p.destroy();
            }
            this._trees.length = 0;
        }

        mini.OutlookTree.superclass.destroy.call(this, removeEl);
    },

    _doParseFields: function (list) {
        for (var i = 0, l = list.length; i < l; i++) {
            var o = list[i];
            o.text = o[this.textField];
            o.url = o[this.urlField];
            o.iconCls = o[this.iconField];
        }
    },
    _doLoad: function () {

        var items = [];
        try {
            items = mini.getData(this.url);
        } catch (ex) {

            if (mini_debugger == true) {
                alert("outlooktree json is error.");
            }
        }
        if (this.dataField) {
            items = mini._getMap(this.dataField, items);
        }
        if (!items) items = [];

        if (this.resultAsTree == false) {
            items = mini.arrayToTree(items, this.nodesField, this.idField, this.parentField)
        }

        var list = mini.treeToArray(items, this.nodesField, this.idField, this.parentField)
        this._doParseFields(list);

        this.createNavBarTree(items);
        this.fire("load");
    },
    loadList: function (list, idField, parentField) {
        idField = idField || this.idField;
        parentField = parentField || this.parentField;
        this._doParseFields(list);
        var tree = mini.arrayToTree(list, this.nodesField, idField, parentField);
        this.load(tree);
    },
    load: function (value) {
        if (typeof value == "string") {
            this.setUrl(value);
        } else {
            this.createNavBarTree(value);
        }
    },
    setData: function (value) {
        this.load(value);
    },
    getData: function () {
        return this.data;
    },
    setUrl: function (value) {
        this.url = value;
        this._doLoad();
    },
    getUrl: function () {
        return this.url;
    },
    setTextField: function (value) {
        this.textField = value;
    },
    getTextField: function () {
        return this.textField;
    },
    setIconField: function (value) {
        this.iconField = value;
    },
    getIconField: function () {
        return this.iconField;
    },
    setUrlField: function (value) {
        this.urlField = value;
    },
    getUrlField: function () {
        return this.urlField;
    },
    setResultAsTree: function (value) {
        this.resultAsTree = value;
    },
    getResultAsTree: function () {
        return this.resultAsTree;
    },
    setNodesField: function (value) {
        this.nodesField = value;
    },
    getNodesField: function () {
        return this.nodesField;
    },
    setIdField: function (value) {
        this.idField = value;
    },
    getIdField: function () {
        return this.idField;
    },
    setParentField: function (value) {
        this.parentField = value;
    },
    getParentField: function () {
        return this.parentField;
    },
    _selected: null,
    getSelected: function () {
        return this._selected;
    },
    selectNode: function (node) {
        node = this.getNode(node);
        if (!node) return;
        var tree = this._getOwnerTree(node);
        tree.selectNode(node);
    },
    expandPath: function (node) {
        node = this.getNode(node);
        if (!node) return;
        var tree = this._getOwnerTree(node);
        tree.expandPath(node);
        this.expandGroup(tree._ownerGroup);
    },
    findNodes: function (fn, scope) {
        var nodes = [];
        scope = scope || this;
        for (var i = 0, l = this._trees.length; i < l; i++) {
            var tree = this._trees[i];
            var nds = tree.findNodes(fn, scope);
            nodes.addRange(nds);
        }
        return nodes;
    },
    getNode: function (node) {
        for (var i = 0, l = this._trees.length; i < l; i++) {
            var tree = this._trees[i];
            var n = tree.getNode(node);
            if (n) return n;
        }
        return null;
    },
    getList: function () {
        var list = [];
        for (var i = 0, l = this._trees.length; i < l; i++) {
            var tree = this._trees[i];
            var nodes = tree.getList();
            list.addRange(nodes);
        }
        return list;
    },
    _getOwnerTree: function (node) {
        if (!node) return;
        for (var i = 0, l = this._trees.length; i < l; i++) {
            var tree = this._trees[i];
            if (tree._idNodes[node._id]) return tree;
        }
    },
    expandOnLoad: false,
    setExpandOnLoad: function (value) {
        this.expandOnLoad = value;
    },
    getExpandOnLoad: function () {
        return this.expandOnLoad;
    },

    getAttrs: function (el) {
        var attrs = mini.OutlookTree.superclass.getAttrs.call(this, el);

        attrs.text = el.innerHTML;
        mini._ParseString(el, attrs,
            ["url", "textField", "urlField", "idField", "parentField", "nodesField", "iconField",
                "onnodeclick", "onnodeselect", "onnodemousedown", "ondrawnode",
                "expandOnLoad"
            ]
        );
        mini._ParseBool(el, attrs,
            ["resultAsTree"]
        );


        if (attrs.expandOnLoad) {
            var level = parseInt(attrs.expandOnLoad);
            if (mini.isNumber(level)) {
                attrs.expandOnLoad = level;
            } else {
                attrs.expandOnLoad = attrs.expandOnLoad == "true" ? true : false;
            }
        }

        return attrs;
    },

    autoCollapse: true,
    activeIndex: 0,
    createNavBarTree: function (tree) {
        if (!mini.isArray(tree)) tree = [];
        this.data = tree;


        var groups = [];
        for (var i = 0, l = this.data.length; i < l; i++) {
            var o = this.data[i];
            var group = {};
            group.title = o.text;
            group.iconCls = o.iconCls;
            groups.push(group);

            group._children = o[this.nodesField];
        }

        this.setGroups(groups);
        this.setActiveIndex(this.activeIndex);


        this._trees = [];
        for (var i = 0, l = this.groups.length; i < l; i++) {
            var group = this.groups[i];
            var groupBodyEl = this.getGroupBodyEl(group);

            var tree = new mini.Tree();

            tree.on("nodeclick", this.__OnNodeClick, this);
            tree.on("nodeselect", this.__OnNodeSelect, this);
            tree.on("nodemousedown", this.__OnNodeMouseDown, this);
            tree.on("drawnode", this.__OnDrawNode, this);

            tree.set({
                idField: this.idField,
                parentField: this.parentField,
                textField: this.textField,
                expandOnLoad: this.expandOnLoad,
                showTreeIcon: true,
                style: "width:100%;height:100%;border:0;background:none",
                data: group._children
            });
            tree.render(groupBodyEl);


            this._trees.push(tree);
            delete group._children

            tree._ownerGroup = group;













        }
        this.doLayout();
    },
    __OnNodeMouseDown: function (e) {
        var eve = {
            node: e.node,
            isLeaf: e.sender.isLeaf(e.node),
            htmlEvent: e.htmlEvent
        };
        this.fire("nodemousedown", eve);
    },
    __OnNodeClick: function (e) {
        var eve = {
            node: e.node,
            isLeaf: e.sender.isLeaf(e.node),
            htmlEvent: e.htmlEvent
        };
        this.fire("nodeclick", eve);
    },
    __OnNodeSelect: function (e) {
        if (!e.node) return;
        for (var i = 0, l = this._trees.length; i < l; i++) {
            var tree = this._trees[i];
            if (tree != e.sender) {
                tree.selectNode(null);
            }
        }

        var eve = {
            node: e.node,
            isLeaf: e.sender.isLeaf(e.node),
            htmlEvent: e.htmlEvent
        };
        this._selected = e.node;
        this.fire("nodeselect", eve);
    },
    __OnDrawNode: function (e) {
        this.fire("drawnode", e);
    }
});
mini.regClass(mini.OutlookTree, "outlooktree");





mini.NavBar = function () {
    mini.NavBar.superclass.constructor.call(this);
}
mini.extend(mini.NavBar, mini.OutlookBar, {
    uiCls: "mini-navbar"
});
mini.regClass(mini.NavBar, "navbar");


mini.NavBarMenu = function () {
    mini.NavBarMenu.superclass.constructor.call(this);
}
mini.extend(mini.NavBarMenu, mini.OutlookMenu, {
    uiCls: "mini-navbarmenu"
});
mini.regClass(mini.NavBarMenu, "navbarmenu");


mini.NavBarTree = function () {
    mini.NavBarTree.superclass.constructor.call(this);
}
mini.extend(mini.NavBarTree, mini.OutlookTree, {
    uiCls: "mini-navbartree"
});
mini.regClass(mini.NavBarTree, "navbartree");


mini.ToolBar = function () {
    mini.ToolBar.superclass.constructor.call(this);
}
mini.extend(mini.ToolBar, mini.Container, {
    _clearBorder: false,
    style: "",

    uiCls: "mini-toolbar",
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-toolbar";

    },
    _initEvents: function () {

    },
    doLayout: function () {
        if (!this.canLayout()) return;


        var nodes = mini.getChildNodes(this.el, true);
        for (var i = 0, l = nodes.length; i < l; i++) {
            mini.layout(nodes[i]);
        }

    },









    set_bodyParent: function (value) {

        if (!value) return;

        this.el = value;








        this.doLayout();
    },

    getAttrs: function (el) {

        var attrs = {};
        mini._ParseString(el, attrs,
            ["id", "borderStyle"
             ]
        );




        this.el = el;
        this.el.uid = this.uid;

        this.addCls(this.uiCls);



        return attrs;
    }
});
mini.regClass(mini.ToolBar, "toolbar");


mini.Pager = function () {
    mini.Pager.superclass.constructor.call(this);
}
mini.extend(mini.Pager, mini.Control, {
    pageIndex: 0,
    pageSize: 10,
    totalCount: 0,
    totalPage: 0,

    showPageIndex: true,
    showPageSize: true,
    showTotalCount: true,

    showPageInfo: true,
    showReloadButton: true,

    _clearBorder: false,

    showButtonText: false,
    showButtonIcon: true,

    firstText: "首页",
    prevText: "上一页",
    nextText: "下一页",
    lastText: "尾页",

    pageInfoText: "每页 {0} 条, 共 {1} 条",
    sizeList: [10, 20, 50, 100],

    uiCls: "mini-pager",
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-pager";


        var s = '<div class="mini-pager-left"><table cellspacing="0" cellpadding="0" border="0"><tr><td></td><td></td></tr></table></div><div class="mini-pager-right"></div>';
        this.el.innerHTML = s;

        this._leftEl = this.el.childNodes[0];
        this._rightEl = this.el.childNodes[1];



        var tds = this._leftEl.getElementsByTagName("td");
        this._barEl = tds[0];
        this._barEl2 = tds[1];

        this.sizeEl = mini.append(this._barEl, '<span class="mini-pager-size"></span>');


        this.sizeCombo = new mini.ComboBox();
        this.sizeCombo.setName("pagesize");
        this.sizeCombo.setWidth(48);
        this.sizeCombo.render(this.sizeEl);
        mini.append(this.sizeEl, '<span class="separator"></span>');

        this.firstButton = new mini.Button();
        this.firstButton.render(this._barEl);

        this.prevButton = new mini.Button();
        this.prevButton.render(this._barEl);

        this.indexEl = document.createElement("span");
        this.indexEl.className = 'mini-pager-index';
        this.indexEl.innerHTML = '<input id="" type="text" class="mini-pager-num"/><span class="mini-pager-pages">/ 0</span>';
        this._barEl.appendChild(this.indexEl);

        this.numInput = this.indexEl.firstChild;
        this.pagesLabel = this.indexEl.lastChild;

        this.nextButton = new mini.Button();
        this.nextButton.render(this._barEl);

        this.lastButton = new mini.Button();
        this.lastButton.render(this._barEl);

        mini.append(this._barEl, '<span class="separator"></span>');

        this.reloadButton = new mini.Button();
        this.reloadButton.render(this._barEl);

        this.firstButton.setPlain(true);
        this.prevButton.setPlain(true);
        this.nextButton.setPlain(true);
        this.lastButton.setPlain(true);
        this.reloadButton.setPlain(true);


        this.buttonsEl = mini.append(this._barEl2, '<div class="mini-page-buttons"></div>');


        this.update();
    },
    setButtons: function (value) {
        __mini_setControls(value, this.buttonsEl, this);
    },
    getButtonsEl: function () {
        return this.buttonsEl;
    },
    destroy: function (removeEl) {
        if (this.pageSelect) {
            mini.clearEvent(this.pageSelect);
            this.pageSelect = null;
        }
        if (this.numInput) {
            mini.clearEvent(this.numInput);
            this.numInput = null;
        }
        this.sizeEl = null;
        this.buttonsEl = null;

        mini.Pager.superclass.destroy.call(this, removeEl);
    },
    _initEvents: function () {

        mini.Pager.superclass._initEvents.call(this);

        this.firstButton.on("click", function (e) {
            this._OnPageChanged(0);
        }, this);
        this.prevButton.on("click", function (e) {
            this._OnPageChanged(this.pageIndex - 1);
        }, this);
        this.nextButton.on("click", function (e) {
            this._OnPageChanged(this.pageIndex + 1);
        }, this);
        this.lastButton.on("click", function (e) {
            this._OnPageChanged(this.totalPage);
        }, this);
        this.reloadButton.on("click", function (e) {
            this._OnPageChanged();
        }, this);


        function doPage() {
            if (changing) return;
            changing = true;
            var index = parseInt(this.numInput.value);
            if (isNaN(index)) {
                this.update();
            } else {
                this._OnPageChanged(index - 1);
            }
            setTimeout(function () {
                changing = false;
            }, 100);
        }

        var changing = false;
        mini.on(this.numInput, "change", function (e) {
            doPage.call(this);
        }, this);

        mini.on(this.numInput, "keydown", function (e) {
            if (e.keyCode == 13) {
                doPage.call(this);
                e.stopPropagation();
            }
        }, this);


        this.sizeCombo.on("valuechanged", this.__OnPageSelectChanged, this);
    },
    doLayout: function () {
        if (!this.canLayout()) return;
        mini.layout(this._leftEl);
        mini.layout(this._rightEl);
    },
    setPageIndex: function (value) {
        if (isNaN(value)) return;
        this.pageIndex = value;
        this.update();
    },
    getPageIndex: function () {
        return this.pageIndex;
    },
    setPageSize: function (value) {
        if (isNaN(value)) return;
        this.pageSize = value;
        this.update();
    },
    getPageSize: function () {
        return this.pageSize;
    },
    setTotalCount: function (value) {
        value = parseInt(value);
        if (isNaN(value)) return;
        this.totalCount = value;
        this.update();
    },
    getTotalCount: function () {
        return this.totalCount;
    },
    setSizeList: function (value) {
        if (!mini.isArray(value)) return;
        this.sizeList = value;
        this.update();
    },
    getSizeList: function () {
        return this.sizeList;
    },
    setShowPageSize: function (value) {
        this.showPageSize = value;
        this.update();
    },
    getShowPageSize: function () {
        return this.showPageSize;
    },
    setShowPageIndex: function (value) {
        this.showPageIndex = value;
        this.update();
    },
    getShowPageIndex: function () {
        return this.showPageIndex;
    },
    setShowTotalCount: function (value) {
        this.showTotalCount = value;
        this.update();
    },
    getShowTotalCount: function () {
        return this.showTotalCount;
    },
    setShowPageInfo: function (value) {
        this.showPageInfo = value;
        this.update();
    },
    getShowPageInfo: function () {
        return this.showPageInfo;
    },
    setShowReloadButton: function (value) {
        this.showReloadButton = value;
        this.update();
    },
    getShowReloadButton: function () {
        return this.showReloadButton;
    },


    getTotalPage: function () {
        return this.totalPage;
    },
    update: function (index, size, total) {

        if (mini.isNumber(index)) this.pageIndex = parseInt(index);
        if (mini.isNumber(size)) this.pageSize = parseInt(size);
        if (mini.isNumber(total)) this.totalCount = parseInt(total);

        this.totalPage = parseInt(this.totalCount / this.pageSize) + 1;
        if ((this.totalPage - 1) * this.pageSize == this.totalCount) {
            this.totalPage -= 1;
        }
        if (this.totalCount == 0) this.totalPage = 0;

        if (this.pageIndex > this.totalPage - 1) {
            this.pageIndex = this.totalPage - 1;
        }
        if (this.pageIndex <= 0) this.pageIndex = 0;
        if (this.totalPage <= 0) this.totalPage = 0;

        this.firstButton.enable();
        this.prevButton.enable();
        this.nextButton.enable();
        this.lastButton.enable();

        if (this.pageIndex == 0) {
            this.firstButton.disable();
            this.prevButton.disable();
        }
        if (this.pageIndex >= this.totalPage - 1) {
            this.nextButton.disable();
            this.lastButton.disable();
        }
        this.numInput.value = this.pageIndex > -1 ? this.pageIndex + 1 : 0;
        this.pagesLabel.innerHTML = "/ " + this.totalPage;

        var sizeList = this.sizeList.clone();
        if (sizeList.indexOf(this.pageSize) == -1) {
            sizeList.push(this.pageSize);
            sizeList = sizeList.sort(function (a, b) {
                return a > b;
            });
        }
        var sizes = [];
        for (var i = 0, l = sizeList.length; i < l; i++) {
            var num = sizeList[i];
            var option = {};
            option.text = num;
            option.id = num;
            sizes.push(option);
        }
        this.sizeCombo.setData(sizes);
        this.sizeCombo.setValue(this.pageSize);


        var firstText = this.firstText, prevText = this.prevText, nextText = this.nextText, lastText = this.lastText;
        if (this.showButtonText == false) {
            firstText = prevText = nextText = lastText = "";
        }
        this.firstButton.setText(firstText);
        this.prevButton.setText(prevText);
        this.nextButton.setText(nextText);
        this.lastButton.setText(lastText);

        var firstText = this.firstText, prevText = this.prevText, nextText = this.nextText, lastText = this.lastText;
        if (this.showButtonText == true) {
            firstText = prevText = nextText = lastText = "";
        }
        this.firstButton.setTooltip(firstText);
        this.prevButton.setTooltip(prevText);
        this.nextButton.setTooltip(nextText);
        this.lastButton.setTooltip(lastText);

        this.firstButton.setIconCls(this.showButtonIcon ? "mini-pager-first" : "");
        this.prevButton.setIconCls(this.showButtonIcon ? "mini-pager-prev" : "");
        this.nextButton.setIconCls(this.showButtonIcon ? "mini-pager-next" : "");
        this.lastButton.setIconCls(this.showButtonIcon ? "mini-pager-last" : "");

        this.reloadButton.setIconCls(this.showButtonIcon ? "mini-pager-reload" : "");
        this.reloadButton.setVisible(this.showReloadButton);

        var s = this.reloadButton.el.previousSibling;
        if (s) {
            s.style.display = this.showReloadButton ? "" : "none";
        }


        this._rightEl.innerHTML = String.format(this.pageInfoText, this.pageSize, this.totalCount);

        this.indexEl.style.display = this.showPageIndex ? "" : "none";
        this.sizeEl.style.display = this.showPageSize ? "" : "none";
        this._rightEl.style.display = this.showPageInfo ? "" : "none";




    },
    __OnPageSelectChanged: function (e) {
        var size = parseInt(this.sizeCombo.getValue());
        this._OnPageChanged(0, size);
    },
    _OnPageChanged: function (index, size) {

        var e = {
            pageIndex: mini.isNumber(index) ? index : this.pageIndex,
            pageSize: mini.isNumber(size) ? size : this.pageSize,
            cancel: false
        };
        if (e.pageIndex > this.totalPage - 1) {
            e.pageIndex = this.totalPage - 1;
        }
        if (e.pageIndex < 0) e.pageIndex = 0;

        this.fire("beforepagechanged", e);
        if (e.cancel == true) {
            return;
        }

        this.fire("pagechanged", e);
        this.update(e.pageIndex, e.pageSize);

    },
    onPageChanged: function (fn, scope) {
        this.on("pagechanged", fn, scope);
    },
    getAttrs: function (el) {
        var attrs = mini.Pager.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["onpagechanged", "sizeList", "onbeforepagechanged", "buttons"
                ]
        );
        mini._ParseBool(el, attrs,
            ["showPageIndex", "showPageSize", "showTotalCount", "showPageInfo", "showReloadButton"
                ]
        );
        mini._ParseInt(el, attrs,
            ["pageIndex", "pageSize", "totalCount"
                ]
        );



        if (typeof attrs.sizeList == "string") {
            attrs.sizeList = eval(attrs.sizeList);
        }
        if (attrs.buttons) {
            attrs.buttons = mini.byId(attrs.buttons);

        }
        return attrs;
    }

});
mini.regClass(mini.Pager, "pager");


mini.DataGrid = function () {
    this.data = [];
    this._idRows = {};
    this._removes = [];
    this._originals = {};

    this.columns = [];
    this._bottomColumns = [];
    this._idColumns = {};
    this._nameColumns = {};

    this._selecteds = [];
    this._idSelecteds = {};

    this._cellErrors = [];
    this._cellMapErrors = {};

    mini.DataGrid.superclass.constructor.call(this);

    this.doUpdate();


    var sf = this;
    setTimeout(function () {
        if (sf.autoLoad) {

            sf.reload();
        }
    }, 1);



}
mini.DataGrid.RowID = 0;
mini.DataGrid.ColumnID = 0;
mini.extend(mini.DataGrid, mini.Control, {
    _displayStyle: "block",
    width: 300,
    height: "auto",

    allowCellValid: false,
    cellEditAction: "cellclick",

    showEmptyText: false,
    emptyText: "No data returned.",

    showModified: true,

    minWidth: 300,
    minHeight: 150,
    maxWidth: 5000,
    maxHeight: 3000,

    _viewRegion: null,
    _virtualRows: 50,
    virtualScroll: false,
    allowCellWrap: false,

    allowHeaderWrap: false,

    showColumnsMenu: false,

    bodyCls: "",
    bodyStyle: "",

    footerCls: "",
    footerStyle: "",

    pagerCls: "",
    pagerStyle: "",

    idField: "id",
    data: [],
    columns: null,

    allowResize: false,

    selectOnLoad: false,

    _rowIdField: "_uid",

    columnWidth: 120,
    columnMinWidth: 20,
    columnMaxWidth: 2000,
    fitColumns: true,

    autoHideRowDetail: true,

    showHeader: true,
    showFooter: true,
    showTop: false,

    showHGridLines: true,
    showVGridLines: true,
    showFilterRow: false,
    showSummaryRow: false,

    sortMode: "server",
    allowSortColumn: true,
    allowMoveColumn: true,
    allowResizeColumn: true,

    enableHotTrack: true,
    allowRowSelect: true,
    multiSelect: false,
    allowAlternating: false,
    _alternatingCls: "mini-grid-row-alt",

    allowUnselect: false,


    _frozenCls: "mini-grid-frozen",
    _frozenCellCls: "mini-grid-frozenCell",
    frozenStartColumn: -1,
    frozenEndColumn: -1,
    isFrozen: function () {
        return this.frozenStartColumn >= 0 && this.frozenEndColumn >= this.frozenStartColumn;
    },

    _rowCls: "mini-grid-row",
    _rowHoverCls: "mini-grid-row-hover",
    _rowSelectedCls: "mini-grid-row-selected",

    _headerCellCls: "mini-grid-headerCell",
    _cellCls: "mini-grid-cell",

    set: function (kv) {
        var columns = kv.columns;
        delete kv.columns;

        mini.DataGrid.superclass.set.call(this, kv);

        if (columns) this.setColumns(columns);

        return this;
    },

    uiCls: "mini-datagrid",
    _create: function () {

        var el = this.el = document.createElement("div");
        this.el.className = "mini-grid";
        this.el.style.display = "block";

        this.el.tabIndex = 1;
        var s = '<div class="mini-grid-border">'
                    + '<div class="mini-grid-header"><div class="mini-grid-headerInner"></div></div>'
                    + '<div class="mini-grid-filterRow"></div>'
                    + '<div class="mini-grid-body"><div class="mini-grid-bodyInner"></div><div class="mini-grid-body-scrollHeight"></div></div>'
                    + '<div class="mini-grid-scroller"><div></div></div>'
                    + '<div class="mini-grid-summaryRow"></div>'
                    + '<div class="mini-grid-footer"></div>'
                    + '<div class="mini-resizer-trigger" style=""></div>'
                    + '<a href="#" class="mini-grid-focus" style="position:absolute;left:-10px;top:-10px;width:0px;height:0px;outline:none;" hideFocus onclick="return false" ></a>'
                    + '</div>';
        this.el.innerHTML = s;

        this._borderEl = this.el.firstChild;
        this._headerEl = this._borderEl.childNodes[0];
        this._filterEl = this._borderEl.childNodes[1];
        this._bodyEl = this._borderEl.childNodes[2];
        this._bodyInnerEl = this._bodyEl.childNodes[0];
        this._bodyScrollEl = this._bodyEl.childNodes[1];

        this._headerInnerEl = this._headerEl.firstChild;

        this._scrollEl = this._borderEl.childNodes[3];
        this._summaryEl = this._borderEl.childNodes[4];
        this._footerEl = this._borderEl.childNodes[5];
        this._resizeEl = this._borderEl.childNodes[6];
        this._focusEl = this._borderEl.childNodes[7];

        this._doUpdateFilterRow();
        this._doUpdateSummaryRow();

        mini.setStyle(this._bodyEl, this.bodyStyle);
        mini.addClass(this._bodyEl, this.bodyCls);

        this._createPager();

        this._doShowRows();
    },
    destroy: function (removeEl) {
        if (this._bodyEl) {
            mini.clearEvent(this._bodyEl);

            this._bodyEl = null;
        }
        if (this._scrollEl) {
            mini.clearEvent(this._scrollEl);

            this._scrollEl = null;
        }
        this._borderEl = null;
        this._headerEl = null;
        this._filterEl = null;
        this._bodyEl = null;
        this._scrollEl = null;
        this._summaryEl = null;
        this._footerEl = null;
        this._resizeEl = null;
        mini.DataGrid.superclass.destroy.call(this, removeEl);
    },
    _initEvents: function () {
        js_touchScroll(this._bodyEl);

        mini._BindEvents(function () {
            mini.on(this.el, 'click', this.__OnClick, this);
            mini.on(this.el, 'dblclick', this.__OnDblClick, this);

            mini.on(this.el, 'mousedown', this.__OnMouseDown, this);
            mini.on(this.el, 'mouseup', this.__OnMouseUp, this);
            mini.on(this.el, 'mousemove', this.__OnMouseMove, this);
            mini.on(this.el, 'mouseover', this.__OnMouseOver, this);
            mini.on(this.el, 'mouseout', this.__OnMouseOut, this);

            mini.on(this.el, 'keydown', this.__OnKeyDown, this);
            mini.on(this.el, 'keyup', this.__OnKeyUp, this);

            mini.on(this.el, 'contextmenu', this.__OnContextMenu, this);

            mini.on(this._bodyEl, "scroll", this.__OnBodyScroll, this);
            mini.on(this._scrollEl, "scroll", this.__OnHScroll, this);

            mini.on(this.el, "mousewheel", this.__OnMousewheel, this);





        }, this);

        this._Resizer = new mini._Resizer(this);
        this._Splitter = new mini._ColumnSplitter(this);
        this._ColumnMove = new mini._ColumnMove(this);
        this._Select = new mini._GridSelect(this);
        this._CellTip = new mini._CellToolTip(this);
        this._Sort = new mini._GridSort(this);
        this._ColumnsMenu = new mini._ColumnsMenu(this);
    },

    _doShowRows: function () {
        this._resizeEl.style.display = this.allowResize ? "" : "none";
        this._footerEl.style.display = this.showFooter ? "" : "none";
        this._summaryEl.style.display = this.showSummaryRow ? "" : "none";
        this._filterEl.style.display = this.showFilterRow ? "" : "none";
        this._headerEl.style.display = this.showHeader ? "" : "none";
    },
    focus: function () {
        try {
            var row = this.getCurrent();
            if (row) {
                var rowEl = this._getRowEl(row);
                if (rowEl) {
                    var rowBox = mini.getBox(rowEl);
                    mini.setY(this._focusEl, rowBox.top);

                    if (isOpera) {
                        rowEl.focus();
                    } else if (isChrome) {
                        this.el.focus();
                    } else if (isGecko) {
                        this.el.focus();
                    } else {
                        this._focusEl.focus();
                    }
                }
            } else {
                this._focusEl.focus();
            }

        } catch (e) { }
    },
    _createPager: function () {
        this.pager = new mini.Pager();
        this.pager.render(this._footerEl);
        this.bindPager(this.pager);


    },
    setPagerButtons: function (value) {
        this.pager.setButtons(value);
    },
    setPager: function (value) {
        if (typeof value == "string") {
            var el = mini.byId(value);
            if (!el) return;
            mini.parse(value);
            value = mini.get(value);
        }
        if (value) {
            this.bindPager(value);
        }
    },
    bindPager: function (pager) {
        pager.on("beforepagechanged", this.__OnPageChanged, this);
        this.on("load", function (e) {
            pager.update(this.pageIndex, this.pageSize, this.totalCount);
            this.totalPage = pager.totalPage;
        }, this);
    },

    setIdField: function (value) {
        this.idField = value;
    },
    getIdField: function () {
        return this.idField;
    },
    setUrl: function (url) {
        this.url = url;
    },
    getUrl: function (url) {
        return this.url;
    },
    setAutoLoad: function (value) {
        this.autoLoad = value;
    },
    getAutoLoad: function (value) {
        return this.autoLoad;
    },
    accept: function () {
        this._canUpdateRowEl = false;
        var data = this.getData();
        for (var i = 0, l = data.length; i < l; i++) {
            var row = data[i];
            this.acceptRecord(row);
        }
        this._canUpdateRowEl = true;

        this.doUpdate();
    },
    acceptRecord: function (row) {
        row = this.getRow(row);
        if (!row) return;

        if (row._state == "removed") {
            this._removes.remove(row);
        }

        delete this._originals[row._uid];
        delete row._state;

        if (this._canUpdateRowEl) {
            this._updateRowEl(row);
        }
    },
    _clearOriginals: true,
    loadData: function (data) {

        if (!mini.isArray(data)) data = [];

        this.data = data;

        if (this._clearOriginals == true) {
            this._originals = {};
        }
        this._removes = [];
        this._idRows = {};
        this._selecteds = [];
        this._idSelecteds = {};

        this._cellErrors = [];
        this._cellMapErrors = {};

        this._margedCells = null;
        this._mergedCellMaps = null;

        this._groupDataView = null;

        for (var i = 0, l = data.length; i < l; i++) {
            var row = data[i];
            row._uid = mini.DataGrid.RowID;

            row._index = i;
            this._idRows[row._uid] = row;

            mini.DataGrid.RowID += 1;
        }

        this.doUpdate();

    },
    setData: function (data) {
        this.loadData(data);
    },
    getData: function () {
        return this.data.clone();
    },
    toArray: function () {
        return this.data.clone();
    },
    getRange: function (start, end) {
        if (start > end) {
            var t = start;
            start = end;
            end = t;
        }
        var data = this.data;
        var range = [];
        for (var i = start, l = end; i <= l; i++) {
            var o = data[i];
            range.push(o);
        }
        return range;
    },
    selectRange: function (start, end) {
        if (!mini.isNumber(start)) start = this.indexOf(start);
        if (!mini.isNumber(end)) end = this.indexOf(end);
        if (mini.isNull(start) || mini.isNull(end)) return;

        var rs = this.getRange(start, end);
        this.selects(rs);
    },

    getHeaderHeight: function () {
        return this.showHeader ? mini.getHeight(this._headerEl) : 0;
    },
    getFooterHeight: function () {

        return this.showFooter ? mini.getHeight(this._footerEl) : 0;
    },
    getFilterRowHeight: function () {
        return this.showFilterRow ? mini.getHeight(this._filterEl) : 0;
    },
    getSummaryRowHeight: function () {
        return this.showSummaryRow ? mini.getHeight(this._summaryEl) : 0;
    },
    _getScrollHeight: function () {
        return this.isFrozen() ? mini.getHeight(this._scrollEl) : 0;
    },

    _CreateTopTr: function (name) {
        var isEmpty = name == "empty";
        var height = 0;
        if (isEmpty && this.showEmptyText == false) height = 1;

        var s = "";
        var columns = this.getBottomColumns();
        if (isEmpty) {
            s += '<tr style="height:' + height + 'px">';
        } else {
            if (isIE) {
                if (isIE6 || isIE7 || (isIE8 && !mini.boxModel) || (isIE9 && !mini.boxModel)) {
                    s += '<tr style="display:none;height:0px;">';
                } else {
                    s += '<tr style="height:0px;">';
                }
            } else {
                s += '<tr style="height:' + height + 'px">';
            }
        }
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var width = column.width;
            var id = this._createColumnId(column) + "$" + name;

            s += '<td id="' + id + '" style="padding:0;border:0;margin:0;height:' + height + 'px;';
            if (column.width) s += 'width:' + column.width;

            if (i < this.frozenStartColumn || column.visible == false) {
                s += ";display:none;";
            }

            s += '" ></td>';
        }
        s += "</tr>";
        return s;
    },
    _doUpdateFilterRow: function () {

        if (this._filterEl.firstChild) {
            this._filterEl.removeChild(this._filterEl.firstChild);
        }
        var isFrozen = this.isFrozen();
        var columns = this.getBottomColumns();
        var sb = [];
        sb[sb.length] = '<table class="mini-grid-table" cellspacing="0" cellpadding="0">';
        sb[sb.length] = this._CreateTopTr("filter");
        sb[sb.length] = '<tr >';
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var id = this._createFilterCellId(column);

            sb[sb.length] = '<td id="';
            sb[sb.length] = id;
            sb[sb.length] = '" class="mini-grid-filterCell" style="';
            if ((isFrozen && i < this.frozenStartColumn)
                    || column.visible == false
                    || column._hide == true) {
                sb[sb.length] = ";display:none;";
            }
            sb[sb.length] = '"><span class="mini-grid-hspace"></span></td>';
        }

        sb[sb.length] = '</tr></table><div class="mini-grid-scrollCell"></div>';
        this._filterEl.innerHTML = sb.join('');



        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            if (column.filter) {

                var cellEl = this.getFilterCellEl(i);
                column.filter.render(cellEl);
            }
        }
    },
    _doUpdateSummaryRow: function () {

        var records = this.getData();
        if (this._summaryEl.firstChild) {
            this._summaryEl.removeChild(this._summaryEl.firstChild);
        }
        var isFrozen = this.isFrozen();
        var columns = this.getBottomColumns();
        var sb = [];
        sb[sb.length] = '<table class="mini-grid-table" cellspacing="0" cellpadding="0">';
        sb[sb.length] = this._CreateTopTr("summary");
        sb[sb.length] = '<tr >';
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var id = this._createSummaryCellId(column);

            var e = this._OnDrawSummaryCell(records, column);

            sb[sb.length] = '<td id="';
            sb[sb.length] = id;
            sb[sb.length] = '" class="mini-grid-summaryCell ' + e.cellCls + '" style="' + e.cellStyle + ';';
            if ((isFrozen && i < this.frozenStartColumn)
                    || column.visible == false
                    || column._hide == true) {
                sb[sb.length] = ";display:none;";
            }
            sb[sb.length] = '">';
            sb[sb.length] = e.cellHtml;
            sb[sb.length] = '</td>';
        }

        sb[sb.length] = '</tr></table><div class="mini-grid-scrollCell"></div>';
        this._summaryEl.innerHTML = sb.join('');
    },
    _createHeaderText: function (column) {
        var header = column.header;
        if (typeof header == "function") header = header.call(this, column);
        if (mini.isNull(header) || header === "") header = "&nbsp;";
        return header;
    },
    _doUpdateHeader: function (style) {
        style = style || "";
        var isFrozen = this.isFrozen();

        var rows = this.getColumnRows();

        var bottomColumns = this.getBottomColumns();
        var columnLength = bottomColumns.length;

        var sb = [];
        sb[sb.length] = '<table style="' + style + ';display:table" class="mini-grid-table" cellspacing="0" cellpadding="0">';
        sb[sb.length] = this._CreateTopTr("header");

        for (var j = 0, k = rows.length; j < k; j++) {
            var columns = rows[j];

            sb[sb.length] = '<tr >';
            for (var i = 0, l = columns.length; i < l; i++) {
                var column = columns[i];
                var header = this._createHeaderText(column);

                var columnId = this._createColumnId(column);

                var sortCls = "";
                if (this.sortField == column.field) {
                    sortCls = this.sortOrder == "asc" ? "mini-grid-asc" : "mini-grid-desc";
                }

                sb[sb.length] = '<td id="';
                sb[sb.length] = columnId;
                sb[sb.length] = '" class="mini-grid-headerCell ' + sortCls + ' ' + (column.headerCls || "") + ' ';

                if (i == columnLength - 1) {
                    sb[sb.length] = " mini-grid-last-column ";
                }

                sb[sb.length] = '" style="';
                var bottomIndex = bottomColumns.indexOf(column);
                if ((isFrozen && bottomIndex != -1 && bottomIndex < this.frozenStartColumn)
                    || column.visible == false
                    || column._hide == true) {
                    sb[sb.length] = ";display:none;";
                }

                if (column.columns && column.columns.length > 0 && column.colspan == 0) {
                    sb[sb.length] = ";display:none;";
                }

                if (column.headerStyle) {
                    sb[sb.length] = column.headerStyle + ';';
                }
                if (column.headerAlign) {
                    sb[sb.length] = 'text-align:' + column.headerAlign + ';';
                }

                sb[sb.length] = '" ';

                if (column.rowspan) {
                    sb[sb.length] = 'rowspan="' + column.rowspan + '" ';
                }
                if (column.colspan) {
                    sb[sb.length] = 'colspan="' + column.colspan + '" ';
                }

                sb[sb.length] = '><div class="mini-grid-cellInner">';

                sb[sb.length] = header;

                if (sortCls) {
                    sb[sb.length] = '<span class="mini-grid-sortIcon"></span>';
                }

                sb[sb.length] = '</div>';

                sb[sb.length] = '</td>';
            }
            sb[sb.length] = '</tr>';
        }
        sb[sb.length] = '</table>';

        var s = sb.join("");
        s = '<div class="mini-grid-header">' + s + '</div>';








        var s = '<div class="mini-grid-scrollHeaderCell"></div>';
        s += '<div class="mini-grid-topRightCell"></div>';

        this._headerInnerEl.innerHTML = sb.join('') + s;
        this._topRightCellEl = this._headerInnerEl.lastChild;




        this.fire("refreshHeader");
    },
    _destroyEditors: function () {
        var controls = mini.getChildControls(this);
        var editors = [];
        for (var i = 0, l = controls.length; i < l; i++) {
            var ui = controls[i];
            if (ui.el && mini.findParent(ui.el, this._rowCls)) {
                editors.push(ui);
                ui.destroy();
            }
        }

    },
    _doUpdateBody: function () {

        this._destroyEditors();


        var columns = this.getBottomColumns();

        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            delete column._hide;
        }


        this._doUpdateHeader();


        var data = this.data;


        var isVirtualScroll = this.isVirtualScroll();
        var viewRegion = this._markRegion();

        var sb = [];

        var autoHeight = this.isAutoHeight();
        var top = 0;

        if (isVirtualScroll) {
            top = viewRegion.top;
        }

        if (autoHeight) {
            sb[sb.length] = '<table class="mini-grid-table" cellspacing="0" cellpadding="0">';
        } else {
            sb[sb.length] = '<table style="position:absolute;top:' + top + 'px;left:0;" class="mini-grid-table" cellspacing="0" cellpadding="0">';
        }

        sb[sb.length] = this._CreateTopTr("body");





        if (data.length > 0) {
            if (this.isGrouping()) {
                var rowIndex = 0;

                var groups = this._getGroupDataView();
                var visibleColumns = this.getVisibleColumns();

                for (var j = 0, k = groups.length; j < k; j++) {
                    var group = groups[j];
                    var id = this.uid + "$group$" + group.id;
                    var e = this._OnDrawGroup(group);


                    sb[sb.length] = '<tr id="' + id + '" class="mini-grid-groupRow"><td class="mini-grid-groupCell" colspan="' + visibleColumns.length + '"><div class="mini-grid-groupHeader">';
                    sb[sb.length] = '<div class="mini-grid-group-ecicon"></div>';
                    sb[sb.length] = '<div class="mini-grid-groupTitle">' + e.cellHtml + '</div>';
                    sb[sb.length] = '</div></td></tr>';

                    var rows = group.rows;
                    for (var i = 0, l = rows.length; i < l; i++) {
                        var row = rows[i];
                        this._createRow(row, sb, rowIndex++);
                    }

                    if (this.showGroupSummary) {

                    }
                }

            } else {

                if (isVirtualScroll) {





                    var start = viewRegion.start, end = viewRegion.end;
                    for (var i = start, l = end; i < l; i++) {
                        var row = data[i];
                        this._createRow(row, sb, i);
                    }

                } else {
                    for (var i = 0, l = data.length; i < l; i++) {
                        var row = data[i];
                        this._createRow(row, sb, i);
                    }
                }
            }
        } else {



            if (this.showEmptyText) {
                sb[sb.length] = '<tr ><td class="mini-grid-emptyText" colspan="' + this.getVisibleColumns().length + '">' + this.emptyText + '</td></tr>';
            }
        }
        sb[sb.length] = '</table>';

        if (this._bodyInnerEl.firstChild) {
            this._bodyInnerEl.removeChild(this._bodyInnerEl.firstChild);
        }

        this._bodyInnerEl.innerHTML = sb.join('');

        if (isVirtualScroll) {

            this._rowHeight = 23;
            try {
                var rowEl = this._bodyInnerEl.firstChild.rows[1];
                if (rowEl) this._rowHeight = rowEl.offsetHeight;
            } catch (ex) { }
            var rowAllHeight = this._rowHeight * this.data.length;

            this._bodyScrollEl.style.display = "block";
            this._bodyScrollEl.style.height = rowAllHeight + "px";
        } else {
            this._bodyScrollEl.style.display = "none";
        }
    },
    showNewRow: true,
    _createRow: function (row, sb, rowIndex) {
        if (!mini.isNumber(rowIndex)) rowIndex = this.indexOf(row);

        var lastRow = rowIndex == this.data.length - 1;

        var isFrozen = this.isFrozen();
        var ret = !sb;
        if (!sb) sb = [];
        var columns = this.getBottomColumns();

        var rowClsIndex = -1;
        var rowCls = " ";
        var rowStyleIndex = -1;
        var rowStyle = " ";

        sb[sb.length] = '<tr id="';
        sb[sb.length] = this._createRowId(row);
        sb[sb.length] = '" class="mini-grid-row ';
        if (this.isSelected(row)) {
            sb[sb.length] = this._rowSelectedCls;
            sb[sb.length] = " ";
        }

        if (row._state == "deleted") sb[sb.length] = "mini-grid-deleteRow ";
        if (row._state == "added" && this.showNewRow) sb[sb.length] = "mini-grid-newRow ";


        if (this.allowAlternating && rowIndex % 2 == 1) {
            sb[sb.length] = this._alternatingCls;
            sb[sb.length] = " ";
        }

        rowClsIndex = sb.length;
        sb[sb.length] = rowCls;
        sb[sb.length] = '" style="';
        rowStyleIndex = sb.length;
        sb[sb.length] = rowStyle;
        sb[sb.length] = '">';

        var columnsCount = columns.length - 1;

        for (var j = 0, k = columnsCount; j <= k; j++) {
            var column = columns[j];

            var isModified = column.field ? this._HasRowModified(row, column.field) : false;
            var error = this.getCellError(row, column);

            var e = this._OnDrawCell(row, column, rowIndex, j);

            var cellId = this._createCellId(row, column);


            sb[sb.length] = '<td id="';
            sb[sb.length] = cellId;
            sb[sb.length] = '" class="mini-grid-cell ';
            if (e.cellCls) sb[sb.length] = e.cellCls;
            if (error) sb[sb.length] = " mini-grid-cell-error ";

            if (this._currentCell && this._currentCell[0] == row && this._currentCell[1] == column) {
                sb[sb.length] = " ";
                sb[sb.length] = this._cellSelectedCls;
            }

            if (lastRow) {
                sb[sb.length] = " mini-grid-last-row ";
            }
            if (j == columnsCount) {
                sb[sb.length] = " mini-grid-last-column ";
            }

            if (isFrozen && this.frozenStartColumn <= j && j <= this.frozenEndColumn) {
                sb[sb.length] = " ";
                sb[sb.length] = this._frozenCellCls + " ";
            }

            sb[sb.length] = '" style="';

            if (column.align) {
                sb[sb.length] = 'text-align:';
                sb[sb.length] = column.align;
                sb[sb.length] = ';';
            }

            if (e.allowCellWrap) {

                sb[sb.length] = "white-space:normal;text-overflow:normal;word-break:break-all;";
            }

            if (e.cellStyle) {
                sb[sb.length] = e.cellStyle;
                sb[sb.length] = ";";
            }

            if (isFrozen && j < this.frozenStartColumn || column.visible == false || column._hide == true) {

                sb[sb.length] = "display:none;";
            }
            if (e.visible == false) {

                sb[sb.length] = "display:none;";
            }

            sb[sb.length] = '" ';

            if (e.rowSpan) {
                sb[sb.length] = 'rowspan="' + e.rowSpan + '"';
            }
            if (e.colSpan) {
                sb[sb.length] = 'colspan="' + e.colSpan + '"';
            }

            sb[sb.length] = '>';

            if (isModified && this.showModified) {
                sb[sb.length] = '<div class="mini-grid-cell-inner mini-grid-cell-dirty" style="';





                sb[sb.length] = '">';
            }

            sb[sb.length] = e.cellHtml;
            if (isModified) {
                sb[sb.length] = '</div>';
            }
            sb[sb.length] = '</td>';

            if (e.rowCls) rowCls = e.rowCls;
            if (e.rowStyle) rowStyle = e.rowStyle;
        }

        sb[rowClsIndex] = rowCls;
        sb[rowStyleIndex] = rowStyle;

        sb[sb.length] = '</tr>';

        if (ret) {

            return sb.join('');
        }
    },
    isVirtualScroll: function () {
        return this.virtualScroll && this.isAutoHeight() == false && this.isGrouping() == false;
    },
    getScrollLeft: function () {
        return this.isFrozen() ? this._scrollEl.scrollLeft : this._bodyEl.scrollLeft;
    },

    doUpdate: function () {

        var sss = new Date();
        if (this._allowUpdate === false) return;



        if (this.isAutoHeight() == true) {
            this.addCls("mini-grid-auto");
        } else {
            this.removeCls("mini-grid-auto");
        }

        if (this._doUpdateSummaryRow) this._doUpdateSummaryRow();

        this._doUpdateBody();


        if (this.isVirtualScroll()) {

        }



        if (this.isFrozen()) {


            var me = this;

            me.__OnHScroll();

        } else {

        }







        this.doLayout();





    },
    _fixIE: function () {
        if (isIE) {

            this._borderEl.style.display = "none";
            h = this.getHeight(true);
            w = this.getWidth(true);
            this._borderEl.style.display = "";
        }
    },
    _deferLayout: function () {


        var me = this;
        if (this._layoutTimer) return;
        this._layoutTimer = setTimeout(function () {
            me.doLayout();
            me._layoutTimer = null;
        }, 1);
    },
    doLayout: function () {

        if (!this.canLayout()) return;


        this._filterEl.scrollLeft = this._summaryEl.scrollLeft = this._headerInnerEl.scrollLeft = this._bodyEl.scrollLeft;


        var sss = new Date();

        var isFrozen = this.isFrozen();

        var headerTable = this._headerInnerEl.firstChild, bodyTable = this._bodyInnerEl.firstChild;
        var filterTable = this._filterEl.firstChild, summaryTable = this._summaryEl.firstChild;





        var data = this.getData();
        if (data.length == 0) {
            bodyTable.style.height = "1px";
        } else {
            bodyTable.style.height = "auto";
        }




        var autoHeight = this.isAutoHeight();

        h = this.getHeight(true);
        w = this.getWidth(true);

        var elWidth = w;
        if (elWidth < 17) elWidth = 17;
        if (h < 0) h = 0;

        var bodyWidth = elWidth, bodyHeight = 2000;

        if (!autoHeight) {
            h = h - this.getHeaderHeight() - this.getFooterHeight() - this.getFilterRowHeight() - this.getSummaryRowHeight() - this._getScrollHeight();
            if (h < 0) h = 0;

            this._bodyEl.style.height = h + "px";

            bodyHeight = h;
        } else {
            this._bodyEl.style.height = "auto";
        }



        var bodyScrollHeight = this._bodyEl.scrollHeight;
        var bodyClientHeight = this._bodyEl.clientHeight;


        var hiddenY = jQuery(this._bodyEl).css("overflow-y") == "hidden";
        if (this.isFitColumns()) {

            if (hiddenY || bodyClientHeight >= bodyScrollHeight || autoHeight) {
                var w = (bodyWidth - 1) + 'px'
                headerTable.style.width = w;
                bodyTable.style.width = w;
                filterTable.style.width = w;
                summaryTable.style.width = w;
            } else {
                var w = parseInt(bodyWidth - 18);
                if (w < 0) w = 0;
                w = w + 'px';
                headerTable.style.width = w;
                bodyTable.style.width = w;
                filterTable.style.width = w;
                summaryTable.style.width = w;
            }
            if (autoHeight) {

                if (bodyWidth >= this._bodyEl.scrollWidth - 1) {
                    this._bodyEl.style.height = "auto";
                } else {
                    this._bodyEl.style.height = (bodyTable.offsetHeight + 17) + "px";
                }
            }
            if (autoHeight && isFrozen) {
                this._bodyEl.style.height = "auto";
            }

        } else {
            headerTable.style.width = bodyTable.style.width = "0px";
            filterTable.style.width = summaryTable.style.width = "0px";


        }



        if (this.isFitColumns()) {

            if (!hiddenY && bodyClientHeight < bodyScrollHeight) {
                var w = elWidth - 18;
                if (w < 0) w = 0;




            } else {
                this._headerInnerEl.style.width = "100%";
                this._filterEl.style.width = "100%";
                this._summaryEl.style.width = "100%";
                this._footerEl.style.width = "auto";
            }

        } else {
            this._headerInnerEl.style.width = "100%";
            this._filterEl.style.width = "100%";
            this._summaryEl.style.width = "100%";
            this._footerEl.style.width = "auto";
        }


        if (this.isFrozen()) {



            if (!hiddenY && bodyClientHeight < this._bodyEl.scrollHeight) {

                this._scrollEl.style.width = (elWidth - 17) + "px";
            } else {

                this._scrollEl.style.width = (elWidth) + "px";
            }

            if (this._bodyEl.offsetWidth < bodyTable.offsetWidth || this.isFrozen()) {

                this._scrollEl.firstChild.style.width = this._getColumnsScrollWidth() + "px";
                headerTable.style.width = bodyTable.style.width = "0px";
                filterTable.style.width = summaryTable.style.width = "0px";
            } else {
                this._scrollEl.firstChild.style.width = "0px";
            }


        } else {

        }


        if (this.data.length == 0) {
            this._doInnerLayout();
        } else {
            var me = this;
            if (!this._innerLayoutTimer) {


                this._innerLayoutTimer = setTimeout(function () {
                    me._doInnerLayout();
                    me._innerLayoutTimer = null;
                }, 10);
            }
        }






        this._doLayoutTopRightCell();


        this.fire("layout");

        if (this.isFrozen()) {
            if (this._scrollEl.scrollLeft != this.__frozenScrollLeft) {
                this._doScrollFrozen();
            }
        }

    },
    _doLayoutTopRightCell: function () {
        var headerTable = this._headerInnerEl.firstChild;
        var width = headerTable.offsetWidth + 1;
        var height = headerTable.offsetHeight - 1;
        if (height < 0) height = 0;
        this._topRightCellEl.style.left = width + "px";
        this._topRightCellEl.style.height = height + "px";
    },




    _doInnerLayout: function () {
        this._doLayoutDetailRows();
        this._doLayoutEditingRows();
        mini.layout(this._filterEl);
        mini.layout(this._summaryEl);
        mini.layout(this._footerEl);
        mini.repaint(this.el);
        this._doLayouted = true;
    },










    setFitColumns: function (value) {
        this.fitColumns = value;

        if (this.fitColumns) {
            mini.removeClass(this.el, "mini-grid-fixcolumns");


        } else {
            mini.addClass(this.el, "mini-grid-fixcolumns");
        }

        this.doLayout();
    },
    getFitColumns: function (value) {
        return this.fitColumns;
    },
    isFitColumns: function () {
        return this.fitColumns && !this.isFrozen();
    },
    _getColumnsScrollWidth: function () {

        if (this._bodyEl.offsetWidth < this._bodyInnerEl.firstChild.offsetWidth || this.isFrozen()) {
            var width = 0;
            var columns = this.getBottomColumns();
            for (var i = 0, l = columns.length; i < l; i++) {
                var column = columns[i];

                width += this.getColumnWidth(column);

            }
            return width;

        } else {
            return 0;
        }
    },
    _createRowId: function (row) {
        return this.uid + "$" + row._uid;
    },
    _createCellId: function (row, column) {
        return this.uid + "$" + row._uid + "$" + column._id;
    },
    _createFilterCellId: function (column) {
        return this.uid + "$filter$" + column._id;
    },
    _createSummaryCellId: function (column) {
        return this.uid + "$summary$" + column._id;
    },
    _createRowDetailId: function (row) {
        return this.uid + "$detail$" + row._uid;
    },
    _getHeaderScrollEl: function () {
        return this._headerInnerEl;
    },
    getFilterCellEl: function (column) {
        column = this.getColumn(column);
        if (!column) return null;

        return mini.byId(this._createFilterCellId(column), this.el);
    },
    getSummaryCellEl: function (column) {
        column = this.getColumn(column);
        if (!column) return null;
        return mini.byId(this._createSummaryCellId(column), this.el);
    },

    _getRowEl: function (row) {
        row = this.getRow(row);
        if (!row) return null;
        var id = this._createRowId(row);
        return mini.byId(id, this.el);
    },
    getCellBox: function (row, column) {
        row = this.getRow(row);
        column = this.getColumn(column);
        if (!row || !column) return null;
        var cellEl = this._getCellEl(row, column);
        if (!cellEl) return null;
        return mini.getBox(cellEl);
    },
    getRowBox: function (row) {
        var rowEl = this._getRowEl(row);
        if (rowEl) return mini.getBox(rowEl);
        return null;
    },
    getRowsBox: function () {
        var rowBoxs = [];
        var rows = this.data;
        var top = 0;

        for (var i = 0, l = rows.length; i < l; i++) {
            var row = rows[i];
            var id = this._createRowId(row);
            var rowEl = document.getElementById(id);
            if (rowEl) {
                var h = rowEl.offsetHeight;
                rowBoxs[i] = { top: top, height: h, bottom: top + h };
                top += h;
            }
        }
        return rowBoxs;
    },
    setColumnWidth: function (column, width) {
        column = this.getColumn(column);
        if (!column) return;
        if (mini.isNumber(width)) width += "px";
        column.width = width;

        var id1 = this._createColumnId(column) + "$header";
        var id2 = this._createColumnId(column) + "$body";
        var id3 = this._createColumnId(column) + "$filter";
        var id4 = this._createColumnId(column) + "$summary";
        var el1 = document.getElementById(id1);
        var el2 = document.getElementById(id2);
        var el3 = document.getElementById(id3);
        var el4 = document.getElementById(id4);
        if (el1) el1.style.width = width;
        if (el2) el2.style.width = width;
        if (el3) el3.style.width = width;
        if (el4) el4.style.width = width;

        this.doLayout();

        this.fire("columnschanged");
    },
    getColumnWidth: function (column) {
        column = this.getColumn(column);
        if (!column) return 0;
        if (column.visible == false) return 0;

        var w = 0;
        var id = this._createColumnId(column) + "$body";
        var el = document.getElementById(id);
        if (el) {




            var display = el.style.display;
            el.style.display = "";
            w = mini.getWidth(el);
            el.style.display = display;

        }
        return w;
    },
    _doVisibleColumn: function (column, visible) {

        var columnEl = document.getElementById(this._createColumnId(column));
        if (columnEl) columnEl.style.display = visible ? "" : "none";

        var filterCell = document.getElementById(this._createFilterCellId(column));
        if (filterCell) filterCell.style.display = visible ? "" : "none";

        var summaryCell = document.getElementById(this._createSummaryCellId(column));
        if (summaryCell) summaryCell.style.display = visible ? "" : "none";


        var id1 = this._createColumnId(column) + "$header";
        var id2 = this._createColumnId(column) + "$body";
        var id3 = this._createColumnId(column) + "$filter";
        var id4 = this._createColumnId(column) + "$summary";
        var el1 = document.getElementById(id1);
        if (el1) el1.style.display = visible ? "" : "none";
        var el3 = document.getElementById(id3);
        if (el3) el3.style.display = visible ? "" : "none";
        var el4 = document.getElementById(id4);
        if (el4) el4.style.display = visible ? "" : "none";




        if (el2) {
            if (visible && el2.style.display == "") return;
            if (!visible && el2.style.display == "none") return;
        }

        var el2 = document.getElementById(id2);
        if (el2) el2.style.display = visible ? "" : "none";

        var data = this.data;

        if (this.isVirtualScroll()) {
            var viewRegion = this._markRegion();
            var start = viewRegion.start, end = viewRegion.end;
            for (var i = start, l = end; i < l; i++) {
                var row = data[i];
                var cellId = this._createCellId(row, column);
                var cellEl = document.getElementById(cellId);
                if (cellEl) {
                    cellEl.style.display = visible ? "" : "none";
                }
            }
        } else {
            for (var i = 0, l = this.data.length; i < l; i++) {
                var row = this.data[i];
                var cellId = this._createCellId(row, column);
                var cellEl = document.getElementById(cellId);
                if (cellEl) {
                    cellEl.style.display = visible ? "" : "none";
                }
            }
        }



    },
    _doClassColumn: function (column, cls, add) {

        var data = this.data;

        if (this.isVirtualScroll()) {
            var viewRegion = this._markRegion();
            var start = viewRegion.start, end = viewRegion.end;
            for (var i = start, l = end; i < l; i++) {
                var row = data[i];
                var cellId = this._createCellId(row, column);
                var cellEl = document.getElementById(cellId);
                if (cellEl) {
                    if (add) {
                        mini.addClass(cellEl, cls);
                    } else {
                        mini.removeClass(cellEl, cls);
                    }
                }
            }
        } else {
            for (var i = 0, l = this.data.length; i < l; i++) {
                var row = this.data[i];
                var cellId = this._createCellId(row, column);
                var cellEl = document.getElementById(cellId);
                if (cellEl) {
                    if (add) {
                        mini.addClass(cellEl, cls);
                    } else {
                        mini.removeClass(cellEl, cls);
                    }
                }
            }
        }
    },


    __doFrozen: function () {

        this._scrollEl.scrollLeft = this._headerInnerEl.scrollLeft = this._bodyEl.scrollLeft = 0;

        var isFrozen = this.isFrozen();
        if (isFrozen) {
            mini.addClass(this.el, this._frozenCls);
        } else {
            mini.removeClass(this.el, this._frozenCls);
        }

        var columns = this.getBottomColumns();

        var filterTable = this._filterEl.firstChild, summaryTable = this._summaryEl.firstChild;

        if (isFrozen) {
            filterTable.style.height = jQuery(filterTable).outerHeight() + "px";
            summaryTable.style.height = jQuery(summaryTable).outerHeight() + "px";
        } else {
            filterTable.style.height = "auto";
            summaryTable.style.height = "auto";
        }

        if (this.isFrozen()) {

            for (var i = 0, l = columns.length; i < l; i++) {
                var column = columns[i];
                if (this.frozenStartColumn <= i && i <= this.frozenEndColumn) {
                    this._doClassColumn(column, this._frozenCellCls, true);
                } else {
                    this._doClassColumn(column, this._frozenCellCls, false);
                }
            }


            this._doFixRowsHeight(true);
        } else {
            for (var i = 0, l = columns.length; i < l; i++) {
                var column = columns[i];
                delete column._hide;
                if (column.visible) {
                    this._doVisibleColumn(column, true);
                }
                this._doClassColumn(column, this._frozenCellCls, false);
            }
            this._doUpdateHeader();


            this._doFixRowsHeight(false);
        }

        this.doLayout();


        this._fixIE();


    },
    _deferFrozen: function () {
        this._headerTableHeight = mini.getHeight(this._headerInnerEl.firstChild);

        var me = this;
        if (this._deferFrozenTimer) clearTimeout(this._deferFrozenTimer);
        this._deferFrozenTimer = setTimeout(function () {

            me.__doFrozen();
        }, 1);
    },
    setFrozenStartColumn: function (value) {

        var sss = new Date();
        value = parseInt(value);
        if (isNaN(value)) return;
        this.frozenStartColumn = value;
        this._deferFrozen();
    },
    getFrozenStartColumn: function () {
        return this.frozenStartColumn;
    },
    setFrozenEndColumn: function (value) {
        value = parseInt(value);
        if (isNaN(value)) return;
        this.frozenEndColumn = value;

        this._deferFrozen();
    },
    getFrozenEndColumn: function () {
        return this.frozenEndColumn;
    },
    unFrozenColumns: function () {
        this.setFrozenStartColumn(-1);
        this.setFrozenEndColumn(-1);
    },
    frozenColumns: function (start, end) {
        this.unFrozenColumns();
        this.setFrozenStartColumn(start);
        this.setFrozenEndColumn(end);
    },
    _rowHeight: 23,

    _markRegion: function () {
        var region = this._getViewNowRegion();

        var rowHeight = this._rowHeight;
        var scrollTop = this._bodyEl.scrollTop;

        var start = region.start, end = region.end;
        for (var i = 0, l = this.data.length; i < l; i += this._virtualRows) {
            var i2 = i + this._virtualRows;
            if (i <= start && start < i2) {
                start = i;
            }
            if (i < end && end <= i2) {
                end = i2;
            }
        }
        if (end > this.data.length) end = this.data.length;

        var top = start * rowHeight;

        this._viewRegion = { start: start, end: end, top: top };

        return this._viewRegion;
    },
    _getViewNowRegion: function () {

        var rowHeight = this._rowHeight;
        var scrollTop = this._bodyEl.scrollTop;
        var bodyHeight = this._bodyEl.offsetHeight;

        var startRow = parseInt(scrollTop / rowHeight);
        var endRow = parseInt((scrollTop + bodyHeight) / rowHeight) + 1;
        var region = { start: startRow, end: endRow };
        return region;
    },
    _canVirtualUpdate: function () {
        if (!this._viewRegion) return true;
        var region = this._getViewNowRegion();
        if (this._viewRegion.start <= region.start && region.end <= this._viewRegion.end) return false;
        return true;
    },
    _tryUpdateScroll: function () {
        var doUpdate = this._canVirtualUpdate();
        if (doUpdate) {
            this.doUpdate();
        }
    },
    __OnBodyScroll: function (e) {


        this._filterEl.scrollLeft = this._summaryEl.scrollLeft = this._headerInnerEl.scrollLeft = this._bodyEl.scrollLeft;

        var me = this;
        setTimeout(function () {
            me._headerInnerEl.scrollLeft = me._bodyEl.scrollLeft;
        }, 10);

        if (this.isVirtualScroll()) {

            var me = this;
            if (this._scrollTopTimer) {
                clearTimeout(this._scrollTopTimer);
            }
            this._scrollTopTimer = setTimeout(function () {
                me._scrollTopTimer = null;
                me._tryUpdateScroll();
            }, 100);

        }
    },
    __OnHScroll: function (e) {

        var me = this;
        if (this._HScrollTimer) return;
        this._HScrollTimer = setTimeout(function () {
            me._doScrollFrozen();
            me._HScrollTimer = null;

        }, 30);




    },
    _doScrollFrozen: function () {

        if (!this.isFrozen()) return;

        var columns = this.getBottomColumns();

        var x = this._scrollEl.scrollLeft;
        this.__frozenScrollLeft = x;

        var startColumn = this.frozenEndColumn;
        var left = 0;
        for (var i = startColumn + 1, l = columns.length; i < l; i++) {
            var column = columns[i];
            if (!column.visible) {
                continue;
            }
            var w = this.getColumnWidth(column);
            if (x <= left) break;
            startColumn = i;
            left += w;
        }

        if (this._lastStartColumn === startColumn) {

            return;
        }

        this._lastStartColumn = startColumn;



        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            delete column._hide;
            if (this.frozenEndColumn < i && i <= startColumn) {
                column._hide = true;
            }
        }


        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];

            if (i < this.frozenStartColumn
                || (i > this.frozenEndColumn && i < startColumn)
                || column.visible == false
                ) {
                this._doVisibleColumn(column, false);
            } else {
                this._doVisibleColumn(column, true);
            }
        }


        var style = "width:100%;";
        if (this._scrollEl.offsetWidth < this._scrollEl.scrollWidth || !this.isFitColumns()) {
            style = "width:0px";
        }

        this._doUpdateHeader(style);








        var h = this._headerTableHeight;
        if (mini.isIE9) h -= 1;
        mini.setHeight(this._headerInnerEl.firstChild, h);



        for (var i = this.frozenEndColumn + 1, l = columns.length; i < l; i++) {
            var column = columns[i];
            if (!column.visible) continue;
            if (i <= startColumn) {
                this._doVisibleColumn(column, false);
            } else {
                this._doVisibleColumn(column, true);
            }
        }


        this._doUpdateDetailColSpan();


        this._doMargeCells();

        this._doLayoutTopRightCell();

        this.fire("layout");
    },

    _doFixRowsHeight: function (fix) {

        var data = this.data;
        for (var i = 0, l = data.length; i < l; i++) {
            var row = data[i];
            var rowEl = this._getRowEl(row);
            if (rowEl) {
                if (fix) {
                    var h = 0;





                    rowEl.style.height = h + "px";
                } else {
                    rowEl.style.height = "";
                }
            }
        }
    },

    _doGridLines: function () {

        if (this.showVGridLines) {
            mini.removeClass(this.el, "mini-grid-hideVLine");
        } else {
            mini.addClass(this.el, "mini-grid-hideVLine");
        }
        if (this.showHGridLines) {
            mini.removeClass(this.el, "mini-grid-hideHLine");
        } else {
            mini.addClass(this.el, "mini-grid-hideHLine");
        }
    },
    setShowHGridLines: function (value) {
        if (this.showHGridLines != value) {
            this.showHGridLines = value;
            this._doGridLines();
            this.doLayout();
        }
    },
    getShowHGridLines: function () {
        return this.showHGridLines;
    },
    setShowVGridLines: function (value) {
        if (this.showVGridLines != value) {
            this.showVGridLines = value;
            this._doGridLines();
            this.doLayout();
        }
    },
    getShowVGridLines: function () {
        return this.showVGridLines;
    },
    setShowFilterRow: function (value) {
        if (this.showFilterRow != value) {
            this.showFilterRow = value;
            this._doShowRows();
            this.doLayout();
        }
    },
    getShowFilterRow: function () {
        return this.showFilterRow;
    },
    setShowSummaryRow: function (value) {
        if (this.showSummaryRow != value) {
            this.showSummaryRow = value;
            this._doShowRows();
            this.doLayout();
        }
    },
    getShowSummaryRow: function () {
        return this.showSummaryRow;
    },
    _doAlternating: function () {
        if (this.allowAlternating == false) return;
        var data = this.data;
        for (var i = 0, l = data.length; i < l; i++) {
            var row = data[i];
            var rowEl = this._getRowEl(row);
            if (rowEl) {
                if (this.allowAlternating && i % 2 == 1) {
                    mini.addClass(rowEl, this._alternatingCls);
                } else {
                    mini.removeClass(rowEl, this._alternatingCls);
                }
            }
        }
    },
    setAllowAlternating: function (value) {
        if (this.allowAlternating != value) {
            this.allowAlternating = value;
            this._doAlternating();
        }
    },
    getAllowAlternating: function () {
        return this.allowAlternating;
    },
    setEnableHotTrack: function (value) {
        if (this.enableHotTrack != value) {
            this.enableHotTrack = value;
        }
    },
    getEnableHotTrack: function () {
        return this.enableHotTrack;
    },
    setShowLoading: function (value) {
        this.showLoading = value;
    },
    setAllowCellWrap: function (value) {

        if (this.allowCellWrap != value) {
            this.allowCellWrap = value;
        }
    },
    getAllowCellWrap: function () {
        return this.allowCellWrap;
    },
    setAllowHeaderWrap: function (value) {
        this.allowHeaderWrap = value;
        mini.removeClass(this.el, "mini-grid-headerWrap");
        if (value) {
            mini.addClass(this.el, "mini-grid-headerWrap");
        }
    },
    getAllowHeaderWrap: function () {
        return this.allowHeaderWrap;
    },
    setShowColumnsMenu: function (value) {
        this.showColumnsMenu = value;
    },
    getShowColumnsMenu: function () {
        return this.showColumnsMenu;
    },
    setEditNextOnEnterKey: function (value) {
        this.editNextOnEnterKey = value;
    },
    getEditNextOnEnterKey: function () {
        return this.editNextOnEnterKey;
    },
    setEditOnTabKey: function (value) {
        this.editOnTabKey = value;
    },
    getEditOnTabKey: function () {
        return this.editOnTabKey;
    },


    setVirtualScroll: function (value) {
        if (this.virtualScroll != value) {
            this.virtualScroll = value;
        }
    },
    getVirtualScroll: function () {
        return this.virtualScroll;
    },


    setScrollTop: function (value) {
        this.scrollTop = value;
        this._bodyEl.scrollTop = value;



    },
    getScrollTop: function () {
        return this._bodyEl.scrollTop;
    },
    setBodyStyle: function (value) {
        this.bodyStyle = value;
        mini.setStyle(this._bodyEl, value);
    },
    getBodyStyle: function () {
        return this.bodyStyle;
    },
    setBodyCls: function (value) {
        this.bodyCls = value;
        mini.addClass(this._bodyEl, value);
    },
    getBodyCls: function () {
        return this.bodyCls;
    },
    setFooterStyle: function (value) {
        this.footerStyle = value;
        mini.setStyle(this._footerEl, value);
    },
    getFooterStyle: function () {
        return this.footerStyle;
    },
    setFooterCls: function (value) {
        this.footerCls = value;
        mini.addClass(this._footerEl, value);
    },
    getFooterCls: function () {
        return this.footerCls;
    },
    setShowHeader: function (value) {
        this.showHeader = value;
        this._doShowRows();
        this.doLayout();
    },
    setShowColumns: function (value) {
        this.setShowHeader(value);
    },
    getShowColumns: function () {
        return this.showHeader;
    },
    setShowPager: function (value) {
        this.setShowFooter(value);
    },
    getShowPager: function () {
        return this.showFooter;
    },
    setShowFooter: function (value) {
        this.showFooter = value;
        this._doShowRows();
        this.doLayout();
    },
    getShowFooter: function () {
        return this.showFooter;
    },
    setAutoHideRowDetail: function (value) {
        this.autoHideRowDetail = value;

    },












    setSortMode: function (value) {
        this.sortMode = value;
    },
    getSortMode: function () {
        return this.sortMode;
    },
    setAllowSortColumn: function (value) {
        this.allowSortColumn = value;
    },
    getAllowSortColumn: function () {
        return this.allowSortColumn;
    },
    setAllowMoveColumn: function (value) {
        this.allowMoveColumn = value;
    },
    getAllowMoveColumn: function () {
        return this.allowMoveColumn;
    },
    setAllowResizeColumn: function (value) {
        this.allowResizeColumn = value;
    },
    getAllowResizeColumn: function () {
        return this.allowResizeColumn;
    },
    setSelectOnLoad: function (value) {
        this.selectOnLoad = value;
    },
    getSelectOnLoad: function () {
        return this.selectOnLoad;
    },
    setAllowResize: function (value) {
        this.allowResize = value;

        this._resizeEl.style.display = this.allowResize ? "" : "none";
    },
    getAllowResize: function () {
        return this.allowResize;
    },
    setShowEmptyText: function (value) {
        this.showEmptyText = value;
        if (this.data.length == 0) this.doUpdate();
    },
    getShowEmptyText: function () {
        return this.showEmptyText;
    },
    setEmptyText: function (value) {
        this.emptyText = value;
    },
    getEmptyText: function () {
        return this.emptyText;
    },
    setShowModified: function (value) {
        this.showModified = value;
    },
    getShowModified: function () {
        return this.showModified;
    },
    setShowNewRow: function (value) {
        this.showNewRow = value;
    },
    getShowNewRow: function () {
        return this.showNewRow;
    },


    setCellEditAction: function (value) {
        this.cellEditAction = value;
    },
    getCellEditAction: function () {
        return this.cellEditAction;
    },
    setAllowCellValid: function (value) {
        this.allowCellValid = value;
    },
    getAllowCellValid: function () {
        return this.allowCellValid;
    },




    __allowLayout: true,

    showAllRowDetail: function () {
        this.__allowLayout = false;
        for (var i = 0, l = this.data.length; i < l; i++) {
            var row = this.data[i];
            this.showRowDetail(row);
        }
        this.__allowLayout = true;
        this.doLayout();
    },
    hideAllRowDetail: function () {
        this.__allowLayout = false;
        for (var i = 0, l = this.data.length; i < l; i++) {
            var row = this.data[i];
            if (this.isShowRowDetail(row)) {
                this.hideRowDetail(row);
            }
        }
        this.__allowLayout = true;
        this.doLayout();
    },
    showRowDetail: function (row) {
        row = this.getRow(row);
        if (!row) return;
        var tr = this.getRowDetailEl(row);
        tr.style.display = "";

        row._showDetail = true;

        var rowEl = this._getRowEl(row);
        mini.addClass(rowEl, "mini-grid-expandRow");

        this.fire("showrowdetail", { record: row });

        if (this.__allowLayout) {
            this.doLayout();
        }
        var me = this;




    },
    hideRowDetail: function (row) {
        row = this.getRow(row);
        if (!row) return;
        var id = this._createRowDetailId(row);
        var tr = document.getElementById(id);
        if (tr) {
            tr.style.display = "none";
        }
        delete row._showDetail;
        var rowEl = this._getRowEl(row);
        mini.removeClass(rowEl, "mini-grid-expandRow");

        this.fire("hiderowdetail", { record: row });
        if (this.__allowLayout) {
            this.doLayout();
        }
    },
    toggleRowDetail: function (row) {
        row = this.getRow(row);
        if (!row) return;
        if (grid.isShowRowDetail(row)) {
            grid.hideRowDetail(row);
        } else {
            grid.showRowDetail(row);
        }
    },
    isShowRowDetail: function (row) {
        row = this.getRow(row);
        if (!row) return false;
        return !!row._showDetail;
    },
    getRowDetailEl: function (row) {

        row = this.getRow(row);
        if (!row) return null;
        var id = this._createRowDetailId(row);
        var el = document.getElementById(id);
        if (!el) {
            el = this._createRowDetail(row);
        }
        return el;
    },
    getRowDetailCellEl: function (row) {
        var el = this.getRowDetailEl(row);
        if (el) return el.cells[0];
    },
    _createRowDetail: function (row) {
        var tr = this._getRowEl(row);
        var id = this._createRowDetailId(row);
        var colSpan = this.getBottomColumns().length;
        jQuery(tr).after('<tr id="' + id + '" class="mini-grid-detailRow"><td class="mini-grid-detailCell" colspan="' + colSpan + '"></td></tr>');
        this._doUpdateDetailColSpan();
        return document.getElementById(id);
    },
    _getColSpan: function () {
        var tr = this._bodyInnerEl.firstChild.getElementsByTagName("tr")[0];
        var tds = tr.getElementsByTagName("td");
        var colSpan = 0;
        for (var i = 0, l = tds.length; i < l; i++) {
            var td = tds[i];
            if (td.style.display != "none") {
                colSpan++;
            }
        }
        return colSpan;
    },
    _doUpdateDetailColSpan: function () {

        var trs = jQuery(".mini-grid-detailRow", this.el);

        var colSpan = this._getColSpan();
        for (var i = 0, l = trs.length; i < l; i++) {
            var tr = trs[i];
            var td = tr.firstChild;
            td.colSpan = colSpan;
        }
    },
    _doLayoutDetailRows: function () {
        for (var i = 0, l = this.data.length; i < l; i++) {
            var row = this.data[i];
            if (row._showDetail == true) {
                var id = this._createRowDetailId(row);
                var el = document.getElementById(id);
                if (el) {
                    mini.layout(el);
                }
            }
        }

    },
    _doLayoutEditingRows: function () {

        for (var i = 0, l = this.data.length; i < l; i++) {
            var row = this.data[i];
            if (row._editing == true) {
                var el = this._getRowEl(row);
                if (el) {
                    mini.layout(el);
                }
            }
        }
    },




    __OnPageChanged: function (e) {

        e.cancel = true;
        this.gotoPage(e.pageIndex, e.pageSize);
    },
    setShowReloadButton: function (value) {
        this.pager.setShowReloadButton(value);
    },
    getShowReloadButton: function () {
        return this.pager.getShowReloadButton();
    },
    setShowPageInfo: function (value) {
        this.pager.setShowPageInfo(value);
    },
    getShowPageInfo: function () {
        return this.pager.getShowPageInfo();
    },
    setSizeList: function (value) {
        if (!mini.isArray(value)) return;
        this.pager.setSizeList(value);
    },
    getSizeList: function () {
        return this.pager.getSizeList();
    },
    setPageSize: function (value) {
        value = parseInt(value);
        if (isNaN(value)) return;
        this.pageSize = value;
        if (this.pager) this.pager.update(this.pageIndex, this.pageSize, this.totalCount);
    },
    getPageSize: function () {
        return this.pageSize;
    },
    setPageIndex: function (value) {

        value = parseInt(value);
        if (isNaN(value)) return;
        this.pageIndex = value;
        if (this.pager) this.pager.update(this.pageIndex, this.pageSize, this.totalCount);
    },
    getPageIndex: function () {
        return this.pageIndex;
    },
    setShowPageSize: function (value) {
        this.showPageSize = value;
        this.pager.setShowPageSize(value);
    },
    getShowPageSize: function () {
        return this.showPageSize;
    },
    setShowPageIndex: function (value) {
        this.showPageIndex = value;
        this.pager.setShowPageIndex(value);
    },
    getShowPageIndex: function () {
        return this.showPageIndex;
    },
    setShowTotalCount: function (value) {
        this.showTotalCount = value;
        this.pager.setShowTotalCount(value);
    },
    getShowTotalCount: function () {
        return this.showTotalCount;
    },

    setPageIndexField: function (value) {
        this.pageIndexField = value;
    },
    getPageIndexField: function () {
        return this.pageIndexField;
    },
    setPageSizeField: function (value) {
        this.pageSizeField = value;
    },
    getPageSizeField: function () {
        return this.pageSizeField;
    },
    setSortFieldField: function (value) {
        this.sortFieldField = value;
    },
    getSortFieldField: function () {
        return this.sortFieldField;
    },
    setSortOrderField: function (value) {
        this.sortOrderField = value;
    },
    getSortOrderField: function () {
        return this.sortOrderField;
    },
    setTotalField: function (value) {
        this.totalField = value;
    },
    getTotalField: function () {
        return this.totalField;
    },
    setDataField: function (value) {
        this.dataField = value;
    },
    getDataField: function () {
        return this.dataField;
    },

    getSortField: function () {
        return this.sortField;
    },
    getSortOrder: function () {
        return this.sortOrder;
    },

    pageIndex: 0,
    pageSize: 10,
    totalCount: 0,
    totalPage: 0,
    showPageInfo: true,

    pageIndexField: "pageIndex",
    pageSizeField: "pageSize",
    sortFieldField: "sortField",
    sortOrderField: "sortOrder",
    totalField: "total",

    showPageSize: true,
    showPageIndex: true,
    showTotalCount: true,

    setTotalCount: function (value) {
        this.totalCount = value;
        this.pager.setTotalCount(value);
    },
    getTotalCount: function () {
        return this.totalCount;
    },
    getTotalPage: function () {
        return this.totalPage;
    },

    sortField: "",
    sortOrder: "",

    url: "",
    autoLoad: false,
    loadParams: null,



    ajaxAsync: true,
    ajaxMethod: "post",
    showLoading: true,

    resultAsData: false,
    checkSelectOnLoad: true,
    setCheckSelectOnLoad: function (value) {
        this.checkSelectOnLoad = value;
    },
    getCheckSelectOnLoad: function () {
        return this.checkSelectOnLoad;
    },

    totalField: "total",
    dataField: "data",
    _getFromData: function (result) {
        return result.data;
    },
    getResultObject: function () {
        return this._resultObject ? this._resultObject : {};
    },
    _doLoad: function (params, success, fail) {

        try {
            var url = eval(this.url);
            if (url != undefined) {
                this.url = url;
            }
        } catch (e) { }



        params = params || {};
        if (mini.isNull(params.pageIndex)) params.pageIndex = this.pageIndex;
        if (mini.isNull(params.pageSize)) params.pageSize = this.pageSize;
        params.sortField = this.sortField;
        params.sortOrder = this.sortOrder;

        if (this.sortMode != "server") {
            params.sortField = this.sortField = "";
            params.sortOrder = this.sortOrder = "";
        }

        this.loadParams = params;

        var o = {};
        o[this.pageIndexField] = params.pageIndex;
        o[this.pageSizeField] = params.pageSize;
        if (params.sortField) o[this.sortFieldField] = params.sortField;
        if (params.sortOrder) o[this.sortOrderField] = params.sortOrder;




        mini.copyTo(params, o);

        var url = this.url;
        var ajaxMethod = this.ajaxMethod;
        if (url) {
            if (url.indexOf(".txt") != -1 || url.indexOf(".json") != -1) {
                ajaxMethod = "get";
            }
        } else {
            ajaxMethod = "get";
        }

        var e = {
            url: url,
            async: this.ajaxAsync,
            type: ajaxMethod,
            data: params,
            params: params,
            cache: false,
            cancel: false
        };
        this.fire("beforeload", e);
        if (e.data != e.params && e.params != params) {
            e.data = e.params;
        }
        if (e.cancel == true) {
            params.pageIndex = this.getPageIndex();
            params.pageSize = this.getPageSize();

            return;
        }
        if (this.showLoading) {
            this.loading();
        }

        this._selectedValue = this._selected ? this._selected[this.idField] : null;

        var sf = me = this;
        var url = e.url;

        mini.copyTo(e, {
            success: function (text, code, jqXHR) {
                var result = null;
                try {
                    result = mini.decode(text);
                } catch (ex) {
                    if (mini_debugger == true) {
                        alert(url + "\ndatagrid json is error.");
                    }
                }

                if (result && !mini.isArray(result)) {
                    result.total = parseInt(mini._getMap(me.totalField, result));
                    result.data = mini._getMap(me.dataField, result);
                } else {
                    if (result == null) {
                        result = {};
                        result.data = [];
                        result.total = 0;
                    } else if (mini.isArray(result)) {
                        var r = {};
                        r.data = result;
                        r.total = result.length;
                        result = r;
                    }
                }
                if (!result.data) result.data = [];
                if (!result.total) result.total = 0;
                sf._resultObject = result;

                sf.unmask();

                if (mini.isNumber(result.error) && result.error != 0) {
                    var e = { errorCode: result.error, xmlHttp: jqXHR, errorMsg: result.message, result: result };
                    if (mini_debugger == true) {
                        alert(url + "\n" + e.errorMsg + "\n" + result.stackTrace);
                    }
                    sf.fire("loaderror", e);
                    if (fail) {
                        fail.call(sf, e);
                    }
                    return;
                }


                var total = result.total;
                var data = sf._getFromData(result);


                if (mini.isNumber(params.pageIndex)) sf.pageIndex = params.pageIndex;
                if (mini.isNumber(params.pageSize)) sf.pageSize = params.pageSize;
                if (mini.isNumber(total)) sf.totalCount = total;

                var ex = { result: result, data: data, total: total, cancel: false, xmlHttp: jqXHR }
                sf.fire("preload", ex);
                if (ex.cancel == true) return;

                var allowLayout = sf._allowLayout;
                sf._allowLayout = false;
                sf.loadData(ex.data);





                if (sf._selectedValue && sf.checkSelectOnLoad) {
                    var o = sf.getRowById(sf._selectedValue);

                    if (o) {
                        sf.select(o);
                    } else {
                        sf.deselectAll();
                    }
                } else if (sf._selected) {
                    sf.deselectAll();
                }


                if (sf.getSelected() == null && sf.selectOnLoad && sf.data.length > 0) {

                    sf.select(0);
                }


                if (sf.collapseGroupOnLoad) {
                    sf.collapseGroups();
                }

                sf.fire("load", ex);

                if (success) success.call(sf, ex);


                sf._allowLayout = allowLayout;
                sf.doLayout();




            },
            error: function (jqXHR, textStatus, errorThrown) {

                var ex = {
                    xmlHttp: jqXHR,
                    errorMsg: jqXHR.responseText,
                    errorCode: jqXHR.status
                };

                if (mini_debugger == true) {
                    alert(url + "\n" + ex.errorCode + "\n" + ex.errorMsg);
                }
                sf.fire("loaderror", ex);

                sf.unmask();

                if (fail) {
                    fail.call(sf, ex);
                }

            }
        });

        this._ajaxer = mini.ajax(e);
    },

    load: function (params, success, fail) {
        if (this._loadTimer) clearTimeout(this._loadTimer);
        var sf = this;

        var el = mini.byClass('mini-grid-emptyText', this.el);
        if (el) el.style.display = "none";

        this.cancelEdit();

        this.loadParams = params || {};

        if (this.ajaxAsync) {
            this._loadTimer = setTimeout(function () {
                sf._doLoad(params, success, fail);
            }, 1);
        } else {
            sf._doLoad(params, success, fail);
        }
    },
    reload: function (success, error) {
        this.accept();
        this.load(this.loadParams, success, error);
    },
    gotoPage: function (index, size) {
        var params = this.loadParams || {};
        if (mini.isNumber(index)) params.pageIndex = index;
        if (mini.isNumber(size)) params.pageSize = size;
        this.load(params);
    },
    sortBy: function (sortField, sortOrder) {
        this.sortField = sortField;
        this.sortOrder = sortOrder == "asc" ? "asc" : "desc";


        if (this.sortMode == "server") {
            var params = this.loadParams || {};
            params.sortField = sortField;
            params.sortOrder = sortOrder;
            params.pageIndex = this.pageIndex;
            var me = this;
            this.load(params, function () {
                me.fire("sort");
            });
        } else {
            var data = this.getData().clone();
            var sortFn = this._getSortFnByField(sortField);
            if (!sortFn) return;


            var arr1 = [];
            for (var i = data.length - 1; i >= 0; i--) {
                var o = data[i];
                var v = mini._getMap(sortField, o);

                if (mini.isNull(v) || v === "") {
                    arr1.insert(0, o);
                    data.removeAt(i);
                }
            }
            data = data.clone();
            mini.sort(data, sortFn, this);
            data.insertRange(0, arr1);

            if (this.sortOrder == "desc") {
                data.reverse();
            }

            this.data = data;
            this.doUpdate();

            this.fire("sort");
        }
    },
    clearSort: function () {
        this.sortField = "";
        this.sortOrder = "";
        this.reload();
    },
    _getSortFnByField: function (field) {
        if (!field) return null;
        var sortType = "string";
        var sortFn = null;
        var columns = this.getBottomColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            if (column.field == field) {
                if (column.dataType) sortType = column.dataType.toLowerCase();
                break;
            }
        }

        var typeFn = mini.sortTypes[sortType];
        if (!typeFn) typeFn = mini.sortTypes["string"];
        function sortBy(a, b) {

            var a1 = mini._getMap(field, a), b1 = mini._getMap(field, b);




            var v1 = typeFn(a1);
            var v2 = typeFn(b1);
            if (v1 > v2) return 1;
            else if (v1 == v2) return 0;
            else return -1;
        }

        sortFn = sortBy;
        return sortFn;
    },


    allowCellSelect: false,
    allowCellEdit: false,
    _cellSelectedCls: "mini-grid-cell-selected",

    _currentCell: null,
    _editingCell: null,
    _editingControl: null,
    _editWrap: null,

    _doCurrentCell: function (select) {
        if (this._currentCell) {
            var record = this._currentCell[0], column = this._currentCell[1];
            var cellEl = this._getCellEl(record, column);
            if (cellEl) {
                if (select) {
                    mini.addClass(cellEl, this._cellSelectedCls);
                } else {
                    mini.removeClass(cellEl, this._cellSelectedCls);
                }
            }
        }
    },
    setCurrentCell: function (cell) {
        if (this._currentCell != cell) {
            this._doCurrentCell(false);
            this._currentCell = cell;
            if (cell) {
                var row = this.getRow(cell[0]);
                var column = this.getColumn(cell[1]);
                if (row && column) {
                    this._currentCell = [row, column];
                } else {
                    this._currentCell = null;
                }
            }
            this._doCurrentCell(true);
            if (cell) {

                if (this.isFrozen()) {
                    this.scrollIntoView(cell[0]);
                } else {
                    this.scrollIntoView(cell[0]);

                }
            }
            this.fire("currentcellchanged");

        }
    },
    getCurrentCell: function () {
        var cc = this._currentCell;
        if (cc) {
            if (this.data.indexOf(cc[0]) == -1) {
                this._currentCell = null;
                cc = null;
            }
        }
        return cc;
    },

    setAllowCellSelect: function (value) {
        this.allowCellSelect = value;
    },
    getAllowCellSelect: function (value) {
        return this.allowCellSelect;
    },
    setAllowCellEdit: function (value) {
        this.allowCellEdit = value;
    },
    getAllowCellEdit: function (value) {
        return this.allowCellEdit;
    },

    beginEditCell: function (row, column) {
        row = this.getRow(row);
        column = this.getColumn(column);
        var cell = [row, column];
        if (row && column) {
            this.setCurrentCell(cell);
        }

        var cell = this.getCurrentCell();
        if (this._editingCell && cell) {
            if (this._editingCell[0] == cell[0] && this._editingCell[1] == cell[1]) return;
        }

        if (this._editingCell) this.commitEdit();
        if (cell) {
            var row = cell[0], column = cell[1];
            var canEdit = this._OnCellBeginEdit(row, column, this.getCellEditor(column));
            if (canEdit !== false) {
                this.scrollIntoView(row, column);
                this._editingCell = cell;
                this._OnCellShowingEdit(row, column);
            }
        }
    },
    isEditingCell: function (cell) {
        return this._editingCell && this._editingCell[0] == cell[0] && this._editingCell[1] == cell[1];
    },


    cancelEdit: function () {
        if (this.allowCellEdit) {
            if (this._editingCell) {
                this._OnCellEndEdit();
            }
        } else {
            if (this.isEditing()) {
                this._allowLayout = false;
                var data = this.data.clone();
                for (var i = 0, l = data.length; i < l; i++) {
                    var row = data[i];
                    if (row._editing == true) this.cancelEditRow(i);
                }
                this._allowLayout = true;
                this.doLayout();
            }
        }
    },
    commitEdit: function () {

        if (this.allowCellEdit) {

            if (this._editingCell) {
                this._OnCellCommitEdit(this._editingCell[0], this._editingCell[1]);
                this._OnCellEndEdit();
            }
        } else {
            if (this.isEditing()) {
                this._allowLayout = false;
                var data = this.data.clone();
                for (var i = 0, l = data.length; i < l; i++) {
                    var row = data[i];
                    if (row._editing == true) this.commitEditRow(i);
                }
                this._allowLayout = true;

                this.doLayout();
            }
        }
    },

    getCellEditor: function (column, row) {
        column = this.getColumn(column);
        if (!column) return;
        if (this.allowCellEdit) {

            var editor = column.__editor;

            if (!editor) editor = mini.getAndCreate(column.editor);
            if (editor && editor != column.editor) {
                column.editor = editor;
            }
            return editor;
        } else {
            row = this.getRow(row);
            column = this.getColumn(column);
            if (!row) row = this.getEditingRow();
            if (!row || !column) return null;
            var id = this.uid + "$" + row._uid + "$" + column._id + "$editor";
            return mini.get(id);
        }
    },

    _OnCellBeginEdit: function (record, column, editor) {

        var value = mini._getMap(column.field, record);
        var e = {
            sender: this,
            rowIndex: this.data.indexOf(record),
            row: record,
            record: record,
            column: column,
            field: column.field,
            editor: editor,
            value: value,
            cancel: false
        };

        this.fire("cellbeginedit", e);

        if (!mini.isNull(column.defaultValue) && (mini.isNull(e.value) || e.value === "")) {
            var defaultValue = column.defaultValue;




            var obj = mini.clone({ d: defaultValue });
            e.value = obj.d;
        }

        var editor = e.editor;
        value = e.value;

        if (e.cancel) {
            return false;
        }
        if (!editor) return false;



        if (mini.isNull(value)) value = "";
        if (editor.setValue) {

            editor.setValue(value);
        }
        editor.ownerRowID = record._uid;

        if (column.displayField && editor.setText) {

            var text = mini._getMap(column.displayField, record);

            if (!mini.isNull(column.defaultText) && (mini.isNull(text) || text === "")) {
                var obj = mini.clone({ d: column.defaultText });
                text = obj.d;
            }

            editor.setText(text);
        }

        if (this.allowCellEdit) {
            this._editingControl = e.editor;
        }

        return true;
    },
    _OnCellCommitEdit: function (record, column, value, editor) {
        var e = {
            sender: this,
            record: record,
            rowIndex: this.data.indexOf(record),
            row: record,
            column: column,
            field: column.field,
            editor: editor ? editor : this.getCellEditor(column),
            value: mini.isNull(value) ? "" : value,
            text: "",
            cancel: false
        };

        if (e.editor && e.editor.getValue) {
            try {
                e.editor.blur();
            } catch (ex) {

            }








            e.value = e.editor.getValue();
        }
        if (e.editor && e.editor.getText) {
            e.text = e.editor.getText();
        }


        var oldValue = mini._getMap(column.field, record), newValue = e.value;
        if (mini.isEquals(oldValue, newValue)) return e;

        this.fire("cellcommitedit", e);

        if (e.cancel == false) {

            if (this.allowCellEdit) {
                var o = {};
                o[column.field] = e.value;

                if (column.displayField) {
                    o[column.displayField] = e.text;

                }
                this.updateRow(record, o);
            }
        }
        return e;
    },
    _OnCellEndEdit: function () {
        if (!this._editingCell) return;
        var record = this._editingCell[0];
        var column = this._editingCell[1];
        var e = {
            sender: this,
            record: record,
            rowIndex: this.data.indexOf(record),
            row: record,
            column: column,
            field: column.field,
            editor: this._editingControl,
            value: record[column.field]
        };

        this.fire("cellendedit", e);

        if (this.allowCellEdit) {
            var editor = e.editor;
            if (editor && editor.setIsValid) {

                editor.setIsValid(true);
            }

            if (this._editWrap) this._editWrap.style.display = 'none';
            var childNodes = this._editWrap.childNodes;
            for (var i = childNodes.length - 1; i >= 0; i--) {
                var el = childNodes[i];
                this._editWrap.removeChild(el);
            }


            if (editor && editor.hidePopup) {
                editor.hidePopup();
            }
            if (editor && editor.setValue) {
                editor.setValue("");
            }

            this._editingControl = null;
            this._editingCell = null;

            if (this.allowCellValid) {
                this.validateCell(record, column);

            }
        }
    },
    _OnCellShowingEdit: function (record, column) {
        if (!this._editingControl) return false;

        var cellBox = this.getCellBox(record, column);
        var viewWidth = mini.getViewportBox().width;
        if (cellBox.right > viewWidth) {

            cellBox.width = viewWidth - cellBox.left;
            if (cellBox.width < 10) cellBox.width = 10;
            cellBox.right = cellBox.left + cellBox.width;
        }
        var e = {
            sender: this,
            rowIndex: this.data.indexOf(record),
            record: record,
            row: record,
            column: column,
            field: column.field,
            cellBox: cellBox,
            editor: this._editingControl
        };

        this.fire("cellshowingedit", e);

        var editor = e.editor;
        if (editor && editor.setIsValid) {

            editor.setIsValid(true);
        }

        var editWrap = this._getEditWrap(cellBox);
        this._editWrap.style.zIndex = mini.getMaxZIndex();

        if (editor.render) {
            editor.render(this._editWrap);
            setTimeout(function () {
                editor.focus();
                if (editor.selectText) editor.selectText();
            }, 50);
            if (editor.setVisible) editor.setVisible(true);
        } else if (editor.el) {
            this._editWrap.appendChild(editor.el);
            setTimeout(function () {
                try {
                    editor.el.focus();
                } catch (e) {
                }
            }, 50);
        }

        if (editor.setWidth) {
            var width = cellBox.width;
            if (width < 20) width = 20;
            editor.setWidth(width);
        }
        if (editor.setHeight && editor.type == "textarea") {

            var height = cellBox.height - 1;
            if (editor.minHeight && height < editor.minHeight) height = editor.minHeight;
            editor.setHeight(height);
        }
        if (editor.setWidth) {
            var width = cellBox.width - 1;
            if (editor.minWidth && width < editor.minWidth) width = editor.minWidth;
            editor.setWidth(width);
        }
        mini.on(document, 'mousedown', this.__OnBodyMouseDown, this);

        if (column.autoShowPopup && editor.showPopup) {

            editor.showPopup();
        }
    },
    __OnBodyMouseDown: function (e) {
        if (this._editingControl) {
            var cell = this._getCellByEvent(e);

            if (this._editingCell && cell) {
                if (this._editingCell[0] == cell.record && this._editingCell[1] == cell.column) {
                    return false;
                }
            }

            var within = false;
            if (this._editingControl.within) within = this._editingControl.within(e);
            else within = mini.isAncestor(this._editWrap, e.target);

            if (within == false) {
                var me = this;
                if (mini.isAncestor(this._bodyEl, e.target) == false) {
                    setTimeout(function () {

                        me.commitEdit();

                    }, 1);
                } else {

                    var cell1 = me._editingCell;
                    setTimeout(function () {
                        var cell2 = me._editingCell;
                        if (cell1 == cell2) {
                            me.commitEdit();
                        }
                    }, 70);
                }
                mini.un(document, 'mousedown', this.__OnBodyMouseDown, this);
            }
        }
    },
    _getEditWrap: function (box) {
        if (!this._editWrap) {
            this._editWrap = mini.append(document.body, '<div class="mini-grid-editwrap" style="position:absolute;"></div>');


            mini.on(this._editWrap, "keydown", this.___OnEditControlKeyDown, this);
        }
        this._editWrap.style.zIndex = 1000000000;
        this._editWrap.style.display = 'block';
        mini.setXY(this._editWrap, box.x, box.y);
        mini.setWidth(this._editWrap, box.width);

        var viewWidth = mini.getViewportBox().width;
        if (box.x > viewWidth) mini.setX(this._editWrap, -1000);

        return this._editWrap;
    },
    ___OnEditControlKeyDown: function (e) {

        var editor = this._editingControl;

        if (e.keyCode == 13 && editor && editor.type == "textarea") {

            return;
        }






        if (e.keyCode == 13) {

            var cell = this._editingCell;
            if (cell && cell[1] && cell[1].enterCommit === false) return;

            this.commitEdit();
            this.focus();

            if (this.editNextOnEnterKey) {

                this._beginEditNextCell(e.shiftKey == false);
            } else {


            }
        } else if (e.keyCode == 27) {
            this.cancelEdit();
            this.focus();
        } else if (e.keyCode == 9) {
            this.commitEdit();
            if (this.editOnTabKey) {
                e.preventDefault();
                this.commitEdit();
                this._beginEditNextCell(e.shiftKey == false);
            } else {

            }
        }
    },

    editNextOnEnterKey: false,
    editOnTabKey: true,
    createOnEnter: false,
    _beginEditNextCell: function (next) {
        var grid = this;
        var currentCell = this.getCurrentCell();
        if (!currentCell) return;
        this.focus();
        var columns = grid.getBottomVisibleColumns();

        var column = currentCell ? currentCell[1] : null,
            record = currentCell ? currentCell[0] : null;

        var columnIndex = columns.indexOf(column);
        var rowIndex = grid.indexOf(record);
        var count = grid.getData().length;


        if (next === false) {

            columnIndex -= 1;
            column = columns[columnIndex];
            if (!column) {
                column = columns[columns.length - 1];
                record = grid.getAt(rowIndex - 1);
                if (!record) {

                    return;
                }
            }
        } else {
            columnIndex += 1;
            column = columns[columnIndex];
            if (!column) {
                column = columns[0];
                record = grid.getAt(rowIndex + 1);
                if (!record) {
                    if (this.createOnEnter) {
                        record = {};

                        this.addRow(record);
                    } else {
                        return;
                    }
                }
            }
        }

        var currentCell = [record, column];
        grid.setCurrentCell(currentCell);
        grid.deselectAll();
        grid.setCurrent(record);
        grid.scrollIntoView(record, column);

        grid.beginEditCell();
    },



    getEditorOwnerRow: function (editor) {
        var uid = editor.ownerRowID;
        return this.getRowByUID(uid);
    },

    beginEditRow: function (row) {
        if (this.allowCellEdit) return;

        var sss = new Date();

        row = this.getRow(row);
        if (!row) return;
        var rowEl = this._getRowEl(row);
        if (!rowEl) return;




        row._editing = true;

        var s = this._createRow(row);
        var rowEl = this._getRowEl(row);
        jQuery(rowEl).before(s);
        rowEl.parentNode.removeChild(rowEl);

        var rowEl = this._getRowEl(row);
        mini.addClass(rowEl, "mini-grid-rowEdit");

        var columns = this.getBottomColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var value = row[column.field];

            var cellId = this._createCellId(row, columns[i]);
            var cellEl = document.getElementById(cellId);
            if (!cellEl) continue;

            if (typeof column.editor == "string") {
                column.editor = eval('(' + column.editor + ')');
            }

            var editorConfig = mini.copyTo({}, column.editor);

            editorConfig.id = this.uid + "$" + row._uid + "$" + column._id + "$editor";
            var editor = mini.create(editorConfig);

            if (this._OnCellBeginEdit(row, column, editor)) {
                if (editor) {
                    mini.addClass(cellEl, "mini-grid-cellEdit");
                    cellEl.innerHTML = "";
                    cellEl.appendChild(editor.el);
                    mini.addClass(editor.el, "mini-grid-editor");
                }
            }
        }

        this.doLayout();


    },
    cancelEditRow: function (row) {
        if (this.allowCellEdit) return;

        row = this.getRow(row);
        if (!row || !row._editing) return;
        delete row._editing;

        var rowEl = this._getRowEl(row);

        var columns = this.getBottomColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];

            var cellId = this._createCellId(row, columns[i]);
            var cellEl = document.getElementById(cellId);

            var editorEl = cellEl.firstChild;
            var editor = mini.get(editorEl);
            if (!editor) continue;

            editor.destroy();
        }

        var s = this._createRow(row);
        jQuery(rowEl).before(s);
        rowEl.parentNode.removeChild(rowEl);

        this.doLayout();

    },
    commitEditRow: function (row) {
        if (this.allowCellEdit) return;

        row = this.getRow(row);
        if (!row || !row._editing) return;

        var rowData = this.getEditRowData(row, false, false);

        this._canUpdateRowEl = false;
        this.updateRow(row, rowData);
        this._canUpdateRowEl = true;

        this.cancelEditRow(row);
    },
    isEditing: function () {
        for (var i = 0, l = this.data.length; i < l; i++) {
            var row = this.data[i];
            if (row._editing == true) return true;
        }
        return false;
    },
    isEditingRow: function (row) {
        row = this.getRow(row);
        if (!row) return false;
        return !!row._editing;
    },
    isNewRow: function (row) {
        return row._state == "added";
    },
    getEditingRows: function () {
        var rows = [];
        for (var i = 0, l = this.data.length; i < l; i++) {
            var row = this.data[i];
            if (row._editing == true) rows.push(row);
        }
        return rows;
    },
    getEditingRow: function () {
        var rows = this.getEditingRows();
        return rows[0];
    },
    getEditData: function (all) {
        var data = [];
        for (var i = 0, l = this.data.length; i < l; i++) {
            var row = this.data[i];
            if (row._editing == true) {
                var rowData = this.getEditRowData(i, all);
                rowData._index = i;

                data.push(rowData);
            }
        }
        return data;
    },
    getEditRowData: function (row, all, deep) {
        row = this.getRow(row);

        if (!row || !row._editing) return null;

        var rowData = {};

        var columns = this.getBottomColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var cellId = this._createCellId(row, columns[i]);
            var cellEl = document.getElementById(cellId);

            var e = null;
            if (column.type == "checkboxcolumn" || column.type == "radiobuttoncolumn") {
                var ck = column.getCheckBoxEl(row);
                var value = ck.checked ? column.trueValue : column.falseValue;
                e = this._OnCellCommitEdit(row, column, value);
            } else {
                var editorEl = cellEl.firstChild;
                var editor = mini.get(editorEl);
                if (!editor) continue;
                e = this._OnCellCommitEdit(row, column, null, editor);
            }
            if (deep !== false) {
                mini._setMap(column.field, e.value, rowData);
                if (column.displayField) {
                    mini._setMap(column.displayField, e.text, rowData);
                }
            } else {
                rowData[column.field] = e.value;
                if (column.displayField) {
                    rowData[column.displayField] = e.text;
                }
            }
        }

        rowData[this.idField] = row[this.idField];

        if (all) {
            var o = mini.copyTo({}, row);
            rowData = mini.copyTo(o, rowData);
        }

        return rowData;
    },

    isChanged: function () {
        return this.getChanges().length > 0;
    },
    getChanges: function (state, onlyField) {
        var rows = [];
        if (!state || state == "removed") {
            rows.addRange(this._removes);
        }
        for (var i = 0, l = this.data.length; i < l; i++) {
            var row = this.data[i];
            if (row._state && (!state || state == row._state)) {
                rows.push(row);
            }
        }
        if (onlyField) {
            for (var i = 0, l = rows.length; i < l; i++) {
                var row = rows[i];
                if (row._state == "modified") {
                    var newRow = {};
                    newRow._state = row._state;
                    newRow[this.idField] = row[this.idField];
                    for (var field in row) {
                        var modifed = this._HasRowModified(row, field);
                        if (modifed) {
                            newRow[field] = row[field];
                        }
                    }
                    rows[i] = newRow;
                }
            }
        }
        return rows;
    },

    isChanged: function () {
        var data = this.getChanges();
        return data.length > 0;
    },
    _originalIdField: "_uid",
    _getOriginal: function (record) {
        var rid = record[this._originalIdField];
        var or = this._originals[rid];
        if (!or) {
            or = this._originals[rid] = {};
        }
        return or;
    },
    _HasRowModified: function (reocrd, field) {
        var or = this._originals[reocrd[this._originalIdField]];
        if (!or) return false;
        if (mini.isNull(field)) return false;
        return or.hasOwnProperty(field);
    },
    _doUpdateRow: function (row, rowData) {

        var updated = false;
        for (var field in rowData) {
            var newValue = rowData[field];
            var oldValue = mini._getMap(field, row);

            if (mini.isEquals(oldValue, newValue)) continue;

            mini._setMap(field, newValue, row);

            if (row._state != "added") {
                row._state = "modified";
                var or = this._getOriginal(row);
                if (!or.hasOwnProperty(field)) {
                    or[field] = oldValue;
                }
            }

            updated = true;
        }
        return updated;
    },
    _canUpdateRowEl: true,
    _updateRowEl: function (row) {
        var me = this;

        var s = me._createRow(row);
        var rowEl = me._getRowEl(row);
        jQuery(rowEl).before(s);
        rowEl.parentNode.removeChild(rowEl);

    },
    updateRow: function (row, rowData, value) {

        row = this.getRow(row);
        if (!row || !rowData) return;


        if (typeof rowData == "string") {
            var o = {};
            o[rowData] = value;
            rowData = o;
        }

        var updated = this._doUpdateRow(row, rowData);
        if (updated == false) return;

        if (this._canUpdateRowEl) {
            this._updateRowEl(row);
        }

        if (row._state == "modified") {
            this.fire("updaterow", { record: row, row: row });
        }

        if (row == this.getSelected()) {
            this._OnCurrentChanged(row);
        }



        this._doMargeCells();
        this._doUpdateSummaryRow();

        this._deferLayout();
    },

    deleteRows: function (rows) {
        if (!mini.isArray(rows)) return;
        rows = rows.clone();
        for (var i = 0, l = rows.length; i < l; i++) {
            this.deleteRow(rows[i]);
        }
    },
    deleteRow: function (row) {
        row = this.getRow(row);
        if (!row || row._state == "deleted") return;
        if (row._state == "added") {
            this.removeRow(row, true);
        } else {

            if (this.isEditingRow(row)) this.cancelEditRow(row);

            row._state = "deleted";
            var rowEl = this._getRowEl(row);
            mini.addClass(rowEl, "mini-grid-deleteRow");

            this.fire("deleterow", { record: row, row: row });
        }
        this._doUpdateSummaryRow();
    },

    removeRows: function (rows, autoSelect) {
        if (!mini.isArray(rows)) return;
        rows = rows.clone();
        for (var i = 0, l = rows.length; i < l; i++) {
            this.removeRow(rows[i], autoSelect);
        }
    },
    removeSelected: function () {
        var row = this.getSelected();
        if (row) {
            this.removeRow(row, true);
        }
    },
    removeRow: function (row, autoSelect) {
        row = this.getRow(row);
        if (!row) return;

        var isCurrent = row == this.getSelected();

        var isSelected = this.isSelected(row);

        var index = this.data.indexOf(row);

        this.data.remove(row);

        if (row._state != "added") {
            row._state = "removed";
            this._removes.push(row);
            delete this._originals[row[this._originalIdField]];
        }

        delete this._idRows[row._uid];

        var s = this._createRow(row);
        var rowEl = this._getRowEl(row);
        if (rowEl) rowEl.parentNode.removeChild(rowEl);



        var id = this._createRowDetailId(row);
        var tr = document.getElementById(id);
        if (tr) {
            tr.parentNode.removeChild(tr);
        }

        if (isSelected && autoSelect) {

            var newSelected = this.getAt(index);
            if (!newSelected) newSelected = this.getAt(index - 1);
            this.deselectAll();
            this.select(newSelected);
        }

        this._checkSelecteds();

        this._removeRowError(row);
        this.fire("removerow", { record: row, row: row });

        if (isCurrent) {
            this._OnCurrentChanged(row);
        }
        this._doAlternating();
        this._deferLayout();


        this._doMargeCells();

        this._doUpdateSummaryRow();
    },
    autoCreateNewID: false,
    addRows: function (rows, index) {
        if (!mini.isArray(rows)) return;

        rows = rows.clone();
        for (var i = 0, l = rows.length; i < l; i++) {
            this.addRow(rows[i], index);
        }
    },
    addRow: function (row, index) {
        if (mini.isNull(index)) index = this.data.length;
        index = this.indexOf(index);
        var indexRow = this.getRow(index);
        this.data.insert(index, row);

        if (!row[this.idField]) {
            if (this.autoCreateNewID) {
                row[this.idField] = UUID();
            }
            var e = { row: row, record: row };
            this.fire("beforeaddrow", e);
        }

        row._state = "added";

        delete this._idRows[row._uid];
        row._uid = mini.DataGrid.RowID++;
        this._idRows[row._uid] = row;

        var s = this._createRow(row);
        if (indexRow) {
            var rowEl = this._getRowEl(indexRow);
            jQuery(rowEl).before(s);
        } else {
            mini.append(this._bodyInnerEl.firstChild, s);
        }

        this._doAlternating();

        this._deferLayout();


        this.fire("addrow", { record: row, row: row });


        var el = jQuery(".mini-grid-emptyText", this._bodyEl)[0];
        if (el) {

            mini.removeNode(el.parentNode);
        }


        this._doMargeCells();

        this._doUpdateSummaryRow();
    },
    moveRow: function (row, index) {

        row = this.getRow(row);
        if (!row) return;
        if (index < 0) return;

        if (index > this.data.length) return;

        var targetRow = this.getRow(index);

        if (row == targetRow) return;
        this.data.remove(row);

        var rowEl = this._getRowEl(row);
        if (targetRow) {
            index = this.data.indexOf(targetRow);
            this.data.insert(index, row);
            var rowEl2 = this._getRowEl(targetRow);
            jQuery(rowEl2).before(rowEl);
        } else {

            this.data.insert(this.data.length, row);

            var table = this._bodyInnerEl.firstChild;
            mini.append(table.firstChild || table, rowEl);
        }
        this._doAlternating();
        this._deferLayout();

        this.scrollIntoView(row);

        this.fire("moverow", { record: row, row: row, index: index });


        this._doMargeCells();
    },
    moveUp: function (items) {

        if (!mini.isArray(items)) return;

        var me = this;
        items = items.sort(function (a, b) {
            var i1 = me.indexOf(a);
            var i2 = me.indexOf(b);
            if (i1 > i2) return 1;
            return -1;
        });
        for (var i = 0, l = items.length; i < l; i++) {
            var item = items[i];
            var index = this.indexOf(item);
            this.moveRow(item, index - 1);
        }
    },
    moveDown: function (items) {
        if (!mini.isArray(items)) return;

        var me = this;
        items = items.sort(function (a, b) {
            var i1 = me.indexOf(a);
            var i2 = me.indexOf(b);
            if (i1 > i2) return 1;
            return -1;
        });
        items.reverse();
        for (var i = 0, l = items.length; i < l; i++) {
            var item = items[i];
            var index = this.indexOf(item);
            this.moveRow(item, index + 2);
        }
    },
    clearRows: function () {
        this.data = [];
        this.doUpdate();
    },
    indexOf: function (row) {
        if (typeof row == "number") return row;
        if (this.isGrouping()) {

            var g = this._getGroupDataView();
            return g.data.indexOf(row);
        } else {
            return this.data.indexOf(row);
        }
    },
    getAt: function (index) {
        if (this.isGrouping()) {
            var g = this._getGroupDataView();
            return g.data[index];
        } else {
            return this.data[index];
        }


    },
    getRow: function (index) {
        var t = typeof index;
        if (t == "number") return this.data[index];
        else if (t == "object") return index;
        else return this.getRowById(index);
    },

    getRowByValue: function (value) {
        for (var i = 0, l = this.data.length; i < l; i++) {
            var o = this.data[i];
            if (o[this.idField] == value) return o;
        }
    },
    getRowById: function (id) {
        return this.getRowByValue(id);
    },
    getRowByUID: function (uid) {
        return this._idRows[uid];
    },

    findRows: function (fn) {
        var rows = [];
        if (fn) {
            for (var i = 0, l = this.data.length; i < l; i++) {
                var row = this.data[i];
                var ret = fn(row);
                if (ret) rows.push(row);
                if (ret === 1) break;
            }
        }
        return rows;
    },
    findRow: function (fn) {
        if (fn) {
            for (var i = 0, l = this.data.length; i < l; i++) {
                var row = this.data[i];
                if (fn(row) === true) return row;
            }
        }
    },




    collapseGroupOnLoad: false,
    setCollapseGroupOnLoad: function (value) {
        this.collapseGroupOnLoad = value;

    },
    getCollapseGroupOnLoad: function () {
        return this.collapseGroupOnLoad;
    },


    showGroupSummary: false,
    setShowGroupSummary: function (value) {
        this.showGroupSummary = value;

    },
    getShowGroupSummary: function () {
        return this.showGroupSummary;
    },

    collapseGroups: function () {
        if (!this._groupDataView) return;
        for (var i = 0, l = this._groupDataView.length; i < l; i++) {
            var g = this._groupDataView[i];
            this._CollapseGroup(g);
        }
    },
    expandGroups: function () {
        if (!this._groupDataView) return;
        for (var i = 0, l = this._groupDataView.length; i < l; i++) {
            var g = this._groupDataView[i];
            this._ExpandGroup(g);
        }
    },
    _CollapseGroup: function (group) {
        var rows = group.rows;
        for (var i = 0, l = rows.length; i < l; i++) {
            var row = rows[i];
            var rowEl = this._getRowEl(row);
            if (rowEl) rowEl.style.display = "none";

            var rowEl = this.getRowDetailEl(row);
            if (rowEl) rowEl.style.display = "none";

        }
        group.expanded = false;
        var id = this.uid + "$group$" + group.id;
        var rowGroupEl = document.getElementById(id);
        if (rowGroupEl) mini.addClass(rowGroupEl, "mini-grid-group-collapse");

        this.doLayout();
    },
    _ExpandGroup: function (group) {
        var rows = group.rows;
        for (var i = 0, l = rows.length; i < l; i++) {
            var row = rows[i];
            var rowEl = this._getRowEl(row);
            if (rowEl) rowEl.style.display = "";

            var rowEl = this.getRowDetailEl(row);
            if (rowEl) rowEl.style.display = row._showDetail ? "" : "none";
        }
        group.expanded = true;
        var id = this.uid + "$group$" + group.id;
        var rowGroupEl = document.getElementById(id);
        if (rowGroupEl) mini.removeClass(rowGroupEl, "mini-grid-group-collapse");
        this.doLayout();
    },

    _GroupID: 1,
    _groupField: "",
    _groupDir: "",

    groupBy: function (field, dir) {
        if (!field) return;
        this._groupField = field;
        if (typeof dir == "string") dir = dir.toLowerCase();
        this._groupDir = dir;
        this._groupDataView = null;
        this.doUpdate();
    },
    clearGroup: function () {
        this._groupField = "";
        this._groupDir = "";
        this._groupDataView = null;
        this.doUpdate();
    },
    getGroupField: function () {
        return this._groupField;
    },
    getGroupDir: function () {
        return this._groupDir;
    },
    isGrouping: function () {
        return this._groupField != "";
    },
    _getGroupDataView: function () {
        if (this.isGrouping() == false) return null;

        if (!this._groupDataView) {
            var field = this._groupField, dir = this._groupDir;

            var data = this.data.clone();


            if (typeof dir == "function") {
                mini.sort(data, dir);
            } else {
                mini.sort(data, function (a, b) {
                    var v1 = a[field];
                    var v2 = b[field];
                    if (v1 > v2) return 1;
                    else return 0;
                }, this);
                if (dir == "desc") data.reverse();

            }

            var groups = [];
            var groupMaps = {};
            for (var i = 0, l = data.length; i < l; i++) {
                var o = data[i];
                var v = o[field];
                var p = mini.isDate(v) ? v.getTime() : v;
                var group = groupMaps[p];
                if (!group) {
                    group = groupMaps[p] = {};
                    group.header = field;
                    group.field = field;
                    group.dir = dir;
                    group.value = v;
                    group.rows = [];
                    groups.push(group);
                    group.id = this._GroupID++;
                }
                group.rows.push(o);
            }

            this._groupDataView = groups;

            var data = [];
            for (var i = 0, l = groups.length; i < l; i++) {
                data.addRange(groups[i].rows);
            }

            this._groupDataView.data = data;
        }
        return this._groupDataView;
    },

    _getGroupByID: function (id) {
        if (!this._groupDataView) return null;
        var groups = this._groupDataView;
        for (var i = 0, l = groups.length; i < l; i++) {
            var group = groups[i];
            if (group.id == id) return group;
        }
    },
    _OnDrawGroup: function (group) {
        var e = {
            group: group,
            rows: group.rows,
            field: group.field,
            dir: group.dir,
            value: group.value,
            cellHtml: group.header + " : " + group.value
        };
        this.fire("drawgroup", e);
        return e;
    },

    onDrawGroupHeader: function (fn, scope) {
        this.on("drawgroupheader", fn, scope);
    },
    onDrawGroupSummary: function (fn, scope) {
        this.on("drawgroupsummary", fn, scope);
    },


    mergeColumns: function (columns) {
        if (columns && mini.isArray(columns) == false) columns = [columns];

        var grid = this;
        var bottomColumns = grid.getBottomColumns();
        if (!columns) columns = bottomColumns;
        var data = grid.getData().clone();
        data.push({});

        var __cells = [];

        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            column = grid.getColumn(column);
            if (!column) continue;
            var cells = margeCells(column);
            __cells.addRange(cells);
        }

        grid.mergeCells(__cells);

        function margeCells(column) {
            if (!column.field) return;
            var cells = [];
            var rowIndex = -1, rowSpan = 1, columnIndex = bottomColumns.indexOf(column);
            var cellValue = null;
            for (var i = 0, l = data.length; i < l; i++) {
                var row = data[i];
                var value = row[column.field];


                if (rowIndex == -1 || value != cellValue) {
                    if (rowSpan > 1) {
                        var cell = { rowIndex: rowIndex, columnIndex: columnIndex, rowSpan: rowSpan, colSpan: 1 };
                        cells.push(cell);
                    }
                    rowIndex = i;
                    rowSpan = 1;
                    cellValue = value;
                } else {
                    rowSpan++;
                }

            }

            return cells;
        }
    },

    mergeCells: function (cells) {
        if (!mini.isArray(cells)) return;
        this._margedCells = cells;
        this._doMargeCells();


        var _mergedCellMaps = this._mergedCellMaps = {};
        function doMargedCellMaps(rowIndex, columnIndex, rowSpan, colSpan, cell) {
            for (var i = rowIndex, l = rowIndex + rowSpan; i < l; i++) {
                for (var j = columnIndex, k = columnIndex + colSpan; j < k; j++) {
                    if (i == rowIndex && j == columnIndex) {
                        _mergedCellMaps[i + ":" + j] = cell;
                    } else {
                        _mergedCellMaps[i + ":" + j] = true;
                    }
                }
            }
        }
        var cells = this._margedCells;
        if (cells) {
            for (var i = 0, l = cells.length; i < l; i++) {
                var cell = cells[i];
                if (!cell.rowSpan) cell.rowSpan = 1;
                if (!cell.colSpan) cell.colSpan = 1;
                doMargedCellMaps(cell.rowIndex, cell.columnIndex, cell.rowSpan, cell.colSpan, cell);
            }
        }
    },
    margeCells: function (cells) {
        this.mergeCells(cells);
    },
    _isCellVisible: function (rowIndex, columnIndex) {
        if (!this._mergedCellMaps) return true;
        var ret = this._mergedCellMaps[rowIndex + ":" + columnIndex];
        return !(ret === true);
    },




    _doMargeCells: function () {

        function _doMargeCells() {
            var cells = this._margedCells;
            if (!cells) return;
            for (var i = 0, l = cells.length; i < l; i++) {
                var cell = cells[i];
                if (!cell.rowSpan) cell.rowSpan = 1;
                if (!cell.colSpan) cell.colSpan = 1;
                var cellEls = this._getCellEls(cell.rowIndex, cell.columnIndex, cell.rowSpan, cell.colSpan);

                for (var j = 0, k = cellEls.length; j < k; j++) {
                    var el = cellEls[j];
                    if (j != 0) {
                        el.style.display = "none";
                    } else {
                        el.rowSpan = cell.rowSpan;
                        el.colSpan = cell.colSpan;
                    }
                }
            }
        }

        _doMargeCells.call(this);








    },
    _getCellEls: function (rowIndex, columnIndex, rowSpan, colSpan) {
        var cells = [];
        if (!mini.isNumber(rowIndex)) return [];
        if (!mini.isNumber(columnIndex)) return [];


        var columns = this.getBottomColumns();
        var data = this.data;

        for (var i = rowIndex, l = rowIndex + rowSpan; i < l; i++) {
            for (var j = columnIndex, k = columnIndex + colSpan; j < k; j++) {
                var cell = this._getCellEl(i, j);
                if (cell) cells.push(cell);
            }
        }

        return cells;
    },



    _selected: null,
    _selecteds: [],
    _checkSelecteds: function () {






        var rows = this._selecteds;
        for (var i = rows.length - 1; i >= 0; i--) {
            var row = rows[i];
            if (!!this._idRows[row._uid] == false) {
                rows.removeAt(i);
                delete this._idSelecteds[row._uid];
            }
        }
        if (this._selected) {
            if (!!this._idSelecteds[this._selected._uid] == false) {
                this._selected = null;
            }
        }
    },

    setAllowUnselect: function (value) {
        this.allowUnselect = value;
    },
    getAllowUnselect: function (value) {
        return this.allowUnselect;
    },
    setAllowRowSelect: function (value) {
        this.allowRowSelect = value;
    },
    getAllowRowSelect: function (value) {
        return this.allowRowSelect;
    },
    setMultiSelect: function (value) {
        if (this.multiSelect != value) {
            this.multiSelect = value;
            this._doUpdateHeader();
        }
    },
    getMultiSelect: function () {
        return this.multiSelect;
    },
    _getSelectAllCheckState: function () {
        var data = this.getData();
        var state = true;
        if (data.length == 0) {
            state = false;
            return state;
        }

        var selectedCount = 0;
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            if (this.isSelected(o)) {
                selectedCount++;
            } else {

            }
        }

        if (data.length == selectedCount) {
            state = true;
        } else if (selectedCount == 0) {
            state = false;
        } else {
            state = "has"
        }

        return state;
    },
    isSelected: function (record) {
        record = this.getRow(record);
        if (!record) return false;
        return !!this._idSelecteds[record._uid];
    },
    getSelecteds: function () {
        this._checkSelecteds();
        return this._selecteds.clone();
    },
    setCurrent: function (record) {
        this.setSelected(record);
    },
    getCurrent: function () {
        return this.getSelected();
    },
    getSelected: function () {
        this._checkSelecteds();
        return this._selected;
    },
    scrollIntoView: function (row, column) {
        try {

            if (column) {
                var cellEl = this._getCellEl(row, column);
                mini.scrollIntoView(cellEl, this._bodyEl, true);
            } else {
                var rowEl = this._getRowEl(row);
                mini.scrollIntoView(rowEl, this._bodyEl, false);
            }
        } catch (e) { }
    },
    setSelected: function (record) {
        if (record) {
            this.select(record);
        } else {
            this.deselect(this._selected);
        }
        if (this._selected) {
            this.scrollIntoView(this._selected);
        }
        this._blurRow();
    },
    select: function (record) {
        if (this.multiSelect == false) {
            this.deselectAll();
        }

        record = this.getRow(record);
        if (!record) return;

        this._selected = record;
        this.selects([record]);
    },
    deselect: function (record) {
        record = this.getRow(record);
        if (!record) return;

        this.deselects([record]);
    },
    selectAll: function () {

        var data = this.data.clone();
        this.selects(data);
    },
    deselectAll: function () {
        var selecteds = this._selecteds.clone();
        this._selected = null;
        this.deselects(selecteds);
    },
    clearSelect: function () {
        this.deselectAll();
    },

    selects: function (records) {
        if (!records || records.length == 0) return;
        var sss = new Date();

        records = records.clone();
        for (var i = records.length - 1; i >= 0; i--) {
            var record = this.getRow(records[i]);
            if (record) {
                records[i] = record;
            } else {
                records.removeAt(i);
            }
        }


        var idRows = {};
        var data = this.getData();
        for (var i = 0, l = data.length; i < l; i++) {
            var o = this.getRow(data[i]);

            var id = o[this.idField];
            if (id) {
                idRows[o[this.idField]] = o;
            }
        }
        var newRows = [];
        for (var i = 0, l = records.length; i < l; i++) {
            var record = records[i];
            var row = this._idRows[record._uid];
            if (!row) {
                record = idRows[record[this.idField]];
            }
            if (record) newRows.push(record);
        }
        records = newRows;


        records = records.clone();
        this._doSelects(records, true);

        for (var i = 0, l = records.length; i < l; i++) {
            var record = records[i];

            if (!this.isSelected(record)) {
                this._selecteds.push(record);
                this._idSelecteds[record._uid] = record;
            }
        }


        this._OnSelectionChanged();
    },
    deselects: function (records) {

        if (!records) records = [];

        records = records.clone();
        for (var i = records.length - 1; i >= 0; i--) {
            var record = this.getRow(records[i]);
            if (record) {
                records[i] = record;
            } else {
                records.removeAt(i);
            }
        }

        records = records.clone();
        this._doSelects(records, false);
        for (var i = records.length - 1; i >= 0; i--) {
            var record = records[i];
            if (this.isSelected(record)) {
                this._selecteds.remove(record);
                delete this._idSelecteds[record._uid];
            }
        }
        if (records.indexOf(this._selected) != -1) this._selected = null;

        this._OnSelectionChanged();
    },
    _doSelects: function (rows, select) {
        var sss = new Date();
        for (var i = 0, l = rows.length; i < l; i++) {
            var record = rows[i];
            if (select) {
                this.addRowCls(record, this._rowSelectedCls);
            } else {
                this.removeRowCls(record, this._rowSelectedCls);
            }

        }















    },
    _OnSelectionChanged: function () {
        if (this._selectionTimer) {
            clearTimeout(this._selectionTimer);
        }
        var me = this;
        this._selectionTimer = setTimeout(function () {
            var e = {
                selecteds: me.getSelecteds(),
                selected: me.getSelected()
            };
            me.fire("SelectionChanged", e);
            me._OnCurrentChanged(e.selected);
        }, 1);
    },
    _OnCurrentChanged: function (row) {
        if (this._currentTimer) {
            clearTimeout(this._currentTimer);
        }
        var me = this;
        this._currentTimer = setTimeout(function () {
            var e = { record: row, row: row };
            me.fire("CurrentChanged", e);
            me._currentTimer = null;
        }, 1);
    },




    addRowCls: function (row, cls) {
        var rowEl = this._getRowEl(row);
        if (rowEl) mini.addClass(rowEl, cls);
    },
    removeRowCls: function (row, cls) {
        var rowEl = this._getRowEl(row);
        if (rowEl) mini.removeClass(rowEl, cls);
    },
    _focusRow: function (row, view) {

        row = this.getRow(row);
        if (!row || row == this._focusedRow) {

            return;
        }
        var dom = this._getRowEl(row);
        if (view && dom) {
            this.scrollIntoView(row);
        }
        if (this._focusedRow == row) return;
        this._blurRow();
        this._focusedRow = row;

        mini.addClass(dom, this._rowHoverCls);
    },
    _blurRow: function () {
        if (!this._focusedRow) return;
        var dom = this._getRowEl(this._focusedRow);
        if (dom) {
            mini.removeClass(dom, this._rowHoverCls);
        }
        this._focusedRow = null;
    },
    _getRecordByEvent: function (e) {
        var t = mini.findParent(e.target, this._rowCls);
        if (!t) return null;
        var ids = t.id.split("$");
        var uid = ids[ids.length - 1];
        return this.getRowByUID(uid);
    },





    __OnMousewheel: function (e, delta) {
        if (this.allowCellEdit) {
            this.commitEdit();




        }

        var overflowY = jQuery(this._bodyEl).css("overflow-y");
        if (overflowY == "hidden") {

            var wheelDelta = e.wheelDelta || -e.detail * 24;
            var top = this._bodyEl.scrollTop;

            top -= wheelDelta;
            this._bodyEl.scrollTop = top;

            if (top == this._bodyEl.scrollTop) {
                e.preventDefault();
            } else {

            }

            var e = {
                scrollTop: this._bodyEl.scrollTop,
                direction: "vertical"
            };


            this.fire("scroll", e);
        }
    },
    __OnClick: function (e) {



        var rowGroupEl = mini.findParent(e.target, "mini-grid-groupRow");
        if (rowGroupEl) {
            var ids = rowGroupEl.id.split("$");
            var id = ids[ids.length - 1];
            var group = this._getGroupByID(id);
            if (group) {

                var expanded = !(group.expanded === false ? false : true);
                if (expanded) this._ExpandGroup(group);
                else this._CollapseGroup(group);
            }
        } else {
            this._fireEvent(e, 'Click');


        }

    },
    _tryFocus: function (e) {
        try {
            var tagName = e.target.tagName.toLowerCase();
            if (tagName == "input" || tagName == "textarea" || tagName == "select") return;
            if (mini.isAncestor(this._filterEl, e.target)
            || mini.isAncestor(this._summaryEl, e.target)
            || mini.isAncestor(this._footerEl, e.target)
            || mini.findParent(e.target, "mini-grid-rowEdit")
            || mini.findParent(e.target, "mini-grid-detailRow")
            ) {

            } else {
                var me = this;

                me.focus();

            }
        } catch (ex) { }
    },
    __OnDblClick: function (e) {
        this._fireEvent(e, 'Dblclick');
    },
    __OnMouseDown: function (e) {
        this._fireEvent(e, 'MouseDown');
        this._tryFocus(e);
    },
    __OnMouseUp: function (e) {
        if (mini.isAncestor(this.el, e.target)) {
            this._tryFocus(e);
            this._fireEvent(e, 'MouseUp');
        }
    },
    __OnMouseMove: function (e) {

        this._fireEvent(e, 'MouseMove');

    },
    __OnMouseOver: function (e) {
        this._fireEvent(e, 'MouseOver');
    },
    __OnMouseOut: function (e) {
        this._fireEvent(e, 'MouseOut');
    },
    __OnKeyDown: function (e) {
        this._fireEvent(e, 'KeyDown');
    },
    __OnKeyUp: function (e) {
        this._fireEvent(e, 'KeyUp');
    },
    __OnContextMenu: function (e) {
        this._fireEvent(e, 'ContextMenu');
    },
    _fireEvent: function (e, name) {

        if (!this.enabled) return;

        var cell = this._getCellByEvent(e);
        var record = cell.record, column = cell.column;
        if (record) {
            var eve = {
                record: record,
                row: record,
                htmlEvent: e
            };

            var fn = this['_OnRow' + name];
            if (fn) {
                fn.call(this, eve);
            } else {
                this.fire("row" + name, eve);
            }
        }
        if (column) {
            var eve = {
                column: column,
                field: column.field,
                htmlEvent: e
            };

            var fn = this['_OnColumn' + name];
            if (fn) {
                fn.call(this, eve);
            } else {
                this.fire("column" + name, eve);
            }
        }

        if (record && column) {
            var eve = {
                sender: this,
                record: record,
                row: record,
                column: column,
                field: column.field,
                htmlEvent: e
            };

            var fn = this['_OnCell' + name];
            if (fn) {
                fn.call(this, eve);
            } else {

                this.fire("cell" + name, eve);
            }

            if (column["onCell" + name]) {
                column["onCell" + name].call(column, eve);
            }

        }

        if (!record && column) {
            var eve = {
                column: column,
                htmlEvent: e
            };
            var fn = this['_OnHeaderCell' + name];
            if (fn) {
                fn.call(this, eve);
            } else {

                var evName = "onheadercell" + name.toLowerCase();
                if (column[evName]) {
                    eve.sender = this;
                    column[evName](eve);
                }

                this.fire("headercell" + name, eve);
            }
        }


        if (!record) this._blurRow();
    },

    _OnDrawCell: function (record, column, rowIndex, columnIndex) {


        var value = mini._getMap(column.field, record);
        var e = {
            sender: this,
            rowIndex: rowIndex,
            columnIndex: columnIndex,
            record: record,
            row: record,
            column: column,
            field: column.field,
            value: value,
            cellHtml: value,
            rowCls: null,
            cellCls: column.cellCls || '',
            rowStyle: null,
            cellStyle: column.cellStyle || '',
            allowCellWrap: this.allowCellWrap,
            autoEscape: column.autoEscape
        };



        e.visible = this._isCellVisible(rowIndex, columnIndex);
        if (e.visible == true && this._mergedCellMaps) {
            var cell = this._mergedCellMaps[rowIndex + ":" + columnIndex];
            if (cell) {
                e.rowSpan = cell.rowSpan;
                e.colSpan = cell.colSpan;
            }
        }

        if (column.dateFormat) {
            if (mini.isDate(e.value)) {

                e.cellHtml = mini.formatDate(value, column.dateFormat);
            }
            else e.cellHtml = value;
        }

        if (column.dataType == "float") {
            var value = parseFloat(e.value);
            if (!isNaN(value)) {
                decimalPlaces = parseInt(column.decimalPlaces);
                if (isNaN(decimalPlaces)) decimalPlaces = 0;
                e.cellHtml = value.toFixed(decimalPlaces);
            }
        }

        if (column.dataType == "currency") {
            e.cellHtml = mini.formatCurrency(e.value, column.currencyUnit);
        }

        if (column.displayField) {
            e.cellHtml = mini._getMap(column.displayField, record)
        }
        if (e.autoEscape == true) {
            e.cellHtml = mini.htmlEncode(e.cellHtml);
        }

        var renderer = column.renderer;
        if (renderer) {
            fn = typeof renderer == "function" ? renderer : mini._getFunctoin(renderer);
            if (fn) {
                e.cellHtml = fn.call(column, e);
            }
        }



        this.fire("drawcell", e);

        if (e.cellHtml && !!e.cellHtml.unshift && e.cellHtml.length == 0) {
            e.cellHtml = "&nbsp;";
        }

        if (e.cellHtml === null || e.cellHtml === undefined || e.cellHtml === "") e.cellHtml = "&nbsp;";

        return e;
    },
    _OnDrawSummaryCell: function (records, column) {
        var e = {
            result: this.getResultObject(),
            sender: this,
            data: records,
            column: column,
            field: column.field,
            value: "",
            cellHtml: "",
            cellCls: column.cellCls || '',
            cellStyle: column.cellStyle || '',
            allowCellWrap: this.allowCellWrap
        };

        if (column.summaryType) {
            var fn = mini.summaryTypes[column.summaryType];
            if (fn) {
                e.value = fn(records, column.field);
            }
        }

        var value = e.value;
        e.cellHtml = e.value;

        if (e.value && parseInt(e.value) != e.value && e.value.toFixed) {
            decimalPlaces = parseInt(column.decimalPlaces);
            if (isNaN(decimalPlaces)) decimalPlaces = 2;

            e.cellHtml = parseFloat(e.value.toFixed(decimalPlaces));
        }

        if (column.dateFormat) {
            if (mini.isDate(e.value)) {

                e.cellHtml = mini.formatDate(value, column.dateFormat);
            }
            else e.cellHtml = value;
        }
        if (column.dataType == "currency") {

            e.cellHtml = mini.formatCurrency(e.cellHtml, column.currencyUnit);
        }

        var renderer = column.summaryRenderer;
        if (renderer) {
            fn = typeof renderer == "function" ? renderer : window[renderer];
            if (fn) {
                e.cellHtml = fn.call(column, e);
            }
        }
        column.summaryValue = e.value;

        this.fire("drawsummarycell", e);

        if (e.cellHtml === null || e.cellHtml === undefined || e.cellHtml === "") e.cellHtml = "&nbsp;";

        return e;
    },
    _OnDrawGroupSummaryCell: function (records, column) {
        var e = {
            sender: this,
            data: records,
            column: column,
            field: column.field,
            value: "",
            cellHtml: "",
            cellCls: column.cellCls || '',
            cellStyle: column.cellStyle || '',
            allowCellWrap: this.allowCellWrap
        };

        if (column.groupSummaryType) {
            var fn = mini.groupSummaryType[column.summaryType];
            if (fn) {
                e.value = fn(records, column.field);
            }
        }
        e.cellHtml = e.value;

        var renderer = column.groupSummaryRenderer;
        if (renderer) {
            fn = typeof renderer == "function" ? renderer : window[renderer];
            if (fn) {
                e.cellHtml = fn.call(column, e);
            }
        }

        this.fire("drawgroupsummarycell", e);

        if (e.cellHtml === null || e.cellHtml === undefined || e.cellHtml === "") e.cellHtml = "&nbsp;";

        return e;
    },

    _OnCellMouseDown: function (e) {
        var record = e.record;

        this.fire("cellmousedown", e);
    },
    _OnRowMouseOut: function (e) {
        if (!this.enabled) return;
        if (mini.isAncestor(this.el, e.target)) return;


    },
    _OnRowMouseMove: function (e) {
        record = e.record;
        if (!this.enabled || record.enabled === false || this.enableHotTrack == false) return;

        this.fire("rowmousemove", e);

        var me = this;




        me._focusRow(record);



    },
    _OnHeaderCellClick: function (e) {
        e.sender = this;
        var column = e.column;

        if (!mini.hasClass(e.htmlEvent.target, "mini-grid-splitter")) {
            if (this.allowSortColumn && this.isEditing() == false) {
                if (!column.columns || column.columns.length == 0) {
                    if (column.field && column.allowSort !== false) {
                        var sortOrder = "asc";
                        if (this.sortField == column.field) {
                            sortOrder = this.sortOrder == "asc" ? "desc" : "asc";
                        }
                        this.sortBy(column.field, sortOrder);
                    }
                }
            }
            this.fire("headercellclick", e);
        }
    },


    __OnHtmlContextMenu: function (e) {
        var ev = {
            popupEl: this.el,
            htmlEvent: e,
            cancel: false
        };

        if (mini.isAncestor(this._headerEl, e.target)) {
            if (this.headerContextMenu) {
                this.headerContextMenu.fire("BeforeOpen", ev);
                if (ev.cancel == true) return;
                this.headerContextMenu.fire("opening", ev);
                if (ev.cancel == true) return;
                this.headerContextMenu.showAtPos(e.pageX, e.pageY);
                this.headerContextMenu.fire("Open", ev);
            }
        } else {

            var d = mini.findParent(e.target, "mini-grid-detailRow");
            if (d && mini.isAncestor(this.el, d)) return;

            if (this.contextMenu) {
                this.contextMenu.fire("BeforeOpen", ev);
                if (ev.cancel == true) return;
                this.contextMenu.fire("opening", ev);
                if (ev.cancel == true) return;
                this.contextMenu.showAtPos(e.pageX, e.pageY);
                this.contextMenu.fire("Open", ev);
            }
        }
        return false;

    },
    headerContextMenu: null,
    setHeaderContextMenu: function (value) {
        var ui = this._getContextMenu(value);
        if (!ui) return;
        if (this.headerContextMenu !== ui) {
            this.headerContextMenu = ui;
            this.headerContextMenu.owner = this;
            mini.on(this.el, "contextmenu", this.__OnHtmlContextMenu, this);
        }
    },
    getHeaderContextMenu: function () {
        return this.headerContextMenu;
    },


    columnsMenu: null,
    createColumnsMenu: function () {
        if (!this.columnsMenu) {
            this.columnsMenu = mini.create({
                type: "menu",
                items: [
                    { type: "menuitem", text: "Sort Asc" },
                    { type: "menuitem", text: "Sort Desc" },
                    '-',
                    { type: "menuitem", text: "Columns", name: "columns",
                        items: [

                        ]
                    }
                ]
            });
        }
        var items = [];

        return this.columnsMenu;
    },
    _doShowColumnsMenu: function (column) {

        var menu = this.createColumnsMenu();
        var el = this._getColumnEl(column);
        var box = mini.getBox(el);
        menu.showAtPos(box.right - 17, box.bottom);
    },




    onRowDblClick: function (fn, scope) {
        this.on("rowdblclick", fn, scope);
    },
    onRowClick: function (fn, scope) {
        this.on("rowclick", fn, scope);
    },
    onRowMouseDown: function (fn, scope) {
        this.on("rowmousedown", fn, scope);
    },
    onRowContextMenu: function (fn, scope) {
        this.on("rowcontextmenu", fn, scope);
    },
    onCellClick: function (fn, scope) {
        this.on("cellclick", fn, scope);
    },
    onCellMouseDown: function (fn, scope) {
        this.on("cellmousedown", fn, scope);
    },
    onCellContextMenu: function (fn, scope) {
        this.on("cellcontextmenu", fn, scope);
    },
    onBeforeLoad: function (fn, scope) {
        this.on("beforeload", fn, scope);
    },
    onLoad: function (fn, scope) {
        this.on("load", fn, scope);
    },
    onLoadError: function (fn, scope) {
        this.on("loaderror", fn, scope);
    },
    onPreLoad: function (fn, scope) {
        this.on("preload", fn, scope);
    },

    onDrawCell: function (fn, scope) {
        this.on("drawcell", fn, scope);
    },
    onCellBeginEdit: function (fn, scope) {
        this.on("cellbeginedit", fn, scope);
    },



    getAttrs: function (el) {

        var attrs = mini.DataGrid.superclass.getAttrs.call(this, el);

        var cs = mini.getChildNodes(el);
        for (var i = 0, l = cs.length; i < l; i++) {
            var node = cs[i];
            var property = jQuery(node).attr("property");
            if (!property) continue;
            property = property.toLowerCase();
            if (property == "columns") {

                attrs.columns = mini._ParseColumns(node);
            } else if (property == "data") {
                attrs.data = node.innerHTML;
            }
        }

        mini._ParseString(el, attrs,
            [
                "url", "sizeList", "bodyCls", "bodyStyle", "footerCls", "footerStyle", "pagerCls", "pagerStyle",
                "onheadercellclick", "onheadercellmousedown", "onheadercellcontextmenu",
                "onrowdblclick",
                "onrowclick", "onrowmousedown", "onrowcontextmenu",
                "oncellclick", "oncellmousedown", "oncellcontextmenu",
                "onbeforeload", "onpreload", "onloaderror", "onload",
                "ondrawcell", "oncellbeginedit", "onselectionchanged",
                "onshowrowdetail", "onhiderowdetail", "idField", "valueField",
                "ajaxMethod", "ondrawgroup", "pager", "oncellcommitedit", "oncellendedit",
                "headerContextMenu", "loadingMsg", "emptyText", "cellEditAction",
                "sortMode", "oncellvalidation", "onsort", "pageIndexField", "pageSizeField", "sortFieldField", "sortOrderField", "totalField", "dataField",
                "ondrawsummarycell", "ondrawgroupsummarycell", "onresize", "oncolumnschanged",
                "pagerButtons"
             ]
        );

        mini._ParseBool(el, attrs,
            ["showColumns", "showHeader", "showPager", "showFooter", "showTop", "allowSortColumn", "allowMoveColumn", "allowResizeColumn",
            "showHGridLines", "showVGridLines", "showFilterRow", "showSummaryRow", "showFooter", "showTop",
            "fitColumns", "showLoading", "multiSelect", "allowAlternating", "resultAsData", "allowRowSelect", "allowUnselect",
            "enableHotTrack", "showPageIndex", "showPageSize", "showTotalCount",
            "checkSelectOnLoad", "allowResize", "autoLoad",
            "autoHideRowDetail", "allowCellSelect", "allowCellEdit", "allowCellWrap", "allowHeaderWrap", "selectOnLoad",
            "virtualScroll", "collapseGroupOnLoad", "showGroupSummary",
            "showEmptyText", "allowCellValid", "showModified", "showColumnsMenu", "showPageInfo", "showReloadButton",
            "showNewRow", "editNextOnEnterKey", "createOnEnter"
             ]
        );

        mini._ParseInt(el, attrs,
            ["columnWidth", "frozenStartColumn", "frozenEndColumn",
            "pageIndex", "pageSize"
             ]
        );

        if (typeof attrs.sizeList == "string") {
            attrs.sizeList = eval(attrs.sizeList);
        }
        if (!attrs.idField && attrs.valueField) {
            attrs.idField = attrs.valueField;
        }

        if (attrs.pagerButtons) {
            attrs.pagerButtons = mini.byId(attrs.pagerButtons);
        }

        return attrs;
    }


});

mini.regClass(mini.DataGrid, "datagrid");



mini_Column_Prototype = {
    _getColumnEl: function (column) {
        column = this.getColumn(column);
        if (!column) return null;
        var id = this._createColumnId(column);
        return document.getElementById(id);
    },
    _getCellEl: function (row, column) {
        row = this.getRow ? this.getRow(row) : this.getNode(row);
        column = this.getColumn(column);
        if (!row || !column) return null;
        var id = this._createCellId(row, column);
        return document.getElementById(id);
    },
    _getCellByEvent: function (e) {
        var record = this._getRecordByEvent ? this._getRecordByEvent(e) : this._getNodeByEvent(e);
        var column = this._getColumnByEvent(e);
        return {
            record: record,
            column: column
        };
    },
    _getColumnByEvent: function (e) {
        var t = mini.findParent(e.target, this._cellCls);
        if (!t) t = mini.findParent(e.target, this._headerCellCls);
        if (t) {
            var ids = t.id.split("$");
            var id = ids[ids.length - 1];
            return this._getColumnById(id);
        }
        return null;
    },
    _createColumnId: function (column) {
        return this.uid + "$column$" + column._id;
    },
    getColumnBox: function (column) {
        var id = this._createColumnId(column);
        var el = document.getElementById(id);
        if (el) {

            var box = mini.getBox(el);
            box.x -= 1;
            box.left = box.x;
            box.right = box.x + box.width;
            return box;
        }
    },

    setColumns: function (value) {


        if (!mini.isArray(value)) value = [];
        this.columns = value;

        this._idColumns = {};
        this._nameColumns = {};
        this._bottomColumns = [];

        this.maxColumnLevel = 0;
        var level = 0;

        function init(column, index, parentColumn) {
            if (column.type) {
                if (!mini.isNull(column.header) && typeof column.header !== "function") {
                    if (column.header.trim() == "") {
                        delete column.header;
                    }
                }
                var col = mini._getColumn(column.type);
                if (col) {
                    var _column = mini.copyTo({}, column);
                    mini.copyTo(column, col);
                    mini.copyTo(column, _column);
                }
            }






            var width = parseInt(column.width);
            if (mini.isNumber(width) && String(width) == column.width) column.width = width + "px";
            if (mini.isNull(column.width)) column.width = this.columnWidth + "px";
            column.visible = column.visible !== false;
            column.allowResize = column.allowResize !== false;
            column.allowMove = column.allowMove !== false;
            column.allowSort = column.allowSort === true;
            column.allowDrag = !!column.allowDrag;
            column.readOnly = !!column.readOnly;
            column.autoEscape = !!column.autoEscape;

            if (!column._id) column._id = mini.DataGrid.ColumnID++;
            column._gridUID = this.uid;
            column._rowIdField = this._rowIdField;
            column._pid = parentColumn == this ? -1 : parentColumn._id;
            this._idColumns[column._id] = column;
            if (column.name) this._nameColumns[column.name] = column;

            if (!column.columns || column.columns.length == 0) {
                this._bottomColumns.push(column);
            }

            column.level = level;
            level += 1;
            this.eachColumns(column, init, this);
            level -= 1;
            if (column.level > this.maxColumnLevel) this.maxColumnLevel = column.level;


            if (typeof column.editor == "string") {
                var cls = mini.getClass(column.editor);
                if (cls) {
                    column.editor = { type: column.editor };
                } else {
                    column.editor = eval('(' + column.editor + ')');
                }
            }



            if (typeof column.filter == "string") {
                column.filter = eval('(' + column.filter + ')');
            }
            if (column.filter && !column.filter.el) {
                column.filter = mini.create(column.filter);
            }

            if (typeof column.init == "function" && column.inited != true) {
                column.init(this);
            }
            column.inited = true;
        }
        this.eachColumns(this, init, this);

        if (this._doUpdateFilterRow) this._doUpdateFilterRow();

        this.doUpdate();

        this.fire("columnschanged");
    },
    getColumns: function () {
        return this.columns;
    },
    getBottomColumns: function () {
        return this._bottomColumns;
    },
    getVisibleColumns: function () {
        var columns = this.getBottomColumns();
        var cs = [];
        for (var i = 0, l = columns.length; i < l; i++) {
            var c = columns[i];
            if (c.visible) cs.push(c);
        }
        return cs;
    },
    getBottomVisibleColumns: function () {
        var columns = [];
        for (var i = 0, l = this._bottomColumns.length; i < l; i++) {
            var c = this._bottomColumns[i];
            if (this.isVisibleColumn(c)) columns.push(c);
        }
        return columns;
    },
    eachColumns: function (column, fn, scope) {
        var columns = column.columns;
        if (columns) {
            var list = columns.clone();
            for (var i = 0, l = list.length; i < l; i++) {
                var o = list[i];
                if (fn.call(scope, o, i, column) === false) break;
            }
        }
    },
    getColumn: function (index) {
        var t = typeof index;
        if (t == "number") return this.getBottomColumns()[index];
        else if (t == "object") return index;
        else {
            return this._nameColumns[index];
        }
    },
    getColumnByField: function (field) {
        if (!field) return;
        var columns = this.getBottomColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            if (column.field == field) return column;
        }
        return column;
    },
    _getColumnById: function (id) {
        return this._idColumns[id];
    },
    getParentColumn: function (column) {
        column = this.getColumn(column);
        var pid = column._pid;
        if (pid == -1) return this;
        return this._idColumns[pid];
    },
    getAncestorColumns: function (node) {
        var as = [];
        while (1) {
            var parentNode = this.getParentColumn(node);
            if (!parentNode || parentNode == this) break;
            as[as.length] = parentNode;
            node = parentNode;
        }
        as.reverse();
        return as;
    },
    isAncestorColumn: function (parentNode, node) {
        if (parentNode == node) return true;
        if (!parentNode || !node) return false;
        var as = this.getAncestorColumns(node);
        for (var i = 0, l = as.length; i < l; i++) {
            if (as[i] == parentNode) return true;
        }
        return false;
    },
    isVisibleColumn: function (column) {
        column = this.getColumn(column);
        var columns = this.getAncestorColumns(column);
        for (var i = 0, l = columns.length; i < l; i++) {
            if (columns[i].visible == false) return false;
        }
        return true;
    },
    updateColumn: function (column, option) {
        column = this.getColumn(column);
        if (!column) return;
        mini.copyTo(column, option);
        this.setColumns(this.columns);
    },
    removeColumn: function (column) {
        column = this.getColumn(column);
        var pcolumn = this.getParentColumn(column);
        if (column && pcolumn) {
            pcolumn.columns.remove(column);
            this.setColumns(this.columns);
        }
        return column;
    },
    moveColumn: function (column, targetColumn, action) {
        column = this.getColumn(column);
        targetColumn = this.getColumn(targetColumn);
        if (!column || !targetColumn || !action || column == targetColumn) return;

        if (this.isAncestorColumn(column, targetColumn)
            ) {
            return;
        }


        var pcolumn = this.getParentColumn(column);
        if (pcolumn) {
            pcolumn.columns.remove(column);
        }


        var parentColumn = targetColumn;
        var index = action;
        if (index == 'before') {
            parentColumn = this.getParentColumn(targetColumn);
            index = parentColumn.columns.indexOf(targetColumn);
        } else if (index == 'after') {
            parentColumn = this.getParentColumn(targetColumn);
            index = parentColumn.columns.indexOf(targetColumn) + 1;
        } else if (index == 'add' || index == "append") {
            if (!parentColumn.columns) parentColumn.columns = [];
            index = parentColumn.columns.length;
        } else if (!mini.isNumber(index)) {
            return;
        }

        parentColumn.columns.insert(index, column);

        this.setColumns(this.columns);
    },
    hideColumns: function (columns) {
        if (this.allowCellEdit) {
            this.commitEdit();
        }
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = this.getColumn(columns[i]);
            if (!column) continue;
            column.visible = false;
        }
        this.setColumns(this.columns);
    },
    showColumns: function (columns) {
        if (this.allowCellEdit) {
            this.commitEdit();
        }
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = this.getColumn(columns[i]);
            if (!column) continue;
            column.visible = true;
        }
        this.setColumns(this.columns);
    },
    hideColumn: function (column) {
        column = this.getColumn(column);
        if (!column) return;

        if (this.allowCellEdit) {
            this.commitEdit();
        }

        column.visible = false;
        this.setColumns(this.columns);






    },
    showColumn: function (column) {
        column = this.getColumn(column);
        if (!column) return;

        if (this.allowCellEdit) {
            this.commitEdit();
        }

        column.visible = true;
        this.setColumns(this.columns);













    },
    getColumnRows: function () {
        var maxLevel = this.getMaxColumnLevel();
        var dcs = [];
        for (var i = 0, l = maxLevel; i <= l; i++) {
            dcs.push([]);
        }

        function getColSpan(col) {
            var subColumns = mini.treeToArray(col.columns, "columns");
            var colSpan = 0;
            for (var i = 0, l = subColumns.length; i < l; i++) {
                var c = subColumns[i];
                if (c.visible != true || c._hide == true) continue;
                if (!c.columns || c.columns.length == 0) {
                    colSpan += 1;
                }
            }
            return colSpan;
        }

        var list = mini.treeToArray(this.columns, "columns");

        for (var i = 0, l = list.length; i < l; i++) {
            var column = list[i];
            var cols = dcs[column.level];

            if (column.columns && column.columns.length > 0) {
                column.colspan = getColSpan(column);
            }
            if ((!column.columns || column.columns.length == 0) && column.level < maxLevel) {
                column.rowspan = maxLevel - column.level + 1;
            }

            cols.push(column);
        }

        return dcs;
    },
    getMaxColumnLevel: function () {
        return this.maxColumnLevel;
    }
}


mini.copyTo(mini.DataGrid.prototype, mini_Column_Prototype);




mini._GridSort = function (grid) {

    this.grid = grid;



    mini.on(grid._headerEl, "mousemove", this.__OnGridHeaderMouseMove, this);
    mini.on(grid._headerEl, "mouseout", this.__OnGridHeaderMouseOut, this);
};
mini._GridSort.prototype = {
    __OnGridHeaderMouseOut: function (e) {
        if (this._focusedColumnEl) {
            mini.removeClass(this._focusedColumnEl, "mini-grid-headerCell-hover");
        }
    },
    __OnGridHeaderMouseMove: function (e) {
        var t = mini.findParent(e.target, "mini-grid-headerCell");
        if (t) {

            mini.addClass(t, "mini-grid-headerCell-hover");
            this._focusedColumnEl = t;
        }
    },
    __onGridHeaderCellClick: function (e) {











    }
};






mini._ColumnSplitter = function (grid) {

    this.grid = grid;
    mini.on(this.grid.el, "mousedown", this.__onGridMouseDown, this);


    grid.on("layout", this.__OnGridLayout, this);
};
mini._ColumnSplitter.prototype = {
    __OnGridLayout: function (e) {

        if (this.splittersEl) mini.removeNode(this.splittersEl);
        if (this.splitterTimer) return;
        var grid = this.grid;
        if (grid.isDisplay() == false) return;

        var sf = this;
        this.splitterTimer = setTimeout(function () {


            var bottomColumns = grid.getBottomColumns();
            var columnLength = bottomColumns.length;

            var headerBox = mini.getBox(grid._headerEl, true);
            var scrollLeft = grid.getScrollLeft();

            var sb = [];

            for (var i = 0, l = bottomColumns.length; i < l; i++) {
                var column = bottomColumns[i];
                var box = grid.getColumnBox(column);
                if (!box) break;
                var top = box.top - headerBox.top;
                var left = box.right - headerBox.left - 2;
                var height = box.height;



                if (grid.isFrozen && grid.isFrozen()) {
                    if (i >= grid.frozenStartColumn) {

                    }
                } else {
                    left += scrollLeft;
                }


                var pcolumn = grid.getParentColumn(column);
                if (pcolumn && pcolumn.columns) {
                    if (pcolumn.columns[pcolumn.columns.length - 1] == column) {
                        if (height + 5 < headerBox.height) {
                            top = 0;
                            height = headerBox.height;
                        }
                    }
                }

                if (grid.allowResizeColumn && column.allowResize) {
                    sb[sb.length] = '<div id="' + column._id + '" class="mini-grid-splitter" style="left:'
                                + (left - 1) + 'px;top:' + top + 'px;height:' + height + 'px;"></div>';
                }
            }

            var s = sb.join('');

            sf.splittersEl = document.createElement("div");
            sf.splittersEl.className = 'mini-grid-splitters';
            sf.splittersEl.innerHTML = s;

            var el = grid._getHeaderScrollEl();
            el.appendChild(sf.splittersEl);



            sf.splitterTimer = null;
        }, 100);

    },
    __onGridMouseDown: function (e) {
        var grid = this.grid;
        var t = e.target;

        if (mini.hasClass(t, "mini-grid-splitter")) {
            var column = grid._idColumns[t.id];
            if (grid.allowResizeColumn && column && column.allowResize) {
                this.splitterColumn = column;
                this.getDrag().start(e);
            }
        }
    },
    getDrag: function () {
        if (!this.drag) {
            this.drag = new mini.Drag({
                capture: true,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this.drag;
    },
    _OnDragStart: function (drag) {
        var grid = this.grid;
        var columnBox = grid.getColumnBox(this.splitterColumn);
        this.columnBox = columnBox;
        this._dragProxy = mini.append(document.body, '<div class="mini-grid-proxy"></div>');


        var box = grid.getBox(true);
        box.x = columnBox.x;
        box.width = columnBox.width;
        box.right = columnBox.right;
        mini.setBox(this._dragProxy, box);
    },
    _OnDragMove: function (drag) {
        var grid = this.grid;
        var box = mini.copyTo({}, this.columnBox);
        var width = box.width + (drag.now[0] - drag.init[0]);
        if (width < grid.columnMinWidth) width = grid.columnMinWidth;
        if (width > grid.columnMaxWidth) width = grid.columnMaxWidth;

        mini.setWidth(this._dragProxy, width);
    },
    _OnDragStop: function (drag) {
        var grid = this.grid;
        var box = mini.getBox(this._dragProxy);
        var sf = this;
        var allowSort = grid.allowSortColumn;
        grid.allowSortColumn = false;
        setTimeout(function () {
            jQuery(sf._dragProxy).remove();
            sf._dragProxy = null;

            grid.allowSortColumn = allowSort;
        }, 10);

        var column = this.splitterColumn;

        var columnWidth = parseInt(column.width);
        if (columnWidth + "%" != column.width) {
            var width = grid.getColumnWidth(column);
            var w = parseInt(columnWidth / width * box.width);
            grid.setColumnWidth(column, w);
        }
    }
};




mini._ColumnMove = function (grid) {
    this.grid = grid;
    mini.on(this.grid.el, "mousedown", this.__onGridMouseDown, this);
};
mini._ColumnMove.prototype = {
    __onGridMouseDown: function (e) {

        var grid = this.grid;

        if (grid.isEditing && grid.isEditing()) return;
        if (mini.hasClass(e.target, "mini-grid-splitter")) return;

        if (e.button == mini.MouseButton.Right) return;
        var t = mini.findParent(e.target, grid._headerCellCls);
        if (t) {
            this._remove();

            var column = grid._getColumnByEvent(e);
            if (grid.allowMoveColumn && column && column.allowMove) {
                this.dragColumn = column;
                this._columnEl = t;
                this.getDrag().start(e);
            }
        }
    },
    getDrag: function () {
        if (!this.drag) {
            this.drag = new mini.Drag({
                capture: false,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this.drag;
    },
    _OnDragStart: function (drag) {
        function createHeaderCell(column) {
            var header = column.header;
            if (typeof header == "function") header = header.call(grid, column);
            if (mini.isNull(header) || header === "") header = "&nbsp;";
            return header;
        }

        var grid = this.grid;
        this._dragProxy = mini.append(document.body, '<div class="mini-grid-columnproxy"></div>');
        this._dragProxy.innerHTML = '<div class="mini-grid-columnproxy-inner" style="height:26px;">' + createHeaderCell(this.dragColumn) + '</div>';
        mini.setXY(this._dragProxy, drag.now[0] + 15, drag.now[1] + 18);
        mini.addClass(this._dragProxy, "mini-grid-no");

        this.moveTop = mini.append(document.body, '<div class="mini-grid-movetop"></div>');
        this.moveBottom = mini.append(document.body, '<div class="mini-grid-movebottom"></div>');
    },
    _OnDragMove: function (drag) {
        var grid = this.grid;
        var x = drag.now[0];

        mini.setXY(this._dragProxy, x + 15, drag.now[1] + 18);

        this.targetColumn = this.insertAction = null;
        var t = mini.findParent(drag.event.target, grid._headerCellCls);
        if (t) {
            var column = grid._getColumnByEvent(drag.event);
            if (column && column != this.dragColumn) {
                var p1 = grid.getParentColumn(this.dragColumn);
                var p2 = grid.getParentColumn(column);
                if (p1 == p2) {

                    this.targetColumn = column;
                    this.insertAction = "before";
                    var columnBox = grid.getColumnBox(this.targetColumn);

                    if (x > columnBox.x + columnBox.width / 2) {

                        this.insertAction = "after";
                    }
                }
            }
        }

        if (this.targetColumn) {

            mini.addClass(this._dragProxy, "mini-grid-ok");
            mini.removeClass(this._dragProxy, "mini-grid-no");

            var box = grid.getColumnBox(this.targetColumn);

            this.moveTop.style.display = 'block';
            this.moveBottom.style.display = 'block';
            if (this.insertAction == "before") {

                mini.setXY(this.moveTop, box.x - 4, box.y - 9);
                mini.setXY(this.moveBottom, box.x - 4, box.bottom);
            } else {

                mini.setXY(this.moveTop, box.right - 4, box.y - 9);
                mini.setXY(this.moveBottom, box.right - 4, box.bottom);
            }
        } else {
            mini.removeClass(this._dragProxy, "mini-grid-ok");
            mini.addClass(this._dragProxy, "mini-grid-no");

            this.moveTop.style.display = 'none';
            this.moveBottom.style.display = 'none';
        }
    },
    _remove: function () {
        var grid = this.grid;
        mini.removeNode(this._dragProxy);
        mini.removeNode(this.moveTop);
        mini.removeNode(this.moveBottom);
        this._dragProxy = this.moveTop = this.moveBottom = this.dragColumn = this.targetColumn = null;
    },
    _OnDragStop: function (drag) {

        var grid = this.grid;
        grid.moveColumn(this.dragColumn, this.targetColumn, this.insertAction);
        this._remove();
    }
};






mini._GridSelect = function (grid) {

    this.grid = grid;
    this.grid.on("cellmousedown", this.__onGridCellMouseDown, this);
    this.grid.on("cellclick", this.__onGridCellClick, this);
    this.grid.on("celldblclick", this.__onGridCellClick, this);

    mini.on(this.grid.el, "keydown", this.__OnGridKeyDown, this);
};
mini._GridSelect.prototype = {
    __OnGridKeyDown: function (e) {


        var grid = this.grid;
        if (mini.isAncestor(grid._filterEl, e.target)
            || mini.isAncestor(grid._summaryEl, e.target)
            || mini.isAncestor(grid._footerEl, e.target)
            || mini.findParent(e.target, 'mini-grid-detailRow')
            || mini.findParent(e.target, 'mini-grid-rowEdit')

            ) {
            return;
        }


        var currentCell = grid.getCurrentCell();

        if (e.shiftKey || e.ctrlKey || e.altKey) {
            return;
        }

        if (e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40) {
            e.preventDefault();
        }

        var columns = grid.getBottomVisibleColumns();

        var column = currentCell ? currentCell[1] : null,
            record = currentCell ? currentCell[0] : null;
        if (!currentCell) record = grid.getCurrent();
        var columnIndex = columns.indexOf(column);
        var rowIndex = grid.indexOf(record);
        var count = grid.getData().length;

        switch (e.keyCode) {
            case 9:
                if (grid.allowCellEdit && grid.editOnTabKey) {
                    e.preventDefault();

                    grid._beginEditNextCell(e.shiftKey == false);
                    return;
                }








                break;
            case 27:

                break;
            case 13:
                if (grid.allowCellEdit && grid.editNextOnEnterKey) {
                    if (grid.isEditingCell(currentCell) || !column.editor) {
                        grid._beginEditNextCell(e.shiftKey == false);
                        return;
                    }
                }
                if (grid.allowCellEdit && currentCell && !column.readOnly) {
                    grid.beginEditCell();
                }
                break;
            case 37:
                if (column) {
                    if (columnIndex > 0) {
                        columnIndex -= 1;
                    }
                } else {
                    columnIndex = 0;
                }
                break;
            case 38:
                if (record) {
                    if (rowIndex > 0) rowIndex -= 1;
                } else {
                    rowIndex = 0;
                }
                if (rowIndex != 0 && grid.isVirtualScroll()) {
                    if (grid._viewRegion.start > rowIndex) {
                        grid._bodyEl.scrollTop -= grid._rowHeight;
                        grid._tryUpdateScroll();
                    }
                }
                break;
            case 39:
                if (column) {
                    if (columnIndex < columns.length - 1) {
                        columnIndex += 1;
                    }
                } else {
                    columnIndex = 0;
                }
                break;
            case 40:
                if (record) {
                    if (rowIndex < count - 1) rowIndex += 1;
                } else {
                    rowIndex = 0;
                }
                if (grid.isVirtualScroll()) {
                    if (grid._viewRegion.end < rowIndex) {
                        grid._bodyEl.scrollTop += grid._rowHeight;
                        grid._tryUpdateScroll();
                    }
                }
                break;
            default:
                break;
        }

        column = columns[columnIndex];
        record = grid.getAt(rowIndex);

        if (column && record && grid.allowCellSelect) {
            var currentCell = [record, column];
            grid.setCurrentCell(currentCell);
            grid.scrollIntoView(record, column);
        }

        if (record && grid.allowRowSelect) {
            grid.deselectAll();
            grid.setCurrent(record);
        }
    },
    __onGridCellClick: function (e) {
        var grid = this.grid;
        if (grid.allowCellEdit == false) return;
        if (this.grid.cellEditAction != e.type) return;
        var record = e.record, column = e.column;
        if (!column.readOnly && !this.grid.isReadOnly()) {
            if (e.htmlEvent.shiftKey || e.htmlEvent.ctrlKey) {
            } else {
                this.grid.beginEditCell();

            }
        }
    },
    __onGridCellMouseDown: function (e) {

        var me = this;
        setTimeout(function () {
            me.__doSelect(e);
        }, 1);
    },

    __doSelect: function (e) {

        var record = e.record, column = e.column;
        var grid = this.grid;







        if (this.grid.allowCellSelect) {
            var cell = [record, column];
            this.grid.setCurrentCell(cell);
        }


        if (grid.allowRowSelect) {
            if (grid.multiSelect) {
                this.grid.el.onselectstart = function () { };
                if (e.htmlEvent.shiftKey) {
                    this.grid.el.onselectstart = function () { return false };
                    e.htmlEvent.preventDefault();

                    if (!this.currentRecord) {
                        this.grid.select(record);
                        this.currentRecord = this.grid.getSelected();
                    } else {
                        this.grid.deselectAll();
                        this.grid.selectRange(this.currentRecord, record);
                    }

                } else {
                    this.grid.el.onselectstart = function () { };
                    if (e.htmlEvent.ctrlKey) {
                        this.grid.el.onselectstart = function () { return false };
                        try {
                            e.htmlEvent.preventDefault();
                        } catch (ex) { }
                    }

                    if (e.column._multiRowSelect === true || e.htmlEvent.ctrlKey || grid.allowUnselect) {
                        if (grid.isSelected(record)) {
                            grid.deselect(record);
                        } else {
                            grid.select(record);
                        }
                    } else {
                        if (grid.isSelected(record)) {

                        } else {
                            grid.deselectAll();
                            grid.select(record);
                        }
                    }
                    this.currentRecord = this.grid.getSelected();
                }
            } else {
                if (!grid.isSelected(record)) {
                    grid.deselectAll();
                    grid.select(record);
                } else {
                    if (e.htmlEvent.ctrlKey) {
                        grid.deselectAll();
                    }
                }
            }
        }

    }
};



mini._CellToolTip = function (grid) {
    this.grid = grid;
    mini.on(this.grid.el, "mousemove", this.__onGridMouseMove, this);
};
mini._CellToolTip.prototype = {
    __onGridMouseMove: function (e) {

        var grid = this.grid;
        var cell = grid._getCellByEvent(e);

        var cellEl = grid._getCellEl(cell.record, cell.column);

        var error = grid.getCellError(cell.record, cell.column);
        if (cellEl) {
            if (error) {
                cellEl.title = error.errorText;
                return;
            }

            if (cellEl.firstChild) {
                if (mini.hasClass(cellEl.firstChild, "mini-grid-cell-inner")
                    || mini.hasClass(cellEl.firstChild, "mini-treegrid-treecolumn-inner")
                    ) {
                    cellEl = cellEl.firstChild;
                }
            }
            if (cellEl.scrollWidth > cellEl.clientWidth) {
                var s = cellEl.innerText || cellEl.textContent || "";
                cellEl.title = s.trim();
            } else {
                cellEl.title = "";
            }

        }
    }
};



mini._ColumnsMenu = function (grid) {
    this.grid = grid;
    this.menu = this.createMenu();
    mini.on(grid.el, "contextmenu", this.__OnContextMenu, this);
}
mini._ColumnsMenu.prototype = {
    createMenu: function () {
        var menu = mini.create({ type: "menu", hideOnClick: false });
        menu.on("itemclick", this.__OnItemClick, this);
        return menu;
    },
    updateMenu: function () {
        var grid = this.grid, menu = this.menu;
        var columns = grid.getBottomColumns();
        var items = [];
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var item = {};
            item.checked = column.visible;
            item.checkOnClick = true;
            item.text = grid._createHeaderText(column);
            if (item.text == "&nbsp;") {
                if (column.type == "indexcolumn") item.text = "序号";
                if (column.type == "checkcolumn") item.text = "选择";
            }
            items.push(item);

            item._column = column;
        }
        menu.setItems(items);
    },
    __OnContextMenu: function (e) {
        var grid = this.grid;
        if (grid.showColumnsMenu == false) return;
        if (mini.isAncestor(grid._headerEl, e.target) == false) return;
        this.updateMenu();
        this.menu.showAtPos(e.pageX, e.pageY);
        return false;
    },
    __OnItemClick: function (e) {
        var grid = this.grid, menu = this.menu;
        var columns = grid.getBottomColumns();
        var items = menu.getItems();
        var item = e.item, column = item._column;

        var checkedCount = 0;
        for (var i = 0, l = items.length; i < l; i++) {
            var it = items[i];
            if (it.getChecked()) checkedCount++;
        }
        if (checkedCount < 1) {
            item.setChecked(true);
        }

        var checked = item.getChecked();
        if (checked) grid.showColumn(column);
        else grid.hideColumn(column);
    }
}














































mini_CellValidator_Prototype = {
    getCellErrors: function () {
        var errors = this._cellErrors.clone();

        var data = this.data;
        for (var i = 0, l = errors.length; i < l; i++) {
            var error = errors[i];
            var row = error.record;
            var column = error.column;
            if (data.indexOf(row) == -1) {
                var id = row[this._rowIdField] + "$" + column._id;
                delete this._cellMapErrors[id];
                this._cellErrors.remove(error);
            }
        }

        return this._cellErrors;
    },
    getCellError: function (row, column) {
        row = this.getNode ? this.getNode(row) : this.getRow(row);
        column = this.getColumn(column);
        if (!row || !column) return;

        var id = row[this._rowIdField] + "$" + column._id;
        return this._cellMapErrors[id];
    },
    isValid: function () {

        return this.getCellErrors().length == 0;
    },
    validate: function () {

        var data = this.data;
        for (var i = 0, l = data.length; i < l; i++) {
            var row = data[i];
            this.validateRow(row);

        }
    },
    validateRow: function (row) {
        var columns = this.getBottomColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            this.validateCell(row, column);
        }
    },
    validateCell: function (row, column) {
        row = this.getNode ? this.getNode(row) : this.getRow(row);
        column = this.getColumn(column);
        if (!row || !column) return;
        var e = {
            record: row,
            row: row,
            node: row,
            column: column,
            field: column.field,
            value: row[column.field],
            isValid: true,
            errorText: ""
        };

        if (column.vtype) {
            mini._ValidateVType(column.vtype, e.value, e, column);
        }

        if (e.isValid == true && column.unique && column.field) {

            var maps = {};
            var data = this.data, field = column.field;
            for (var i = 0, l = data.length; i < l; i++) {
                var o = data[i];
                var v = o[field];
                if (mini.isNull(v) || v === "") {
                } else {
                    var old = maps[v];
                    if (old && o == row) {
                        e.isValid = false;
                        e.errorText = mini._getErrorText(column, "uniqueErrorText");


                        this.setCellIsValid(old, column, e.isValid, e.errorText);
                        break;
                    }
                    maps[v] = o;
                }
            }
        }

        this.fire("cellvalidation", e);
        this.setCellIsValid(row, column, e.isValid, e.errorText);
    },

    setIsValid: function (value) {
        if (value) {
            var errors = this._cellErrors.clone();
            for (var i = 0, l = errors.length; i < l; i++) {
                var error = errors[i];
                this.setCellIsValid(error.record, error.column, true);
            }
        }
    },
    _removeRowError: function (row) {
        var columns = this.getColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var id = row[this._rowIdField] + "$" + column._id;
            var error = this._cellMapErrors[id];
            if (error) {
                delete this._cellMapErrors[id];
                this._cellErrors.remove(error);
            }
        }
    },
    setCellIsValid: function (row, column, isValid, errorText) {
        row = this.getNode ? this.getNode(row) : this.getRow(row);
        column = this.getColumn(column);
        if (!row || !column) return;
        var id = row[this._rowIdField] + "$" + column._id;
        var cellEl = this._getCellEl(row, column);

        var error = this._cellMapErrors[id];
        delete this._cellMapErrors[id];
        this._cellErrors.remove(error);

        if (isValid === true) {
            if (cellEl && error) {
                mini.removeClass(cellEl, 'mini-grid-cell-error');
            }
        } else {
            error = { record: row, column: column, isValid: isValid, errorText: errorText };
            this._cellMapErrors[id] = error;
            this._cellErrors.add(error);
            if (cellEl) {
                mini.addClass(cellEl, 'mini-grid-cell-error');
            }
        }
    }
}


mini.copyTo(mini.DataGrid.prototype, mini_CellValidator_Prototype);




mini.GridEditor = function () {
    this._inited = true;
    mini.Control.superclass.constructor.call(this);

    this._create();
    this.el.uid = this.uid;

    this._initEvents();

    this._doInit();

    this.addCls(this.uiCls);
}
mini.extend(mini.GridEditor, mini.Control, {
    el: null,
    _create: function () {
        this.el = document.createElement("input");
        this.el.type = "text";
        this.el.style.width = "100%";
    },
    getValue: function () {
        return this.el.value;
    },
    setValue: function (value) {
        this.el.value = value;
    },
    setWidth: function (value) {

    }
});





mini.Tree = function (config) {
    this._ajaxOption = {
        async: false,
        type: "get"
    };

    this.root = { _id: -1, _pid: "", _level: -1 };
    this.data = this.root[this.nodesField] = [];

    this._idNodes = {};
    this.idNodes = {};
    this._viewNodes = null;

    mini.Tree.superclass.constructor.call(this, config);

    this.on("beforeexpand", function (e) {
        var node = e.node;
        var isLeaf = this.isLeaf(node);
        var cs = node[this.nodesField];

        if (!isLeaf && (!cs || cs.length == 0)) {
            if (this.loadOnExpand && node.asyncLoad !== false) {
                e.cancel = true;
                this.loadNode(node);
            }
        }
    }, this);

    this.doUpdate();
}
mini.Tree.NodeUID = 1;
var lastNodeLevel = [];
mini.extend(mini.Tree, mini.Control, {
    isTree: true,
    _displayStyle: "block",

    autoEscape: false,

    loadOnExpand: true,

    removeOnCollapse: true,

    expandOnDblClick: true,

    expandOnNodeClick: false,

    value: "",
    _selectedNode: null,
    allowSelect: true,
    showCheckBox: false,
    showFolderCheckBox: true,
    showExpandButtons: true,
    enableHotTrack: true,
    showArrow: false,

    expandOnLoad: false,

    delimiter: ",",

    url: "",

    root: null,

    resultAsTree: true,

    parentField: "pid",
    idField: "id",
    textField: "text",
    iconField: "iconCls",
    nodesField: "children",
    checkedField: "checked",

    showTreeIcon: false,
    showTreeLines: true,
    checkRecursive: false,

    allowAnim: true,

    _checkBoxCls: "mini-tree-checkbox",
    _selectedNodeCls: "mini-tree-selectedNode",
    _nodeHoverCls: "mini-tree-node-hover",

    leafIcon: "mini-tree-leaf",
    folderIcon: "mini-tree-folder",

    _borderCls: "mini-tree-border",
    _headerCls: "mini-tree-header",
    _bodyCls: "mini-tree-body",

    _nodeCls: "mini-tree-node",
    _nodesCls: "mini-tree-nodes",

    _expandNodeCls: "mini-tree-expand",
    _collapseNodeCls: "mini-tree-collapse",
    _eciconCls: "mini-tree-node-ecicon",
    _inNodeCls: "mini-tree-nodeshow",

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var value = kv.value;
        delete kv.value;
        var url = kv.url;
        delete kv.url;
        var data = kv.data;
        delete kv.data;





        mini.Tree.superclass.set.call(this, kv);

        if (!mini.isNull(data)) {
            this.setData(data);
        }
        if (!mini.isNull(url)) {
            this.setUrl(url);
        }
        if (!mini.isNull(value)) {
            this.setValue(value);
        }



        return this;
    },

    uiCls: "mini-tree",
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-tree";

        if (this.showTreeLines == true) {
            mini.addClass(this.el, 'mini-tree-treeLine');
        }
        this.el.style.display = "block";

        this._borderEl = mini.append(this.el, '<div class="' + this._borderCls + '">'
            + '<div class="' + this._headerCls + '"></div><div class="' + this._bodyCls + '"></div></div>');
        this._headerEl = this._borderEl.childNodes[0];
        this._bodyEl = this._borderEl.childNodes[1];

        this._DragDrop = new mini._TreeDragDrop(this);
    },
    _initEvents: function () {
        mini._BindEvents(function () {
            mini.on(this.el, "click", this.__OnClick, this);
            mini.on(this.el, "dblclick", this.__OnDblClick, this);
            mini.on(this.el, "mousedown", this.__OnMouseDown, this);
            mini.on(this.el, 'mousemove', this.__OnMouseMove, this);
            mini.on(this.el, 'mouseout', this.__OnMouseOut, this);
        }, this);


    },
    _changed: false,
    isChanged: function () {
        return this._changed;
    },
    accept: function () {
        this._changed = false;
    },

    autoLoad: true,
    setAutoLoad: function (value) {
        this.autoLoad = value;
    },
    getAutoLoad: function () {
        return this.autoLoad;
    },
    ajaxType: "",
    setAjaxType: function (value) {
        this.ajaxType = value;
    },
    getAjaxType: function () {
        return this.ajaxType;
    },

    load: function (data) {
        if (typeof data == "string") {
            this.url = data;
            this._doLoad({}, this.root);
        }
        else if (mini.isArray(data)) {
            this.setData(data);
        } else {
            this._doLoad(data, this.root);
        }
    },
    setData: function (data) {
        this.loadData(data);
        this.data = data;

        this._cellErrors = [];
        this._cellMapErrors = {};
    },
    getData: function () {
        return this.data;
    },
    toArray: function () {
        return this.getList();
    },
    getList: function () {
        if (!this._list) {

            this._list = mini.treeToArray(this.root[this.nodesField], this.nodesField, "_id", "_pid", "-1");

            this._indexs = {};
            for (var i = 0, l = this._list.length; i < l; i++) {
                var node = this._list[i];
                this._indexs[node[this.idField]] = i;
            }
        }
        return this._list;
    },
    _clearTree: function () {
        this._list = null;
        this._indexs = null;
    },
    loadList: function (list, idField, parentField) {
        idField = idField || this.idField;
        parentField = parentField || this.parentField;
        var tree = mini.arrayToTree(list, this.nodesField, idField, parentField);
        this.setData(tree);
    },
    loadData: function (data) {
        if (!mini.isArray(data)) data = [];

        this._changed = false;



        this.root[this.nodesField] = data;

        this.data = data;

        this.idNodes = {};
        this._idNodes = {};

        this._updateParentAndLevel(this.root, null);

        var checkedField = this.checkedField;
        this.cascadeChild(this.root, function (node) {
            node.checked = node[checkedField];

            if (mini.isNull(node.expanded)) {

                var level = this.getLevel(node);
                if (this.expandOnLoad === true
                    || (mini.isNumber(this.expandOnLoad) && level <= this.expandOnLoad)) {
                    node.expanded = true;
                } else {
                    node.expanded = false;
                }

            }

            if (node.isLeaf === false) {
                var cs = node[this.nodesField];
                if (cs && cs.length > 0) {

                }
            }
        }, this);


        this._viewNodes = null;


        this._selectedNode = null;

        this.doUpdate();

    },
    clearData: function () {
        this.loadData([]);
    },
    setUrl: function (url) {
        this.url = url;
        if (this.autoLoad) {
            this.load(url);
        }
    },
    getUrl: function () {
        return this.url;
    },
    loadNode: function (node, expand) {
        node = this.getNode(node);
        if (!node) return;
        if (this.isLeaf(node)) return;

        var params = {};

        params[this.idField] = this.getItemValue(node);

        var sf = this;

        sf.addNodeCls(node, "mini-tree-loading");

        var async = this._ajaxOption.async;
        this._ajaxOption.async = true;

        var time = new Date();
        this._doLoad(params, node, function (data) {
            var t = new Date() - time;
            if (t < 60) t = 60 - t;

            setTimeout(function () {
                sf._ajaxOption.async = async;

                sf.removeNodeCls(node, "mini-tree-loading");
                sf.removeNodes(node[sf.nodesField]);
                if (data && data.length > 0) {

                    sf.addNodes(data, node);
                    if (expand !== false) {
                        sf.expandNode(node, true);
                    } else {
                        sf.collapseNode(node, true);
                    }
                    sf.fire("loadnode", { node: node });
                } else {
                    delete node.isLeaf;
                    sf._doUpdateNodeTitle(node);
                }
            }, t);
        }, function (error) {

            sf.removeNodeCls(node, "mini-tree-loading");

        }
        );
        this.ajaxAsync = false;
    },
    _ajaxOption: {
        async: false,
        type: "get"
    },
    setAjaxOption: function (option) {
        mini.copyTo(this._ajaxOption, option);
    },
    getAjaxOption: function (option) {
        return this._ajaxOption;
    },


    _doLoad: function (params, node, success, fail) {
        if (!params) params = {};
        try {
            var url = eval(this.url);
            if (url != undefined) {
                this.url = url;
            }
        } catch (e) { }

        var isRoot = node == this.root;
        var e = {
            url: this.url,
            async: this._ajaxOption.async,
            type: this.ajaxType ? this.ajaxType : this._ajaxOption.type,
            params: params,
            data: params,
            cache: false,
            cancel: false,
            node: node,
            isRoot: isRoot
        };
        this.fire("beforeload", e);
        if (e.data != e.params && e.params != params) {
            e.data = e.params;
        }
        if (e.cancel == true) return;

        if (node != this.root) {

        }

        var sf = this;
        mini.copyTo(e, {
            success: function (text, code, jqXHR) {

                var data = null;
                try {
                    data = mini.decode(text);
                } catch (ex) {
                    data = []
                    if (mini_debugger == true) {
                        alert("tree json is error.");
                    }
                }
                if (sf.dataField) {
                    data = mini._getMap(sf.dataField, data);
                }
                if (!data) data = [];

                var ex = { result: data, data: data, cancel: false, node: node }

                if (sf.resultAsTree == false) {
                    ex.data = mini.arrayToTree(ex.data, sf.nodesField, sf.idField, sf.parentField)
                }

                sf.fire("preload", ex);
                if (ex.cancel == true) return;

                if (isRoot) {
                    sf.setData(ex.data);
                }

                if (success) success(ex.data);


                sf._doCheckLoadNodes();

                sf.fire("load", ex);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                var e = {
                    xmlHttp: jqXHR,
                    errorCode: textStatus
                };

                if (fail) fail(e);

                if (mini_debugger == true) {
                    alert("network error");
                }

                sf.fire("loaderror", e);
            }
        });
        this._ajaxer = mini.ajax(e);
    },

    getItemValue: function (item) {
        if (!item) return "";
        var t = mini._getMap(this.idField, item);
        return mini.isNull(t) ? '' : String(t);
    },
    getItemText: function (item) {
        if (!item) return "";
        var t = mini._getMap(this.textField, item);
        return mini.isNull(t) ? '' : String(t);
    },
    _OnDrawNode: function (node) {
        var showCheckBox = this.showCheckBox;
        if (showCheckBox && this.hasChildren(node)) {
            showCheckBox = this.showFolderCheckBox;
        }




        var nodeHtml = this.getItemText(node);
        var e = {
            isLeaf: this.isLeaf(node),
            node: node,
            nodeHtml: nodeHtml,
            nodeCls: '',
            nodeStyle: "",
            showCheckBox: showCheckBox,
            iconCls: this.getNodeIcon(node),
            img: node[this.imgField],
            showTreeIcon: this.showTreeIcon
        };
        if (this.autoEscape == true) {
            e.nodeHtml = mini.htmlEncode(e.nodeHtml);
        }

        this.fire("drawnode", e);
        if (e.nodeHtml === null || e.nodeHtml === undefined || e.nodeHtml === "") e.nodeHtml = "&nbsp;";
        return e;
    },
    _createNodeTitle: function (node, useEdit, sb) {
        var isReturn = !sb;
        if (!sb) sb = [];
        var text = node[this.textField];
        if (text === null || text === undefined) text = "";

        var isLeaf = this.isLeaf(node);
        var level = this.getLevel(node);

        var e = this._OnDrawNode(node);

        var cls = e.nodeCls;

        if (!isLeaf) {
            cls = this.isExpandedNode(node) ? this._expandNodeCls : this._collapseNodeCls;
        }

        if (this._selectedNode == node) {
            cls += " " + this._selectedNodeCls;
        }

        if (node.enabled === false) {
            cls += " mini-disabled";
        }
        if (!isLeaf) {
            cls += " mini-tree-parentNode";
        }





        var subNodes = this.getChildNodes(node);
        var hasChilds = subNodes && subNodes.length > 0;

        sb[sb.length] = '<div class="mini-tree-nodetitle ' + cls + '" style="' + e.nodeStyle + '">';



        var parentNode = this.getParentNode(node);
        var ii = 0;

        for (var i = ii; i <= level; i++) {
            if (i == level) continue;

            if (isLeaf) {
                if (this.showExpandButtons == false && i >= level - 1) {
                    continue;
                }
            }

            var indentStyle = "";
            if (this._isInViewLastNode(node, i)) {
                indentStyle = "background:none";
            }


            sb[sb.length] = '<span class="mini-tree-indent " style="' + indentStyle + '"></span>';
        }


        var ecCls = "";
        if (this._isViewFirstNode(node)) {
            ecCls = "mini-tree-node-ecicon-first";
        } else if (this._isViewLastNode(node)) {
            ecCls = "mini-tree-node-ecicon-last";
        }

        if (this._isViewFirstNode(node) && this._isViewLastNode(node)) {

            ecCls = "mini-tree-node-ecicon-last";
            if (parentNode == this.root) {
                ecCls = "mini-tree-node-ecicon-firstLast";
            }
        }

        if (!isLeaf) {
            sb[sb.length] = '<a class="' + this._eciconCls + ' ' + ecCls + '" style="' + (this.showExpandButtons ? "" : "display:none") + '" href="javascript:void(0);" onclick="return false;" hidefocus></a>';
        } else {
            sb[sb.length] = '<span class="' + this._eciconCls + ' ' + ecCls + '" ></span>';
        }


        sb[sb.length] = '<span class="mini-tree-nodeshow">';
        if (e.showTreeIcon) {
            if (e.img) {
                var img = this.imgPath + e.img;
                sb[sb.length] = '<span class="mini-tree-icon" style="background-image:url(' + img + ');"></span>';
            } else {
                sb[sb.length] = '<span class="' + e.iconCls + ' mini-tree-icon"></span>';
            }
        }

        if (e.showCheckBox) {
            var ckid = this._createCheckNodeId(node);
            var checked = this.isCheckedNode(node);

            sb[sb.length] = '<input type="checkbox" id="' + ckid + '" class="' + this._checkBoxCls + '" hidefocus ' + (checked ? "checked" : "") + ' ' + (node.enabled === false ? "disabled" : "") + '/>';
        }

        sb[sb.length] = '<span class="mini-tree-nodetext">';
        if (useEdit) {
            var editId = this.uid + "$edit$" + node._id;
            var text = node[this.textField];
            if (text === null || text === undefined) text = "";
            sb[sb.length] = '<input id="' + editId + '" type="text" class="mini-tree-editinput" value="' + text + '"/>';
        } else {
            sb[sb.length] = e.nodeHtml;
        }



        sb[sb.length] = '</span>';
        sb[sb.length] = '</span>';

        sb[sb.length] = '</div>';


        if (isReturn) return sb.join('');
    },
    _createNode: function (node, sb) {
        var isReturn = !sb;
        if (!sb) sb = [];
        if (!node) return "";
        var nodeId = this._createNodeId(node);
        var display = this.isVisibleNode(node) ? "" : "display:none";

        sb[sb.length] = '<div id="';
        sb[sb.length] = nodeId;
        sb[sb.length] = '" class="';
        sb[sb.length] = this._nodeCls;
        sb[sb.length] = '" style="';
        sb[sb.length] = display;
        sb[sb.length] = '">';

        this._createNodeTitle(node, false, sb);

        var nodes = this._getViewChildNodes(node);

        if (nodes) {
            if (this.removeOnCollapse && this.isExpandedNode(node)) {
                this._createNodes(nodes, node, sb);
            }
        }

        sb[sb.length] = '</div>';
        if (isReturn) return sb.join('');
    },
    _createNodes: function (nodes, pnode, sb) {
        var isReturn = !sb;
        if (!sb) sb = [];

        if (!nodes) return "";

        var nodesId = this._createNodesId(pnode);

        var display = this.isExpandedNode(pnode) ? "" : "display:none";

        sb[sb.length] = '<div id="';
        sb[sb.length] = nodesId;
        sb[sb.length] = '" class="';
        sb[sb.length] = this._nodesCls;
        sb[sb.length] = '" style="';
        sb[sb.length] = display;
        sb[sb.length] = '">';
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];

            this._createNode(node, sb);
        }
        sb[sb.length] = '</div>';

        if (isReturn) return sb.join('');
    },
    doUpdate: function () {
        if (!this._allowUpdate) return;


        var nodes = this._getViewChildNodes(this.root);
        var sb = [];
        this._createNodes(nodes, this.root, sb);
        var s = sb.join('');
        this._bodyEl.innerHTML = s;

        this._deferLayout();


    },
    _doLayoutHeader: function () {
    },

    _deferLayout: function () {
        var me = this;
        if (this._layoutTimer) return;
        this._layoutTimer = setTimeout(function () {
            me.doLayout();
            me._layoutTimer = null;
        }, 1);
    },
    doLayout: function () {
        if (this.showCheckBox) {
            mini.addClass(this.el, "mini-tree-showCheckBox");
        } else {
            mini.removeClass(this.el, "mini-tree-showCheckBox");
        }

        if (this.enableHotTrack) {
            mini.addClass(this.el, "mini-tree-hottrack");
        } else {
            mini.removeClass(this.el, "mini-tree-hottrack");
        }

        var rootNodesEl = this.el.firstChild;
        if (rootNodesEl) {
            mini.addClass(rootNodesEl, "mini-tree-rootnodes");
        }
    },

    filter: function (fn, scope) {

        scope = scope || this;
        var viewNodes = this._viewNodes = {}, nodesField = this.nodesField;
        function filter(node) {
            var nodes = node[nodesField];
            if (!nodes) return false;
            var id = node._id;
            var views = [];

            for (var i = 0, l = nodes.length; i < l; i++) {
                var r = nodes[i];
                var cadd = filter(r);
                var add = fn.call(scope, r, i, this);

                if (add === true || cadd) {
                    views.push(r);
                }
            }
            if (views.length > 0) viewNodes[id] = views;
            return views.length > 0;
        }

        filter(this.root);


        this.doUpdate();

    },
    clearFilter: function () {
        if (this._viewNodes) {
            this._viewNodes = null;
            this.doUpdate();
        }
    },

    setShowCheckBox: function (value) {
        if (this.showCheckBox != value) {
            this.showCheckBox = value;
            this.doUpdate();
        }
    },
    getShowCheckBox: function () {
        return this.showCheckBox;
    },
    setShowFolderCheckBox: function (value) {
        if (this.showFolderCheckBox != value) {
            this.showFolderCheckBox = value;
            this.doUpdate();
        }
    },
    getShowFolderCheckBox: function () {
        return this.showFolderCheckBox;
    },
    setAllowSelect: function (value) {
        if (this.allowSelect != value) {
            this.allowSelect = value;
            this.doUpdate();
        }
    },
    getAllowSelect: function () {
        return this.allowSelect;
    },
    setShowTreeIcon: function (value) {
        if (this.showTreeIcon != value) {
            this.showTreeIcon = value;
            this.doUpdate();
        }
    },
    getShowTreeIcon: function () {
        return this.showTreeIcon;
    },
    setShowExpandButtons: function (value) {
        if (this.showExpandButtons != value) {
            this.showExpandButtons = value;
            this.doUpdate();
        }
    },
    getShowExpandButtons: function () {
        return this.showExpandButtons;
    },
    setEnableHotTrack: function (value) {
        if (this.enableHotTrack != value) {
            this.enableHotTrack = value;
            this.doLayout();
        }
    },
    getEnableHotTrack: function () {
        return this.enableHotTrack;
    },
    setExpandOnLoad: function (value) {
        this.expandOnLoad = value;
    },
    getExpandOnLoad: function () {
        return this.expandOnLoad;
    },

    setCheckRecursive: function (value) {
        if (this.checkRecursive != value) {
            this.checkRecursive = value;
        }
    },
    getCheckRecursive: function () {
        return this.checkRecursive;
    },
    getNodeIcon: function (node) {
        var icon = mini._getMap(this.iconField, node);
        if (!icon) {
            if (this.isLeaf(node)) icon = this.leafIcon;
            else icon = this.folderIcon;
        }
        return icon;
    },

    isAncestor: function (parentNode, node) {
        if (parentNode == node) return true;
        if (!parentNode || !node) return false;
        var as = this.getAncestors(node);
        for (var i = 0, l = as.length; i < l; i++) {
            if (as[i] == parentNode) return true;
        }
        return false;
    },

    getAncestors: function (node) {
        var as = [];
        while (1) {
            var parentNode = this.getParentNode(node);
            if (!parentNode || parentNode == this.root) break;
            as[as.length] = parentNode;
            node = parentNode;
        }
        as.reverse();
        return as;
    },
    getRootNode: function () {
        return this.root;
    },
    getParentNode: function (node) {
        if (!node) return null;
        if (node._pid == this.root._id) return this.root;
        return this._idNodes[node._pid];

    },
    _isViewFirstNode: function (node) {
        if (this._viewNodes) {
            var pnode = this.getParentNode(node);
            var nodes = this._getViewChildNodes(pnode);
            return nodes[0] === node;
        } else {
            return this.isFirstNode(node);
        }
    },
    _isViewLastNode: function (node) {
        if (this._viewNodes) {
            var pnode = this.getParentNode(node);
            var nodes = this._getViewChildNodes(pnode);
            return nodes[nodes.length - 1] === node;
        } else {
            return this.isLastNode(node);
        }
    },
    _isInViewLastNode: function (node, level) {
        if (this._viewNodes) {
            var pnode = null;
            var ans = this.getAncestors(node);
            for (var i = 0, l = ans.length; i < l; i++) {
                var a = ans[i];
                if (this.getLevel(a) == level) {
                    pnode = a;
                }
            }
            if (!pnode || pnode == this.root) return false;
            return this._isViewLastNode(pnode);
        } else {
            return this.isInLastNode(node, level);
        }
    },

    _getViewChildNodes: function (node) {
        if (this._viewNodes) {
            return this._viewNodes[node._id];
        } else {
            return this.getChildNodes(node);
        }
    },
    getChildNodes: function (node) {
        node = this.getNode(node);
        if (!node) return null;
        return node[this.nodesField];
    },
    getAllChildNodes: function (node) {
        node = this.getNode(node);
        if (!node) return [];
        var nodes = [];
        this.cascadeChild(node, function (cnode) {
            nodes.push(cnode);
        }, this);
        return nodes;
    },
    indexOf: function (node) {
        node = this.getNode(node);
        if (!node) return -1;

        this.getList();
        var index = this._indexs[node[this.idField]];
        if (mini.isNull(index)) return -1;
        return index;
    },
    getAt: function (index) {
        var list = this.getList();
        return list[index];
    },
    indexOfChildren: function (node) {
        var parentNode = this.getParentNode(node);
        if (!parentNode) return -1;
        var childNodes = parentNode[this.nodesField];
        return childNodes.indexOf(node);
    },
    hasChildren: function (node) {
        var subNodes = this.getChildNodes(node);
        return !!(subNodes && subNodes.length > 0);
    },
    isLeaf: function (node) {
        if (!node || node.isLeaf === false || node.isLeaf === 0) return false;
        var nodes = this.getChildNodes(node);
        if (nodes && nodes.length > 0) return false;
        return true;
    },
    getLevel: function (node) {
        return node._level;
    },
    isExpandedNode: function (node) {
        node = this.getNode(node);
        if (!node) return false;
        return node.expanded == true || mini.isNull(node.expanded);
    },
    isCheckedNode: function (node) {
        node = this.getNode(node);
        if (!node) return false;
        return node.checked == true;
    },
    isVisibleNode: function (node) {
        if (node.visible == false) return false;
        var pnode = this.getParentNode(node);
        if (!pnode || pnode == this.root) return true;
        if (pnode.expanded === false) return false;
        return this.isVisibleNode(pnode);
    },

    isEnabledNode: function (node) {
        return node.enabled !== false || this.enabled;
    },
    isFirstNode: function (node) {
        var pnode = this.getParentNode(node);
        var nodes = this.getChildNodes(pnode);
        return nodes[0] === node;
    },
    isLastNode: function (node) {
        var pnode = this.getParentNode(node);
        var nodes = this.getChildNodes(pnode);
        return nodes[nodes.length - 1] === node;
    },
    isInLastNode: function (node, level) {
        var pnode = null;
        var ans = this.getAncestors(node);
        for (var i = 0, l = ans.length; i < l; i++) {
            var a = ans[i];
            if (this.getLevel(a) == level) {
                pnode = a;
            }
        }
        if (!pnode || pnode == this.root) return false;
        return this.isLastNode(pnode);
    },


    bubbleParent: function (node, fn, scope) {
        scope = scope || this;
        if (node) fn.call(this, node);
        var parentNode = this.getParentNode(node);
        if (parentNode && parentNode != this.root) {
            this.bubbleParent(parentNode, fn, scope);
        }
    },

    cascadeChild: function (node, fn, scope) {
        if (!fn) return;
        if (!node) node = this.root;
        var nodes = node[this.nodesField];
        if (nodes) {
            nodes = nodes.clone();
            for (var i = 0, l = nodes.length; i < l; i++) {
                var c = nodes[i];
                if (fn.call(scope || this, c, i, node) === false) return;
                this.cascadeChild(c, fn, scope);
            }
        }
    },

    eachChild: function (node, fn, scope) {
        if (!fn || !node) return;
        var nodes = node[this.nodesField];
        if (nodes) {
            var list = nodes.clone();
            for (var i = 0, l = list.length; i < l; i++) {
                var o = list[i];
                if (fn.call(scope || this, o, i, node) === false) break;
            }
        }
    },
    _updateParentAndLevel: function (node, parentNode) {
        if (!node._id) {
            node._id = mini.Tree.NodeUID++;
        }
        this._idNodes[node._id] = node;
        this.idNodes[node[this.idField]] = node;
        node._pid = parentNode ? parentNode._id : "";
        node._level = parentNode ? parentNode._level + 1 : -1;
        this.cascadeChild(node, function (n, i, p) {
            if (!n._id) {
                n._id = mini.Tree.NodeUID++;
            }
            this._idNodes[n._id] = n;
            this.idNodes[n[this.idField]] = n;
            n._pid = p._id;
            n._level = p._level + 1;
        }, this);

        this._clearTree();
    },

    _updateNodeElLevel: function (node) {
        var sf = this;
        function updateECIcon(node) {







            sf._doUpdateNodeTitle(node);
        }
        if (node != this.root) {
            updateECIcon(node);
        }
        this.cascadeChild(node, function (node) {
            updateECIcon(node);

        }, this);
    },

    removeNodes: function (nodes) {
        if (!mini.isArray(nodes)) return;
        nodes = nodes.clone();
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            this.removeNode(node);
        }
    },
    _doUpdateNodeTitle: function (node) {
        var s = this._createNodeTitle(node);
        var nodeEl = this._getNodeEl(node);
        if (nodeEl) {
            jQuery(nodeEl.firstChild).replaceWith(s);
        }
    },
    setNodeText: function (node, text) {
        node = this.getNode(node);
        if (!node) return;

        node[this.textField] = text;
        this._doUpdateNodeTitle(node);
        this._changed = true;
    },
    setNodeIconCls: function (node, iconCls) {
        node = this.getNode(node);
        if (!node) return;

        node[this.iconField] = iconCls;
        this._doUpdateNodeTitle(node);
        this._changed = true;
    },
    updateNode: function (node, obj) {
        node = this.getNode(node);
        if (!node || !obj) return;
        var cs = node[this.nodesField];
        mini.copyTo(node, obj);
        node[this.nodesField] = cs;
        this._doUpdateNodeTitle(node);
        this._changed = true;
    },
    removeNode: function (node) {
        node = this.getNode(node);
        if (!node) return;

        if (this._selectedNode == node) {
            this._selectedNode = null;
        }

        var nodes = [node];
        this.cascadeChild(node, function (n) {
            nodes.push(n);
        }, this);



        var parentNode = this.getParentNode(node);
        parentNode[this.nodesField].remove(node);
        this._updateParentAndLevel(node, parentNode);




        var nodeEl = this._getNodeEl(node);
        if (nodeEl) {
            nodeEl.parentNode.removeChild(nodeEl);
        }
        this._updateNodeElLevel(parentNode);


        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            delete node._id;
            delete node._pid;
            delete this._idNodes[node._id];
            delete this.idNodes[node[this.idField]];
        }

        this._changed = true;
    },
    addNodes: function (nodes, parentNode, action) {
        if (!mini.isArray(nodes)) return;
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            this.addNode(node, action, parentNode);
        }
    },




    addNode: function (node, index, parentNode) {
        node = this.getNode(node);
        if (!node) return;
        if (!parentNode) index = "add";
        var targetNode = parentNode;
        switch (index) {
            case "before":
                if (!targetNode) return;
                parentNode = this.getParentNode(targetNode);
                var childNodes = parentNode[this.nodesField];
                index = childNodes.indexOf(targetNode);
                break;
            case "after":
                if (!targetNode) return;
                parentNode = this.getParentNode(targetNode);
                var childNodes = parentNode[this.nodesField];
                index = childNodes.indexOf(targetNode) + 1;
                break;
            case "add":

                break;
            default:

                break;
        }
        parentNode = this.getNode(parentNode);
        if (!parentNode) parentNode = this.root;
        var nodes = parentNode[this.nodesField];
        if (!nodes) nodes = parentNode[this.nodesField] = [];


        index = parseInt(index);
        if (isNaN(index)) index = nodes.length;

        var targetNode = nodes[index];
        if (!targetNode) index = nodes.length;

        nodes.insert(index, node);
        this._updateParentAndLevel(node, parentNode);


        var nodesEl = this._getNodesEl(parentNode);
        if (nodesEl) {
            var s = this._createNode(node);
            var index = nodes.indexOf(node) + 1;
            var targetNode = nodes[index];
            if (targetNode) {
                var targetEl = this._getNodeEl(targetNode);
                jQuery(targetEl).before(s);
            } else {
                mini.append(nodesEl, s);
            }
        } else {
            var s = this._createNode(parentNode);
            var nodeEl = this._getNodeEl(parentNode);
            jQuery(nodeEl).replaceWith(s);
        }

        parentNode = this.getParentNode(node);
        this._updateNodeElLevel(parentNode);

        this._changed = true;
    },
    moveNodes: function (nodes, targetNode, action) {

        if (!nodes || nodes.length == 0 || !targetNode || !action) return;
        this.beginUpdate();
        var sf = this;
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            this.moveNode(node, targetNode, action);
            if (i != 0) {
                targetNode = node;
                action = "after";
            }

        }
        this.endUpdate();
    },
    moveNode: function (node, targetNode, action) {
        node = this.getNode(node);
        targetNode = this.getNode(targetNode);
        if (!node || !targetNode || !action) return false;

        if (this.isAncestor(node, targetNode)) return false;

        var index = -1;
        var parentNode = null;
        switch (action) {
            case "before":
                parentNode = this.getParentNode(targetNode);
                index = this.indexOfChildren(targetNode);
                break;
            case "after":
                parentNode = this.getParentNode(targetNode);
                index = this.indexOfChildren(targetNode) + 1;
                break;
            default:
                parentNode = targetNode;
                var childNodes = this.getChildNodes(parentNode);
                if (!childNodes) {
                    childNodes = parentNode[this.nodesField] = [];
                }
                index = childNodes.length;
                break;
        }


        var _node = {};

        var childNodes = this.getChildNodes(parentNode);
        childNodes.insert(index, _node);

        var _parentNode = this.getParentNode(node);
        var _childNodes = this.getChildNodes(_parentNode);
        _childNodes.remove(node);

        index = childNodes.indexOf(_node);
        childNodes[index] = node;

        this._updateParentAndLevel(node, parentNode);























        this.doUpdate();

        this._changed = true;

        return true;
    },

    isEditingNode: function (node) {
        return this._editingNode == node;
    },
    beginEdit: function (node) {
        node = this.getNode(node);
        if (!node) return;

        var nodeEl = this._getNodeEl(node);
        var s = this._createNodeTitle(node, true);
        var nodeEl = this._getNodeEl(node);
        if (nodeEl) {
            jQuery(nodeEl.firstChild).replaceWith(s);
        }
        this._editingNode = node;

        var editId = this.uid + "$edit$" + node._id;

        this._editInput = document.getElementById(editId);

        this._editInput.focus();
        mini.selectRange(this._editInput, 1000, 1000);
        mini.on(this._editInput, "keydown", this.__OnEditInputKeyDown, this);
        mini.on(this._editInput, "blur", this.__OnEditInputBlur, this);
    },
    cancelEdit: function () {
        if (this._editingNode) {
            this._doUpdateNodeTitle(this._editingNode);

            mini.un(this._editInput, "keydown", this.__OnEditInputKeyDown, this);
            mini.un(this._editInput, "blur", this.__OnEditInputBlur, this);
        }
        this._editingNode = null;
        this._editInput = null;

    },
    __OnEditInputKeyDown: function (e) {
        if (e.keyCode == 13) {
            var text = this._editInput.value;
            this.setNodeText(this._editingNode, text);
            this.cancelEdit();
            this.fire("endedit", { node: this._editingNode, text: text });
        } else if (e.keyCode == 27) {
            this.cancelEdit();
        }
    },
    __OnEditInputBlur: function (e) {
        var text = this._editInput.value;
        this.setNodeText(this._editingNode, text);
        this.cancelEdit();
        this.fire("endedit", { node: this._editingNode, text: text });
    },


    _getNodeByEvent: function (e) {

        if (mini.hasClass(e.target, this._nodesCls)) return null;
        var t = mini.findParent(e.target, this._nodeCls);
        if (t) {
            var ids = t.id.split("$");
            var id = ids[ids.length - 1];
            var node = this._idNodes[id];
            return node;
        }
        return null;
    },
    _createNodeId: function (node) {
        return this.uid + "$" + node._id;
    },
    _createNodesId: function (node) {
        return this.uid + "$nodes$" + node._id;
    },
    _createCheckNodeId: function (node) {
        return this.uid + "$check$" + node._id;
    },
    addNodeCls: function (node, cls) {
        var nodeEl = this._getNodeEl(node);
        if (nodeEl) mini.addClass(nodeEl, cls);
    },
    removeNodeCls: function (node, cls) {
        var nodeEl = this._getNodeEl(node);
        if (nodeEl) mini.removeClass(nodeEl, cls);
    },
    getNodeBox: function (node) {
        var el = this._getNodeEl(node);


        if (el) return mini.getBox(el.firstChild);
    },
    _getNodeEl: function (node) {
        if (!node) return null;
        var id = this._createNodeId(node);
        return document.getElementById(id);
    },
    _getNodeHoverEl: function (node) {
        if (!node) return null;
        var el = this._getNodeTitleEl(node);
        if (el) {
            el = mini.byClass(this._inNodeCls, el);
            return el;
        }
        return null;
    },
    _getNodeTitleEl: function (node) {
        var el = this._getNodeEl(node);
        if (el) return el.firstChild;
    },
    _getNodesEl: function (node) {
        if (!node) return null;
        if (this.isVisibleNode(node) == false) return null;
        var id = this._createNodesId(node);
        return mini.byId(id, this.el);
    },
    _getCheckBoxEl: function (node) {
        if (!node) return null;
        if (this.isVisibleNode(node) == false) return null;
        var id = this._createCheckNodeId(node);
        return mini.byId(id, this.el);
    },
    findNodes: function (fn, scope) {
        var nodes = [];
        scope = scope || this;
        this.cascadeChild(this.root, function (node) {
            if (fn && fn.call(scope, node) === true) {
                nodes.push(node);
            }
        }, this);
        return nodes;
    },
    getNode: function (node) {
        if (typeof node == "object") return node;
        return this.idNodes[node] || null;
    },
    hideNode: function (node) {
        node = this.getNode(node);
        if (!node) return;
        node.visible = false;
        var el = this._getNodeEl(node);
        el.style.display = "none";
    },
    showNode: function (node) {
        node = this.getNode(node);
        if (!node) return;
        node.visible = false;
        var el = this._getNodeEl(node);
        el.style.display = "";
    },
    enableNode: function (node) {
        node = this.getNode(node);
        if (!node) return;
        node.enabled = true;
        var el = this._getNodeEl(node);
        mini.removeClass(el, "mini-disabled");
        var ck = this._getCheckBoxEl(node);
        if (ck) ck.disabled = false;
    },
    disableNode: function (node) {
        node = this.getNode(node);
        if (!node) return;
        node.enabled = false;
        var el = this._getNodeEl(node);
        mini.addClass(el, "mini-disabled");
        var ck = this._getCheckBoxEl(node);
        if (ck) ck.disabled = true;
    },
    _allowExpandLayout: true,
    expandNode: function (node, allowAnim) {
        node = this.getNode(node);
        if (!node) return;
        var isExpand = this.isExpandedNode(node);
        if (isExpand) return;

        if (this.isLeaf(node)) return;

        node.expanded = true;

        var nodeEl = this._getNodeEl(node);
        if (this.removeOnCollapse && nodeEl) {
            var s = this._createNode(node);
            jQuery(nodeEl).before(s);
            jQuery(nodeEl).remove();
        }


        var el = this._getNodesEl(node);
        if (el) el.style.display = "";
        var el = this._getNodeEl(node);
        if (el) {
            var titleEl = el.firstChild;
            mini.removeClass(titleEl, this._collapseNodeCls);
            mini.addClass(titleEl, this._expandNodeCls);
        }
        this.fire("expand", { node: node });

        allowAnim = allowAnim && !(mini.isIE6);

        var nodes = this._getViewChildNodes(node);
        if (allowAnim && nodes && nodes.length > 0) {

            this._inAniming = true;
            var el = this._getNodesEl(node);
            if (!el) return;
            var h = mini.getHeight(el);
            el.style.height = "1px";
            if (this._doPositoin) {
                el.style.position = "relative";
            }
            var config = { height: h + "px" };

            var sf = this;
            var jq = jQuery(el);
            jq.animate(
                config,
                180,
                function () {

                    sf._inAniming = false;
                    sf._doLayoutHeader();
                    clearInterval(sf._animateTimer);


                    el.style.height = "auto";

                    if (sf._doPositoin) {
                        el.style.position = "static";
                    }

                    mini.repaint(nodeEl);
                }
            );
            clearInterval(this._animateTimer);
            this._animateTimer = setInterval(function () {
                sf._doLayoutHeader();
            }, 60);
        }
        this._doLayoutHeader();







        function doIndeterminate() {
            var nodes = this.getAllChildNodes(node);
            nodes.push(node);
            for (var i = 0, l = nodes.length; i < l; i++) {
                var node = nodes[i];
                if (node && node._indeterminate) {
                    var checkboxEl = this._getCheckBoxEl(node);
                    if (checkboxEl && node._indeterminate) {
                        checkboxEl.indeterminate = node._indeterminate;
                    }
                }
            }
        }
        var me = this;

        doIndeterminate.call(me);


    },
    collapseNode: function (node, allowAnim) {

        node = this.getNode(node);
        if (!node) return;

        var isExpand = this.isExpandedNode(node);
        if (!isExpand) return;

        if (this.isLeaf(node)) return;

        node.expanded = false;
        var nodeEl = this._getNodeEl(node);

        var el = this._getNodesEl(node);
        if (el) el.style.display = "none";
        var el = this._getNodeEl(node);
        if (el) {
            var titleEl = el.firstChild;
            mini.removeClass(titleEl, this._expandNodeCls)
            mini.addClass(titleEl, this._collapseNodeCls);
        }
        this.fire("collapse", { node: node });

        allowAnim = allowAnim && !(mini.isIE6);
        var nodes = this._getViewChildNodes(node);
        if (allowAnim && nodes && nodes.length > 0) {
            this._inAniming = true;
            var el = this._getNodesEl(node);
            if (!el) return;
            el.style.display = "";
            el.style.height = "auto";
            if (this._doPositoin) {
                el.style.position = "relative";
            }

            var h = mini.getHeight(el);
            var config = { height: "1px" };

            var sf = this;
            var jq = jQuery(el);
            jq.animate(
                config,
                180,
                function () {
                    el.style.display = "none";
                    el.style.height = "auto";
                    if (sf._doPositoin) {
                        el.style.position = "static";
                    }
                    sf._inAniming = false;
                    sf._doLayoutHeader();
                    clearInterval(sf._animateTimer);


                    var nodesEl = sf._getNodesEl(node);
                    if (sf.removeOnCollapse && nodesEl) {
                        jQuery(nodesEl).remove();
                    }

                    mini.repaint(nodeEl);
                }
            );
            clearInterval(this._animateTimer);
            this._animateTimer = setInterval(function () {
                sf._doLayoutHeader();
            }, 60);
        } else {

            var nodesEl = this._getNodesEl(node);
            if (this.removeOnCollapse && nodesEl) {
                jQuery(nodesEl).remove();
            }
        }

        this._doLayoutHeader();

        if (this._allowExpandLayout) {
            mini.repaint(this.el);
        }
    },
    toggleNode: function (node, allowAnim) {
        if (this.isExpandedNode(node)) {
            this.collapseNode(node, allowAnim);
        } else {
            this.expandNode(node, allowAnim);
        }
    },
    expandLevel: function (level) {
        this.cascadeChild(this.root, function (node) {
            if (this.getLevel(node) == level) {
                if (node[this.nodesField] != null) {
                    this.expandNode(node);
                }
            }
        }, this);
    },
    collapseLevel: function (level) {
        this.cascadeChild(this.root, function (node) {
            if (this.getLevel(node) == level) {
                if (node[this.nodesField] != null) {
                    this.collapseNode(node);
                }
            }
        }, this);
    },
    expandAll: function () {
        this.cascadeChild(this.root, function (node) {
            if (node[this.nodesField] != null) {
                this.expandNode(node);
            }
        }, this);
    },
    collapseAll: function () {
        this.cascadeChild(this.root, function (node) {
            if (node[this.nodesField] != null) {
                this.collapseNode(node);
            }
        }, this);
    },
    expandPath: function (node) {
        node = this.getNode(node);
        if (!node) return;
        var ans = this.getAncestors(node);
        for (var i = 0, l = ans.length; i < l; i++) {
            this.expandNode(ans[i]);
        }
    },
    collapsePath: function (node) {
        node = this.getNode(node);
        if (!node) return;
        var ans = this.getAncestors(node);
        for (var i = 0, l = ans.length; i < l; i++) {
            this.collapseNode(ans[i]);
        }
    },
    selectNode: function (node) {
        node = this.getNode(node);
        var el = this._getNodeEl(this._selectedNode);
        if (el) {
            mini.removeClass(el.firstChild, this._selectedNodeCls);
        }
        this._selectedNode = node;
        var el = this._getNodeEl(this._selectedNode);
        if (el) {
            mini.addClass(el.firstChild, this._selectedNodeCls);
        }

        var ev = { node: node, isLeaf: this.isLeaf(node) };
        this.fire("nodeselect", ev);
    },
    getSelectedNode: function () {
        return this._selectedNode;
    },
    getSelectedNodes: function () {
        var nodes = [];
        if (this._selectedNode) nodes.push(this._selectedNode);
        return nodes;
    },

    doUpdateCheckedState: function () {

    },

    autoCheckParent: false,
    setAutoCheckParent: function (value) {
        this.autoCheckParent = value;
    },
    getAutoCheckParent: function (value) {
        return this.autoCheckParent;
    },

    hasCheckedChildNode: function (pnode) {
        var checked = false;
        var nodes = this.getAllChildNodes(pnode);
        for (var i = 0, l = nodes.length; i < l; i++) {
            var n = nodes[i];
            if (this.isCheckedNode(n)) {
                checked = true;
                break;
            }
        }
        return checked;
    },























    _doCheckLoadNodes: function () {

        var nodes = this.getList();
        var checkNodes = [];
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            if (node.checked) {
                checkNodes.push(node);
            }
        }

        for (var i = 0, l = checkNodes.length; i < l; i++) {
            var node = checkNodes[i];
            this._doCheckNode(node, true, this.checkRecursive);
        }
    },



    _doCheckNode: function (node, checked, checkRecursive) {
        var checkNode = node;
        var ckNodes = [];

        node.checked = checked;
        node._indeterminate = false;
        ckNodes.push(node);

        if (checkRecursive) {

            this.cascadeChild(node, function (cnode) {
                cnode.checked = checked;
                cnode._indeterminate = false;
                ckNodes.push(cnode);
            }, this);


            var ans = this.getAncestors(node);
            ans.reverse();
            for (var i = 0, l = ans.length; i < l; i++) {
                var pnode = ans[i];
                var childNodes = this.getChildNodes(pnode);
                var checkAll = true, hasCheck = false;
                for (var ii = 0, ll = childNodes.length; ii < ll; ii++) {
                    var cnode = childNodes[ii];
                    if (this.isCheckedNode(cnode)) {
                        hasCheck = true;
                    } else {
                        checkAll = false;
                    }
                }
                if (checkAll) {
                    pnode.checked = true;
                    pnode._indeterminate = false;
                }
                else {
                    pnode.checked = false;
                    pnode._indeterminate = hasCheck;
                }
                ckNodes.push(pnode);
            }
        }

        for (var i = 0, l = ckNodes.length; i < l; i++) {
            var node = ckNodes[i];
            var checkEl = this._getCheckBoxEl(node);
            if (checkEl) {
                if (node.checked) {
                    checkEl.indeterminate = false;
                    checkEl.checked = true;
                } else {
                    checkEl.indeterminate = node._indeterminate;
                    checkEl.checked = false;
                }
            }
        }


        if (this.autoCheckParent) {
            var ans = this.getAncestors(checkNode);

            for (var i = 0, l = ans.length; i < l; i++) {
                var pnode = ans[i];
                var hasCheck = this.hasCheckedChildNode(pnode);
                if (hasCheck) {
                    pnode.checked = true;
                    pnode._indeterminate = false;

                    var checkEl = this._getCheckBoxEl(pnode);
                    if (checkEl) {
                        checkEl.indeterminate = false;
                        checkEl.checked = true;
                    }
                }
            }
        }
    },
    checkNode: function (node) {
        node = this.getNode(node);
        if (!node) return;
        this._doCheckNode(node, true, this.checkRecursive);
    },
    uncheckNode: function (node) {
        node = this.getNode(node);
        if (!node) return;
        this._doCheckNode(node, false, this.checkRecursive);
    },
    checkNodes: function (nodes) {
        if (!mini.isArray(nodes)) nodes = [];
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            this.checkNode(node);
        }
    },
    uncheckNodes: function (nodes) {
        if (!mini.isArray(nodes)) nodes = [];
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            this.uncheckNode(node);
        }
    },
    checkAllNodes: function () {
        this.cascadeChild(this.root, function (node) {

            this._doCheckNode(node, true, false);
        }, this);
    },
    uncheckAllNodes: function (nodes) {
        this.cascadeChild(this.root, function (node) {

            this._doCheckNode(node, false, false);
        }, this);
    },
    getCheckedNodes: function (haveParent) {
        var nodes = [];
        var maps = {};
        this.cascadeChild(this.root, function (node) {
            if (node.checked == true) {

                if (!maps[node._id]) {
                    if (haveParent === false && this.isLeaf(node) == false) {
                    } else {
                        maps[node._id] = node;
                        nodes.push(node);
                    }
                }
                if (haveParent) {
                    var ans = this.getAncestors(node);
                    for (var i = 0, l = ans.length; i < l; i++) {
                        var anode = ans[i];
                        if (!maps[anode._id]) {
                            maps[anode._id] = anode;
                            nodes.push(anode);
                        }
                    }
                }
            }
        }, this);
        return nodes;
    },
    setValue: function (value) {
        if (mini.isNull(value)) value = "";
        value = String(value);


        var nodes = this.getCheckedNodes();
        this.uncheckNodes(nodes);

        this.value = value;

        if (this.showCheckBox) {
            var ids = String(value).split(",");
            for (var i = 0, l = ids.length; i < l; i++) {
                this.checkNode(ids[i]);
            }
        } else {
            this.selectNode(value);
        }

    },
    getNodesByValue: function (value) {
        if (mini.isNull(value)) value = "";
        value = String(value);
        var nodes = [];
        var ids = String(value).split(",");
        for (var i = 0, l = ids.length; i < l; i++) {
            var node = this.getNode(ids[i]);
            if (node) nodes.push(node);
        }
        return nodes;
    },
    getValueAndText: function (records) {
        if (mini.isNull(records)) records = [];
        if (!mini.isArray(records)) {
            records = this.getNodesByValue(records);
        }
        var values = [];
        var texts = [];
        for (var i = 0, l = records.length; i < l; i++) {
            var record = records[i];
            if (record) {
                values.push(this.getItemValue(record));
                texts.push(this.getItemText(record));
            }
        }
        return [values.join(this.delimiter), texts.join(this.delimiter)];
    },
    getValue: function (haveParent) {
        var nodes = this.getCheckedNodes(haveParent);
        var sb = [];
        for (var i = 0, l = nodes.length; i < l; i++) {
            var id = this.getItemValue(nodes[i]);
            if (id) sb.push(id);
        }
        return sb.join(',');
    },
    setResultAsTree: function (value) {
        this.resultAsTree = value;
    },
    getResultAsTree: function () {
        return this.resultAsTree;
    },
    setParentField: function (value) {
        this.parentField = value;
    },
    getParentField: function () {
        return this.parentField;
    },
    setIdField: function (value) {
        this.idField = value;
    },
    getIdField: function () {
        return this.idField;
    },
    setTextField: function (value) {
        this.textField = value;
    },
    getTextField: function () {
        return this.textField;
    },
    setShowTreeLines: function (value) {
        this.showTreeLines = value;
        if (value == true) {
            mini.addClass(this.el, 'mini-tree-treeLine');
        } else {
            mini.removeClass(this.el, 'mini-tree-treeLine');
        }
    },
    getShowTreeLines: function () {
        return this.showTreeLines;
    },
    setShowArrow: function (value) {
        this.showArrow = value;
        if (value == true) {
            mini.addClass(this.el, 'mini-tree-showArrows');
        } else {
            mini.removeClass(this.el, 'mini-tree-showArrows');
        }
    },
    getShowArrow: function () {
        return this.showArrow;
    },

    setCheckedField: function (value) {
        this.checkedField = value;
    },
    getCheckedField: function () {
        return this.checkedField;
    },
    setIconField: function (value) {
        this.iconField = value;
    },
    getIconField: function () {
        return this.iconField;
    },
    setNodesField: function (value) {
        this.nodesField = value;
    },
    getNodesField: function () {
        return this.nodesField;
    },
    setTreeColumn: function (value) {
        this.treeColumn = value;
    },
    getTreeColumn: function () {
        return this.treeColumn;
    },
    setLeafIcon: function (value) {
        this.leafIcon = value;
    },
    getLeafIcon: function () {
        return this.leafIcon;
    },
    setFolderIcon: function (value) {
        this.folderIcon = value;
    },
    getFolderIcon: function () {
        return this.folderIcon;
    },
    setExpandOnDblClick: function (value) {
        this.expandOnDblClick = value;
    },
    getExpandOnDblClick: function () {
        return this.expandOnDblClick;
    },
    setExpandOnNodeClick: function (value) {
        this.expandOnNodeClick = value;
        if (value) {
            mini.addClass(this.el, "mini-tree-nodeclick");
        } else {
            mini.removeClass(this.el, "mini-tree-nodeclick");
        }
    },
    getExpandOnNodeClick: function () {
        return this.expandOnNodeClick;
    },

    setRemoveOnCollapse: function (value) {
        this.removeOnCollapse = value;
    },
    getRemoveOnCollapse: function () {
        return this.removeOnCollapse;
    },
    setLoadOnExpand: function (value) {
        this.loadOnExpand = value;
    },
    getLoadOnExpand: function () {
        return this.loadOnExpand;
    },
    setAutoEscape: function (value) {
        this.autoEscape = value;
    },
    getAutoEscape: function () {
        return this.autoEscape;
    },


    __OnDblClick: function (e) {
        if (!this.enabled) return;
        if (mini.findParent(e.target, this._checkBoxCls)) return;

        var node = this._getNodeByEvent(e);
        if (node && node.enabled !== false) {
            if (mini.findParent(e.target, this._inNodeCls)) {
                var expanded = this.isExpandedNode(node);

                var ev = {
                    node: node,
                    expanded: expanded,
                    cancel: false
                };

                if (this.expandOnDblClick && !this._inAniming) {
                    if (expanded) {
                        this.fire("beforecollapse", ev);
                        if (ev.cancel == true) return;
                        this.collapseNode(node, this.allowAnim);
                    } else {
                        this.fire("beforeexpand", ev);
                        if (ev.cancel == true) return;
                        this.expandNode(node, this.allowAnim);

                    }
                }

                this.fire("nodedblclick", { htmlEvent: e, node: node, isLeaf: this.isLeaf(node) });
            }
        }
    },
    __OnClick: function (e) {

        if (!this.enabled) return;
        var node = this._getNodeByEvent(e);
        if (node && node.enabled !== false) {

            var allow = mini.findParent(e.target, this._inNodeCls) && this.expandOnNodeClick;
            if (mini.findParent(e.target, this._checkBoxCls)) allow = false;
            if ((mini.findParent(e.target, this._eciconCls) || allow)
                    && this.isLeaf(node) == false
                ) {

                if (this._inAniming) return;
                var expanded = this.isExpandedNode(node);
                var ev = {
                    node: node,
                    expanded: expanded,
                    cancel: false
                };

                if (!this._inAniming) {
                    if (expanded) {
                        this.fire("beforecollapse", ev);
                        if (ev.cancel == true) return;
                        this.collapseNode(node, this.allowAnim);
                    } else {
                        this.fire("beforeexpand", ev);
                        if (ev.cancel == true) return;
                        this.expandNode(node, this.allowAnim);

                    }
                }
            } else if (mini.findParent(e.target, this._checkBoxCls)) {
                var checked = this.isCheckedNode(node);
                var ev = {
                    isLeaf: this.isLeaf(node),
                    node: node,
                    checked: checked,
                    checkRecursive: this.checkRecursive,
                    htmlEvent: e,
                    cancel: false
                };

                this.fire("beforenodecheck", ev);
                if (ev.cancel == true) {
                    e.preventDefault();
                    return;
                }
                if (checked) {
                    this.uncheckNode(node);
                } else {
                    this.checkNode(node);
                }
                this.fire("nodecheck", ev);

            } else {
                this._OnNodeClick(node, e);
            }


        }

    },
    __OnMouseDown: function (e) {
        if (!this.enabled) return;
        if (this._editInput) this._editInput.blur();

        var node = this._getNodeByEvent(e);
        if (node) {
            if (mini.findParent(e.target, this._eciconCls)) {

            } else if (mini.findParent(e.target, this._checkBoxCls)) {

            } else {

                this._OnNodeMouseDown(node, e);

            }


        }
    },
    _OnNodeMouseDown: function (node, htmlEvent) {

        var show = mini.findParent(htmlEvent.target, this._inNodeCls);
        if (!show) return null;
        if (!this.isEnabledNode(node)) return;

        var ev = { node: node, cancel: false, isLeaf: this.isLeaf(node), htmlEvent: htmlEvent };

        if (this.allowSelect && node.allowSelect !== false) {
            if (this._selectedNode != node) {
                this.fire("beforenodeselect", ev);
                if (ev.cancel != true) {
                    this.selectNode(node);
                }
            }
        }

        this.fire("nodeMouseDown", ev);
    },
    _OnNodeClick: function (node, htmlEvent) {
        var show = mini.findParent(htmlEvent.target, this._inNodeCls);
        if (!show) return null;
        if (htmlEvent.target.tagName.toLowerCase() == "a") {

            htmlEvent.target.hideFocus = true;
        }
        if (!this.isEnabledNode(node)) return;

        var ev = { node: node, cancel: false, isLeaf: this.isLeaf(node), htmlEvent: htmlEvent };

        if (this._getColumnByEvent) {
            var column = this._getColumnByEvent(htmlEvent);
            if (column) {
                ev.column = column;
                ev.field = column.field;
            }
        }

        this.fire("nodeClick", ev);
    },

    __OnMouseMove: function (e) {
        var node = this._getNodeByEvent(e);
        if (node) {
            this._OnNodeMouseMove(node, e);
        }
    },
    __OnMouseOut: function (e) {
        var node = this._getNodeByEvent(e);
        if (node) {
            this._OnNodeMouseOut(node, e);
        }
    },

    _OnNodeMouseOut: function (node, e) {
        if (!this.isEnabledNode(node)) return;
        if (!mini.findParent(e.target, this._inNodeCls)) return;

        this.blurNode();

        var e = {
            node: node,
            htmlEvent: e
        };
        this.fire("nodemouseout", e);
    },
    _OnNodeMouseMove: function (node, e) {
        if (!this.isEnabledNode(node)) return;
        if (!mini.findParent(e.target, this._inNodeCls)) return;
        if (this.enableHotTrack == true) {
            this.focusNode(node);
        }
        var e = {
            node: node,
            htmlEvent: e
        };
        this.fire("nodemousemove", e);
    },
    focusNode: function (node, view) {
        node = this.getNode(node);
        if (!node) return;
        function doFocus() {
            var dom = this._getNodeHoverEl(node);
            if (view && dom) {
                this.scrollIntoView(node);
            }
            if (this._focusedNode == node) return;
            this.blurNode();
            this._focusedNode = node;

            mini.addClass(dom, this._nodeHoverCls);
        }
        var me = this;
        setTimeout(function () {
            doFocus.call(me);
        }, 1);
    },
    blurNode: function () {
        if (!this._focusedNode) return;

        var dom = this._getNodeHoverEl(this._focusedNode);
        if (dom) {
            mini.removeClass(dom, this._nodeHoverCls);
        }
        this._focusedNode = null;
    },
    scrollIntoView: function (node) {
        node = this.getNode(node);
        if (!node) return;
        this.expandPath(node);
        var itemEl = this._getNodeEl(node);
        mini.scrollIntoView(itemEl, this.el, false);
    },

    __OnHtmlContextMenu: function (e) {
        if (mini.isAncestor(this._headerEl, e.target)) {
            return true;
        }
        return mini.Tree.superclass.__OnHtmlContextMenu.call(this, e);
    },

    onNodeClick: function (fn, scope) {
        this.on("nodeClick", fn, scope);
    },
    onBeforeNodeSelect: function (fn, scope) {
        this.on("beforenodeselect", fn, scope);
    },
    onNodeSelect: function (fn, scope) {
        this.on("nodeselect", fn, scope);
    },
    onBeforeNodeCheck: function (fn, scope) {
        this.on("beforenodecheck", fn, scope);
    },
    onCheckNode: function (fn, scope) {
        this.on("nodecheck", fn, scope);
    },
    onNodeMouseDown: function (fn, scope) {
        this.on("nodemousedown", fn, scope);
    },
    onBeforeExpand: function (fn, scope) {
        this.on("beforeexpand", fn, scope);
    },
    onExpand: function (fn, scope) {
        this.on("expand", fn, scope);
    },
    onBeforeCollapse: function (fn, scope) {
        this.on("beforecollapse", fn, scope);
    },
    onCollapse: function (fn, scope) {
        this.on("collapse", fn, scope);
    },
    onBeforeLoad: function (fn, scope) {
        this.on("beforeload", fn, scope);
    },
    onLoad: function (fn, scope) {
        this.on("load", fn, scope);
    },
    onLoadError: function (fn, scope) {
        this.on("loaderror", fn, scope);
    },
    onDataLoad: function (fn, scope) {
        this.on("dataload", fn, scope);
    },

    _getDragData: function () {
        return this.getSelectedNodes().clone();
    },
    _getDragText: function (dragNodes) {
        return "Nodes " + dragNodes.length;
    },

    allowDrag: false,
    allowDrop: false,
    dragGroupName: "",
    dropGroupName: "",
    allowLeafDropIn: false,
    setAllowLeafDropIn: function (value) {
        this.allowLeafDropIn = value;
    },
    getAllowLeafDropIn: function () {
        return this.allowLeafDropIn;
    },
    setAllowDrag: function (value) {
        this.allowDrag = value;
    },
    getAllowDrag: function () {
        return this.allowDrag;
    },
    setAllowDrop: function (value) {
        this.allowDrop = value;
    },
    getAllowDrop: function () {
        return this.allowDrop;
    },
    setDragGroupName: function (value) {
        this.dragGroupName = value;
    },
    getDragGroupName: function () {
        return this.dragGroupName;
    },
    setDropGroupName: function (value) {
        this.dropGroupName = value;
    },
    getDropGroupName: function () {
        return this.dropGroupName;
    },
    isAllowDrag: function (node) {
        if (!this.allowDrag) return false;
        if (node.allowDrag === false) return false;
        return true;


    },
    _OnDragStart: function (node) {
        var e = {
            node: node,
            nodes: this._getDragData(),
            dragText: this._getDragText(this._getDragData()),
            cancel: false
        };
        this.fire("DragStart", e);
        return e;
    },
    _OnDragDrop: function (dragNodes, dropNode, dragAction) {
        dragNodes = dragNodes.clone();
        var e = {
            dragNodes: dragNodes,
            targetNode: dropNode,
            action: dragAction,
            cancel: false
        };

        e.dragNode = e.dragNodes[0];
        e.dropNode = e.targetNode;
        e.dragAction = e.action;

        this.fire("beforedrop", e);
        this.fire("DragDrop", e);
        return e;
    },
    _OnGiveFeedback: function (effect, dragNodes, dropNode, from) {
        var e = {};
        e.from = from;
        e.effect = effect;
        e.nodes = dragNodes;
        e.targetNode = dropNode;

        e.node = e.nodes[0];


        e.dragNodes = dragNodes;
        e.dragNode = e.dragNodes[0];
        e.dropNode = e.targetNode;
        e.dragAction = e.action;

        this.fire("givefeedback", e);
        return e;
    },

    imgPath: '',
    setImgPath: function (value) {
        this.imgPath = value;
    },
    getImgPath: function () {
        return this.imgPath;
    },
    imgField: 'img',
    setImgField: function (value) {
        this.imgField = value;
    },
    getImgField: function () {
        return this.imgField;
    },

    getAttrs: function (el) {
        var attrs = mini.Tree.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["value", "url", "idField", "textField", "iconField", "nodesField", "parentField", "valueField", "checkedField",
            "leafIcon", "folderIcon",
            "ondrawnode", "onbeforenodeselect", "onnodeselect", "onnodemousedown", "onnodeclick", "onnodedblclick",
            "onbeforeload", "onpreload", "onload", "onloaderror", "ondataload",
                "onbeforenodecheck", "onnodecheck",
                "onbeforeexpand", "onexpand",
                "onbeforecollapse", "oncollapse",
                "dragGroupName", "dropGroupName", "onendedit",
                "expandOnLoad", "ajaxOption", "ondragstart", "onbeforedrop", "ondrop", "ongivefeedback",
                "ajaxType", "imgPath", "imgField"
             ]
        );

        mini._ParseBool(el, attrs,
            ["allowSelect", "showCheckBox", "showExpandButtons", "showTreeIcon", "showTreeLines", "checkRecursive",
                "enableHotTrack", "showFolderCheckBox", "resultAsTree",
                "allowLeafDropIn", "allowDrag", "allowDrop", "showArrow", "expandOnDblClick", "removeOnCollapse",
                "autoCheckParent", "loadOnExpand", "expandOnNodeClick", "autoEscape",
                "autoLoad"
             ]
        );
        if (attrs.ajaxOption) {
            attrs.ajaxOption = mini.decode(attrs.ajaxOption);
        }

        if (attrs.expandOnLoad) {

            var level = parseInt(attrs.expandOnLoad);
            if (mini.isNumber(level)) {
                attrs.expandOnLoad = level;
            } else {
                attrs.expandOnLoad = attrs.expandOnLoad == "true" ? true : false;
            }
        }

        var idField = attrs.idField || this.idField;
        var textField = attrs.textField || this.textField;
        var iconField = attrs.iconField || this.iconField;
        var nodesField = attrs.nodesField || this.nodesField;

        function parseNodes(nodes) {
            var data = [];

            for (var i = 0, l = nodes.length; i < l; i++) {
                var node = nodes[i];
                var cnodes = mini.getChildNodes(node);
                var nodeTitle = cnodes[0];
                var nodeChild = cnodes[1];

                if (!nodeTitle || !nodeChild) nodeTitle = node;
                var jqTitle = jQuery(nodeTitle);
                var o = {};
                var id = o[idField] = nodeTitle.getAttribute("value");

                o[iconField] = jqTitle.attr("iconCls");
                o[textField] = nodeTitle.innerHTML;
                data.add(o);



                var expanded = jqTitle.attr("expanded");
                if (expanded) {
                    o.expanded = expanded == "false" ? false : true;
                }

                var allowSelect = jqTitle.attr("allowSelect");
                if (allowSelect) {
                    o.allowSelect = allowSelect == "false" ? false : true;
                }



                if (!nodeChild) continue;
                var cs = mini.getChildNodes(nodeChild);
                var cdata = parseNodes(cs);
                if (cdata.length > 0) {
                    o[nodesField] = cdata;
                }
            }
            return data;
        }

        var data = parseNodes(mini.getChildNodes(el));
        if (data.length > 0) {
            attrs.data = data;
        }

        if (!attrs.idField && attrs.valueField) {
            attrs.idField = attrs.valueField;
        }

        return attrs;
    }

});
mini.regClass(mini.Tree, "tree");



mini._TreeDragDrop = function (tree) {
    this.owner = tree;
    this.owner.on('NodeMouseDown', this.__OnTreeNodeMouseDown, this);
}
mini._TreeDragDrop.prototype = {
    __OnTreeNodeMouseDown: function (e) {
        var node = e.node;
        if (e.htmlEvent.button == mini.MouseButton.Right) return;


        var tree = this.owner;
        if (tree.isReadOnly() || tree.isAllowDrag(e.node) == false) return;

        if (tree.isEditingNode(node)) return;

        var ex = tree._OnDragStart(node);
        if (ex.cancel) return;
        this.dragText = ex.dragText;

        this.dragData = tree._getDragData();

        if (this.dragData.indexOf(node) == -1) {
            this.dragData.push(node);
        }
        var drag = this._getDrag();
        drag.start(e.htmlEvent);
    },
    _OnDragStart: function (drag) {
        var tree = this.owner;

        this.feedbackEl = mini.append(document.body, '<div class="mini-feedback"></div>');
        this.feedbackEl.innerHTML = this.dragText;
        this.lastFeedbackClass = "";

        this.enableHotTrack = tree.enableHotTrack;
        tree.setEnableHotTrack(false);
    },
    _getDropTree: function (event) {
        var dom = mini.findParent(event.target, "mini-tree", 500);
        if (dom) {
            return mini.get(dom);
        }
    },
    _OnDragMove: function (drag) {

        var tree = this.owner;
        var dropTree = this._getDropTree(drag.event);

        var x = drag.now[0], y = drag.now[1];
        mini.setXY(this.feedbackEl, x + 15, y + 18);

        this.dragAction = "no";

        if (dropTree) {
            var targetNode = dropTree._getNodeByEvent(drag.event);
            this.dropNode = targetNode;

            if (targetNode && dropTree.allowDrop == true) {


                if (!dropTree.isLeaf(targetNode)) {

                    var nodes = targetNode[dropTree.nodesField];
                    if (nodes && nodes.length > 0) {

                    } else {
                        if (tree.loadOnExpand && targetNode.asyncLoad !== false) {
                            dropTree.loadNode(targetNode);
                        } else {

                        }
                    }
                }

                this.dragAction = this.getFeedback(targetNode, y, 3, dropTree, tree);



            } else {
                this.dragAction = "no";
            }
            if (tree && dropTree && tree != dropTree && !targetNode && dropTree.getChildNodes(dropTree.root).length == 0) {
                targetNode = dropTree.getRootNode();
                this.dragAction = "add";
                this.dropNode = targetNode;
            }
        }

        this.lastFeedbackClass = "mini-feedback-" + this.dragAction;
        this.feedbackEl.className = "mini-feedback " + this.lastFeedbackClass;

        if (this.dragAction == "no") targetNode = null;
        this.setRowFeedback(targetNode, this.dragAction, dropTree);

    },
    _OnDragStop: function (drag) {

        var tree = this.owner;
        var dropTree = this._getDropTree(drag.event);

        mini.removeNode(this.feedbackEl);

        this.feedbackEl = null;
        this.setRowFeedback(null);


        var dragNodes = [];
        for (var i = 0, l = this.dragData.length; i < l; i++) {
            var dragNode = this.dragData[i];

            var hasParent = false;
            for (var j = 0, k = this.dragData.length; j < k; j++) {
                var dr = this.dragData[j];
                if (dr != dragNode) {
                    hasParent = tree.isAncestor(dr, dragNode);
                    if (hasParent) break;
                }
            }

            if (!hasParent) {
                dragNodes.push(dragNode);
            }
        }
        this.dragData = dragNodes;

        if (this.dropNode && dropTree && this.dragAction != "no") {
            var e = tree._OnDragDrop(this.dragData, this.dropNode, this.dragAction);

            if (!e.cancel) {
                var dragNodes = e.dragNodes, targetNode = e.targetNode, action = e.action;

                if (tree == dropTree) {
                    tree.moveNodes(dragNodes, targetNode, action);
                } else {

                    tree.removeNodes(dragNodes);
                    dropTree.addNodes(dragNodes, targetNode, action);
                }
            }
        }


        tree.setEnableHotTrack(this.enableHotTrack);

        var e = {
            dragNode: this.dragData[0],
            dropNode: this.dropNode,
            dragAction: this.dragAction
        };
        tree.fire("drop", e);

        this.dropNode = null;
        this.dragData = null;
    },
    setRowFeedback: function (node, feedback, tree) {




        if (this.lastAddDomNode) {
            mini.removeClass(this.lastAddDomNode, "mini-tree-feedback-add");
        }
        if (node == null || this.dragAction == "add") {
            mini.removeNode(this.feedbackLine);
            this.feedbackLine = null;
        }

        this.lastRowFeedback = node;

        if (node != null) {
            if (feedback == "before" || feedback == "after") {

                if (!this.feedbackLine) {
                    this.feedbackLine = mini.append(document.body, "<div class='mini-feedback-line'></div>");
                }
                this.feedbackLine.style.display = "block";
                var rowBox = tree.getNodeBox(node);
                var x = rowBox.x, y = rowBox.y - 1;
                if (feedback == "after") {
                    y += rowBox.height;
                }
                mini.setXY(this.feedbackLine, x, y);

                var box = tree.getBox(true);
                mini.setWidth(this.feedbackLine, box.width);
            } else {
                var el = tree._getNodeTitleEl(node);
                mini.addClass(el, "mini-tree-feedback-add");
                this.lastAddDomNode = el;


            }
        }
    },
    getFeedback: function (dropNode, y, way, tree, fromTree) {




        var rowBox = tree.getNodeBox(dropNode);


        var h = rowBox.height;
        var t = y - rowBox.y;

        var effect = null;


        if (this.dragData.indexOf(dropNode) != -1) return "no";
        var IsLeaf = false;
        if (way == 3) {
            IsLeaf = tree.isLeaf(dropNode);


            for (var i = 0, l = this.dragData.length; i < l; i++) {
                var dragRecord = this.dragData[i];

                var isAncestor = tree.isAncestor(dragRecord, dropNode);
                if (isAncestor) {
                    effect = "no";
                    break;
                }
            }
        }
        if (effect == null) {

            if (IsLeaf && tree.allowLeafDropIn == false) {
                if (t > h / 2) effect = "after";
                else effect = "before";
            } else {
                if (t > (h / 3) * 2) effect = "after";
                else if (h / 3 <= t && t <= (h / 3 * 2)) effect = "add";
                else effect = "before";
            }

        }
        var e = tree._OnGiveFeedback(effect, this.dragData, dropNode, fromTree);
        return e.effect;
    },
    _getDrag: function () {
        if (!this.drag) {
            this.drag = new mini.Drag({
                capture: false,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this.drag;
    }
};


mini.TreeGrid = function () {
    this.columns = [];
    this._bottomColumns = [];
    this._idColumns = {};
    this._nameColumns = {};

    this._cellErrors = [];
    this._cellMapErrors = {};

    mini.TreeGrid.superclass.constructor.call(this);

    this._resizeEl.style.display = this.allowResize ? "" : "none";
}
mini.extend(mini.TreeGrid, mini.Tree, {
    _rowIdField: "_id",

    width: 300,
    height: 180,

    minWidth: 300,
    minHeight: 150,
    maxWidth: 5000,
    maxHeight: 3000,

    allowResize: false,

    treeColumn: "",

    columns: [],
    columnWidth: 80,

    allowResizeColumn: true,
    allowMoveColumn: true,

    _doPositoin: true,

    _headerCellCls: "mini-treegrid-headerCell",
    _cellCls: "mini-treegrid-cell",

    _borderCls: "mini-treegrid-border",
    _headerCls: "mini-treegrid-header",
    _bodyCls: "mini-treegrid-body",

    _nodeCls: "mini-treegrid-node",
    _nodesCls: "mini-treegrid-nodes",
    _selectedNodeCls: "mini-treegrid-selectedNode",
    _nodeHoverCls: "mini-treegrid-hoverNode",

    _expandNodeCls: "mini-treegrid-expand",
    _collapseNodeCls: "mini-treegrid-collapse",
    _eciconCls: "mini-treegrid-ec-icon",
    _inNodeCls: "mini-treegrid-nodeTitle",
    _getNodeHoverEl: function (node) {
        if (!node) return null;
        var el = this._getNodeTitleEl(node);
        return el;
    },

    uiCls: "mini-treegrid",
    _create: function () {
        mini.TreeGrid.superclass._create.call(this);

        this._resizeEl = mini.append(this._borderEl, '<div class="mini-resizer-trigger" style=""></div>');

        mini.on(this._bodyEl, "scroll", this.__OnScroll, this);

        this._Resizer = new mini._Resizer(this);
        this._ColumnMove = new mini._ColumnMove(this);
        this._Splitter = new mini._ColumnSplitter(this);
        this._CellTip = new mini._CellToolTip(this);
    },
    _createColumnId: function (column) {
        return this.uid + "$column$" + column.id;
    },
    _getHeaderScrollEl: function () {
        return this._headerEl.firstChild;
    },
    _CreateTopTr: function (name) {
        var s = "";
        var columns = this.getBottomColumns();
        if (isIE) {
            if (isIE6 || isIE7 || (isIE8 && !jQuery.boxModel) || (isIE9 && !jQuery.boxModel)) {
                s += '<tr style="display:none;">';
            } else {
                s += '<tr >';
            }
        } else {
            s += '<tr>';
        }
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var width = column.width;
            var id = this._createColumnId(column) + "$" + name;

            s += '<td id="' + id + '" style="padding:0;border:0;margin:0;height:0;';
            if (column.width) s += 'width:' + column.width;

            if (column.visible == false) {
                s += ";display:none;";
            }

            s += '" ></td>';
        }
        s += "</tr>";
        return s;
    },









































    _doUpdateHeader: function () {

        var rows = this.getColumnRows();

        var bottomColumns = this.getBottomColumns();
        var columnLength = bottomColumns.length;

        var sb = [];
        sb[sb.length] = '<div class="mini-treegrid-headerInner"><table style="display:table" class="mini-treegrid-table" cellspacing="0" cellpadding="0">';
        sb[sb.length] = this._CreateTopTr("header");

        for (var j = 0, k = rows.length; j < k; j++) {
            var columns = rows[j];

            sb[sb.length] = '<tr >';
            for (var i = 0, l = columns.length; i < l; i++) {
                var column = columns[i];
                var header = column.header;
                if (typeof header == "function") header = header.call(this, column);
                if (mini.isNull(header) || header === "") header = "&nbsp;";

                var columnId = this._createColumnId(column);

                sb[sb.length] = '<td id="';
                sb[sb.length] = columnId;
                sb[sb.length] = '" class="mini-treegrid-headerCell  ' + (column.headerCls || "") + ' ';


                sb[sb.length] = '" style="';
                var bottomIndex = bottomColumns.indexOf(column);
                if (column.visible == false) {
                    sb[sb.length] = ";display:none;";
                }

                if (column.columns && column.columns.length > 0 && column.colspan == 0) {
                    sb[sb.length] = ";display:none;";
                }

                if (column.headerStyle) {
                    sb[sb.length] = column.headerStyle + ';';
                }
                if (column.headerAlign) {
                    sb[sb.length] = 'text-align:' + column.headerAlign + ';';
                }

                sb[sb.length] = '" ';

                if (column.rowspan) {
                    sb[sb.length] = 'rowspan="' + column.rowspan + '" ';
                }
                if (column.colspan) {
                    sb[sb.length] = 'colspan="' + column.colspan + '" ';
                }

                sb[sb.length] = '>';

                sb[sb.length] = header;

                sb[sb.length] = '</td>';
            }
            sb[sb.length] = '</tr>';
        }
        sb[sb.length] = '</table><div class="mini-treegrid-topRightCell"></div></div>';

        var s = sb.join("");

        this._headerEl.innerHTML = s;

        this._headerInnerEl = this._headerEl.firstChild;
        this._topRightCellEl = this._headerInnerEl.lastChild;

    },
    _createNodeTitle: function (node, useEdit, sb) {
        var isReturn = !sb;
        if (!sb) sb = [];

        var text = node[this.textField];
        if (text === null || text === undefined) text = "";
        var isLeaf = this.isLeaf(node);
        var level = this.getLevel(node);

        var cls = "";
        if (!isLeaf) {
            cls = this.isExpandedNode(node) ? this._expandNodeCls : this._collapseNodeCls;
        }
        if (this._selectedNode == node) {
            cls += " " + this._selectedNodeCls;
        }

        var columns = this.getBottomColumns();

        sb[sb.length] = '<table class="mini-treegrid-nodeTitle ';
        sb[sb.length] = cls;
        sb[sb.length] = '" cellspacing="0" cellpadding="0">';
        sb[sb.length] = this._CreateTopTr();
        sb[sb.length] = '<tr>';
        for (var j = 0, k = columns.length; j < k; j++) {
            var column = columns[j];
            var cellId = this._createCellId(node, column);

            var e = this._OnDrawCell(node, column);

            var w = column.width;
            if (typeof w == "number") w = w + "px";

            sb[sb.length] = '<td id="';
            sb[sb.length] = cellId;
            sb[sb.length] = '" class="mini-treegrid-cell ';
            if (e.cellCls) sb[sb.length] = e.cellCls;
            sb[sb.length] = '" style="';
            if (e.cellStyle) {
                sb[sb.length] = e.cellStyle;
                sb[sb.length] = ";";
            }





            if (column.align) {
                sb[sb.length] = 'text-align:';
                sb[sb.length] = column.align;
                sb[sb.length] = ';';
            }
            if (column.visible == false) {
                sb[sb.length] = 'display:none;';
            }

            sb[sb.length] = '">';
            sb[sb.length] = e.cellHtml;
            sb[sb.length] = '</td>';

            if (e.rowCls) rowCls = e.rowCls;
            if (e.rowStyle) rowStyle = e.rowStyle;

        }
        sb[sb.length] = '</table>';

        if (isReturn) return sb.join('');
    },
    doUpdate: function () {
        if (!this._allowUpdate) return;

        this._doUpdateHeader();

        var sss = new Date();

        var nodes = this._getViewChildNodes(this.root);
        var sb = [];
        this._createNodes(nodes, this.root, sb);
        var s = sb.join('');

        this._bodyEl.innerHTML = s;
        this._deferLayout();





    },
    getScrollLeft: function () {
        return this._bodyEl.scrollLeft;
    },
    doLayout: function () {
        if (!this.canLayout()) return;



        var autoHeight = this.isAutoHeight();
        var autoWidth = this.isAutoWidth();

        var width = this.getWidth(true);
        var height = this.getHeight(true);
        var headerHeight = this.getHeaderHeight();
        var bodyHeight = height - headerHeight;

        this._bodyEl.style.width = width + "px";
        if (autoHeight) {
            this._bodyEl.style.height = "auto";
        } else {
            this._bodyEl.style.height = bodyHeight + "px";
        }

        this._doLayoutHeader();

        this._doLayoutTopRightCell();

        this.fire("layout");

    },
    _doLayoutTopRightCell: function () {
        var headerTable = this._headerInnerEl.firstChild;
        var width = headerTable.offsetWidth + 1;
        var height = headerTable.offsetHeight - 1;
        if (height < 0) height = 0;

        this._topRightCellEl.style.height = height + "px";
    },
    _doLayoutHeader: function () {










        var bodyScrollHeight = this._bodyEl.scrollHeight;
        var bodyClientHeight = this._bodyEl.clientHeight;

        var elWidth = this.getWidth(true);

        var table1 = this._headerEl.firstChild.firstChild, table2 = this._bodyEl.firstChild;

        if (bodyClientHeight >= bodyScrollHeight) {
            if (table2) table2.style.width = "100%";
            if (table1) table1.style.width = "100%";
        } else {
            if (table2) {
                var w = parseInt(table2.parentNode.offsetWidth - 17) + 'px'
                table2.style.width = w;
            }

            if (table1) table1.style.width = w;
        }










        try {
            var w = this._headerEl.firstChild.firstChild.firstChild.offsetWidth;

            this._bodyEl.firstChild.style.width = w + "px";
        } catch (e) { }

        this.__OnScroll();
    },
    getHeaderHeight: function () {
        return mini.getHeight(this._headerEl);
    },

    _OnDrawCell: function (record, column) {

        var showCheckBox = this.showCheckBox;
        if (showCheckBox && this.hasChildren(record)) {
            showCheckBox = this.showFolderCheckBox;
        }

        var value = mini._getMap(column.field, record);
        var e = {
            isLeaf: this.isLeaf(record),
            rowIndex: this.indexOf(record),
            showCheckBox: showCheckBox,
            iconCls: this.getNodeIcon(record),
            showTreeIcon: this.showTreeIcon,

            sender: this,
            record: record,
            row: record,
            node: record,
            column: column,
            field: column ? column.field : null,
            value: value,
            cellHtml: value,
            rowCls: null,
            cellCls: column ? (column.cellCls || '') : "",
            rowStyle: null,
            cellStyle: column ? (column.cellStyle || '') : ""
        };

        if (column.dateFormat) {
            if (mini.isDate(e.value)) e.cellHtml = mini.formatDate(value, column.dateFormat);
            else e.cellHtml = value;
        }

        var renderer = column.renderer;
        if (renderer) {
            fn = typeof renderer == "function" ? renderer : window[renderer];
            if (fn) {
                e.cellHtml = fn.call(column, e);
            }
        }

        this.fire("drawcell", e);

        if (e.cellHtml === null || e.cellHtml === undefined || e.cellHtml === "") e.cellHtml = "&nbsp;";

        if (!this.treeColumn || this.treeColumn !== column.name) return e;

        this._doTreeColumn(e);
        return e;
    },
    _doTreeColumn: function (e) {

        var node = e.node;
        if (mini.isNull(e.showTreeIcon)) e.showTreeIcon = this.showTreeIcon;

        var cellHtml = e.cellHtml;

        var isLeaf = this.isLeaf(node);
        var left = this.getLevel(node) * 18;
        if (this.showExpandButtons == false) left -= 18;

        var cls = '';

        if (e.cellCls) {
            e.cellCls += ' mini-treegrid-treecolumn ';
        } else {
            e.cellCls = ' mini-treegrid-treecolumn ';
        }

        var s = '<div class="mini-treegrid-treecolumn-inner ' + cls + '">';

        if (!isLeaf) {
            var display = this.showExpandButtons ? "" : ";display:none";
            s += '<a href="#" onclick="return false;"  hidefocus class="' + this._eciconCls + '" style="left:' + (left) + 'px;' + display + '"></a>';
        }
        left += 18;

        if (e.showTreeIcon) {

            s += '<div class="' + e.iconCls + ' mini-treegrid-nodeicon" style="left:' + left + 'px;"></div>';
            left += 18;
        }

        cellHtml = '<span class="mini-tree-nodetext">' + cellHtml + '</span>';

        if (e.showCheckBox) {

            var ckid = this._createCheckNodeId(node);
            var checked = this.isCheckedNode(node);
            cellHtml = '<input type="checkbox" id="' + ckid + '" class="' + this._checkBoxCls + '" hidefocus ' + (checked ? "checked" : "") + '/>' + cellHtml;
        }

        s += '<div class="mini-treegrid-nodeshow" style="margin-left:' + (left + 2) + 'px;">' + cellHtml + '</div>';
        s += '</div>';
        cellHtml = s;
        e.cellHtml = cellHtml;
    },

    setTreeColumn: function (value) {
        if (this.treeColumn != value) {
            this.treeColumn = value;
            this.doUpdate();
        }
    },
    getTreeColumn: function (node) {
        return this.treeColumn;
    },
    setAllowResizeColumn: function (value) {
        this.allowResizeColumn = value;
    },
    getAllowResizeColumn: function (node) {
        return this.allowResizeColumn;
    },
    setAllowMoveColumn: function (value) {
        this.allowMoveColumn = value;
    },
    getAllowMoveColumn: function (node) {
        return this.allowMoveColumn;
    },
    setAllowResize: function (value) {
        this.allowResize = value;

        this._resizeEl.style.display = this.allowResize ? "" : "none";
    },
    getAllowResize: function () {
        return this.allowResize;
    },

    _createCellId: function (node, column) {
        return this.uid + "$" + node._id + "$" + column._id;
    },
    setColumnWidth: function (column, width) {
        column = this.getColumn(column);
        if (!column) return;
        if (mini.isNumber(width)) width += "px";
        column.width = width;

        this.doUpdate();
    },
    getColumnWidth: function (column) {
        var box = this.getColumnBox(column);
        return box ? box.width : 0;
    },

    __OnScroll: function (e) {
        var scrollLeft = this._bodyEl.scrollLeft;
        this._headerEl.firstChild.scrollLeft = scrollLeft;
    },

    getAttrs: function (el) {

        var attrs = mini.TreeGrid.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            [
                "treeColumn", "ondrawcell"
             ]
        );

        mini._ParseBool(el, attrs,
            [
                "allowResizeColumn", "allowMoveColumn", "allowResize"
             ]
        );

        var cs = mini.getChildNodes(el);
        for (var i = 0, l = cs.length; i < l; i++) {
            var node = cs[i];
            var property = jQuery(node).attr("property");
            if (!property) continue;
            property = property.toLowerCase();
            if (property == "columns") {
                attrs.columns = mini._ParseColumns(node);
            }
        }

        delete attrs.data;

        return attrs;
    }
});

mini.copyTo(mini.TreeGrid.prototype, mini_Column_Prototype);
mini.copyTo(mini.TreeGrid.prototype, mini_CellValidator_Prototype);

mini.regClass(mini.TreeGrid, "treegrid");


mini.DataSource = function () {
    mini.DataSource.superclass.constructor.call(this);
    this._init();
};
mini.extend(mini.DataSource, mini.Component, {
    idField: "id",
    textField: "text",

    _init: function () {
        this.source = [];
        this.dataview = [];
        this.visibleRows = null;

        this._ids = {};
        this._removeds = [];
        this._originals = {};
        this._errors = {};

        this._selected = null;
        this._selecteds = [];
        this._idSelecteds = {};

        this.__changeCount = 0;
    },
    getSource: function () {
        return this.source;
    },
    getList: function () {
        return this.source.clone();
    },
    getDataView: function () {
        return this.dataview;
    },
    getVisibleRows: function () {

        if (!this.visibleRows) {
            this.visibleRows = this.getDataView().clone();
        }
        return this.visibleRows;
    },
    setData: function (data) {
        this.loadData(data);
    },
    loadData: function (data) {
        if (!mini.isArray(data)) data = [];







        this._init();
        this._doLoadData(data);

        this._dataChanged();
        this.fire("loaddata");
        return true;
    },
    _doLoadData: function (data) {
        this.source = data;
        this.dataview = data;

        var ds = this.source, ids = this._ids;
        for (var i = 0, l = ds.length; i < l; i++) {
            var record = ds[i];

            record._id = mini.DataSource.RecordId++;
            ids[record._id] = record;


            record._uid = record._id;
        }
    },
    clearData: function () {
        this._init();
        this._dataChanged();
        this.fire("cleardata");
    },
    clear: function () {
        this.clearData();
    },


    updateRecord: function (record, field, value) {
        if (mini.isNull(record)) return;

        if (typeof field == 'string') {
            var oldValue = record[field];
            if (mini.isEquals(oldValue, value)) {

                return false;
            }
            this.beginChange();
            record[field] = value;
            this._setModified(record, field, oldValue);
            this.endChange();


        } else {
            this.beginChange();
            for (var p in field) {
                var oldValue = record[p];
                var value = field[p];
                if (mini.isEquals(oldValue, value)) continue;
                record[p] = value;
                this._setModified(record, p, oldValue);
            }
            this.endChange();

        }

        this.fire("update", { record: record });
    },
    deleteRecord: function (record) {
        this._setDeleted(record);

        this._dataChanged();
        this.fire("delete", { record: record });
    },
    getby_id: function (id) {
        id = typeof id == "object" ? id._id : id;
        return this._ids[id];
    },
    getbyId: function (id) {
        var t = typeof id;
        if (t == "number") return this.getAt(id);
        if (typeof id == "object") return id;
        var data = this.getList();
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            if (o[this.idField] == id) return o;
        }
        return null;
    },
    getsByIds: function (value) {
        if (mini.isNull(value)) value = "";
        value = String(value);
        var nodes = [];
        var ids = String(value).split(",");
        for (var i = 0, l = ids.length; i < l; i++) {
            var node = this.getbyId(ids[i]);
            if (node) nodes.push(node);
        }
        return nodes;
    },
    getRecord: function (id) {
        return this.getRow(id);
    },
    getRow: function (index) {
        var t = typeof index;
        if (t == "string") return this.getbyId(index);
        else if (t == "number") return this.getAt(index);
        else if (t == "object") return index;
    },
    delimiter: ",",
    getValueAndText: function (records, delimiter) {
        if (mini.isNull(records)) records = [];
        delimiter = delimiter || this.delimiter;
        if (!mini.isArray(records)) {
            records = this.getsByIds(records);
        }
        var values = [];
        var texts = [];
        for (var i = 0, l = records.length; i < l; i++) {
            var record = records[i];
            if (record) {
                values.push(this.getItemValue(record));
                texts.push(this.getItemText(record));
            }
        }
        return [values.join(delimiter), texts.join(delimiter)];
    },
    getItemValue: function (item) {
        if (!item) return "";
        var t = item[this.idField];
        return mini.isNull(t) ? '' : String(t);
    },
    getItemText: function (item) {
        if (!item) return "";
        var t = item[this.textField];
        return mini.isNull(t) ? '' : String(t);
    },

    isModified: function (reocrd, field) {
        var or = this._originals[reocrd._id];
        if (!or) return false;
        if (mini.isNull(field)) return false;
        return or.hasOwnProperty(field);
    },
    hasRecord: function (record) {
        return !!this.getby_id(record);
    },
    findRecords: function (property, value) {
        var ifFn = typeof property == "function";
        var fn = property;
        var scope = value || this;
        var data = this.source;
        var records = [];
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];

            if (ifFn) {
                var ret = fn.call(scope, o);
                if (ret == true) {
                    records[records.length] = o;
                }
                if (ret === 1) break;
            } else {
                if (o[property] == value) {
                    records[records.length] = o;
                }
            }
        }
        return records;
    },
    each: function (fn, scope) {
        var data = this.getDataView().clone();
        scope = scope || this;
        mini.forEach(data, fn, scope);
    },
    getCount: function () {
        return this.getDataView().length;
    },
    setIdField: function (value) {
        this.idField = value;
    },
    setTextField: function (value) {
        this.textField = value;
    },

    __changeCount: 0,
    beginChange: function () {
        this.__changeCount++;
    },
    endChange: function (raise) {
        this.__changeCount--;
        if (this.__changeCount < 0) this.__changeCount = 0;
        if ((raise !== false && this.__changeCount == 0) || raise == true) {
            this.__changeCount = 0;
            this._dataChanged();
        }
    },
    _dataChanged: function () {
        this.visibleRows = null;
        if (this.__changeCount == 0) {
            this.fire("datachanged");
        }
    },


    _setAdded: function (record) {
        record._id = mini.DataSource.RecordId++;


        record._uid = record._id;


        record._state = "added";
        this._ids[record._id] = record;
        delete this._originals[record._id];
    },
    _setModified: function (record, field, oldValue) {
        if (record._state != "added"
            && record._state != "deleted"
            && record._state != "removed"
        ) {
            record._state = "modified";
            var or = this._getOriginal(record);
            if (!or.hasOwnProperty(field)) {
                or[field] = oldValue;
            }
        }
    },
    _setDeleted: function (record) {
        if (record._state != "added"
            && record._state != "deleted"
            && record._state != "removed"
        ) {
            record._state = "deleted";
        }
    },
    _setRemoved: function (record) {
        delete this._ids[record._id];
        if (record._state != "added" && record._state != "removed") {
            record._state = "removed";
            delete this._originals[record._id];
            this._removeds.push(record);
        }
    },
    _getOriginal: function (record) {
        var rid = record._id;
        var or = this._originals[rid];
        if (!or) {
            or = this._originals[rid] = {};
        }
        return or;
    },

    _selected: null,
    _selecteds: [],
    _idSelecteds: null,
    multiSelect: false,
    isSelected: function (id) {
        if (!id) return false;
        if (typeof id != "string") id = id._id;
        return !!this._idSelecteds[id];
    },
    setSelected: function (record) {
        record = this.getby_id(record);
        var selected = this.getSelected();
        if (selected != record) {
            this._selected = record;
            if (record) {
                this.select(record);
            } else {
                this.deselect(this.getSelected());
            }

            this._OnCurrentChanged(record);
        }
    },
    getSelected: function () {
        if (this.isSelected(this._selected)) return this._selected;
        return this._selecteds[0];
    },
    setCurrent: function (record) {
        this.setSelected(record);
    },
    getCurrent: function () {
        return this.getSelected();
    },
    getSelecteds: function () {
        return this._selecteds.clone();
    },
    select: function (record) {
        if (mini.isNull(record)) return;
        this.selects([record]);
    },
    deselect: function (record) {
        if (mini.isNull(record)) return;
        this.deselects([record]);
    },
    selectAll: function () {
        this.selects(this.getList());
    },
    deselectAll: function () {
        this.deselects(this.getList());
    },
    selects: function (records) {
        if (!mini.isArray(records)) return;
        records = records.clone();


        if (this.multiSelect == false) {
            this.deselects(this.getSelecteds());
            if (records.length > 0) records.length = 1;
            this._selecteds = [];
            this._idSelecteds = {};
        }

        var _records = [];
        for (var i = 0, l = records.length; i < l; i++) {
            var record = this.getbyId(records[i]);
            if (!record) continue;
            if (!this.isSelected(record)) {
                this._selecteds.push(record);
                this._idSelecteds[record._id] = record;
                _records.push(record);
            }
        }
        this._OnSelectionChanged(records, true, _records);
    },
    deselects: function (records) {
        if (!mini.isArray(records)) return;
        records = records.clone();
        var _records = [];
        for (var i = records.length - 1; i >= 0; i--) {
            var record = this.getbyId(records[i]);
            if (!record) continue;
            if (this.isSelected(record)) {
                this._selecteds.remove(record);
                delete this._idSelecteds[record._id];
                _records.push(record);
            }
        }
        this._OnSelectionChanged(records, false, _records);
    },
    _OnSelectionChanged: function (records, select, _records) {
        var e = {
            records: records,
            select: select,
            selected: this.getSelected(),
            selecteds: this.getSelecteds(),
            _records: _records
        };
        this.fire("SelectionChanged", e);

        var current = this._current;
        var now = this.getCurrent();
        if (current != now) {
            this._current = now;
            this._OnCurrentChanged(now);
        }
    },
    _OnCurrentChanged: function (record) {
        if (this._currentTimer) {
            clearTimeout(this._currentTimer);
        }
        var me = this;
        this._currentTimer = setTimeout(function () {
            me._currentTimer = null;
            var e = { record: record };
            me.fire("CurrentChanged", e);
        }, 1);
    },
    _checkSelecteds: function () {
        for (var i = this._selecteds.length - 1; i >= 0; i--) {
            var record = this._selecteds[i];
            var r = this.getby_id(record._id);
            if (!r) {
                this._selecteds.removeAt(i);
                delete this._idSelecteds[record._id];
            }
        }
        if (this._selected && this.getby_id(this._selected._id) == null) {
            this._selected = null;
        }
    },
    setMultiSelect: function (value) {
        if (this.multiSelect != value) {
            this.multiSelect = value;
            if (value == false) {

            }
        }
    },
    getMultiSelect: function () {
        return this.multiSelect;
    },
    selectPrev: function () {
        var record = this.getSelected();
        if (!record) {
            record = this.getAt(0);
        } else {
            var index = this.indexOf(record);
            record = this.getAt(index - 1);
        }
        if (record) {
            this.deselectAll();
            this.select(record);
            this.setCurrent(record);
        }
    },
    selectNext: function () {
        var record = this.getSelected();
        if (!record) {
            record = this.getAt(0);
        } else {
            var index = this.indexOf(record);
            record = this.getAt(index + 1);
        }
        if (record) {
            this.deselectAll();
            this.select(record);
            this.setCurrent(record);
        }
    },
    selectFirst: function () {
        var record = this.getAt(0);
        if (record) {
            this.deselectAll();
            this.select(record);
            this.setCurrent(record);
        }
    },
    selectLast: function () {
        var data = this.getVisibleRows();
        var record = this.getAt(data.length - 1);
        if (record) {
            this.deselectAll();
            this.select(record);
            this.setCurrent(record);
        }
    },
    getSelectedsId: function (delimiter) {
        var nodes = this.getSelecteds();
        var vts = this.getValueAndText(nodes, delimiter);
        return vts[0];
    },
    getSelectedsText: function (delimiter) {
        var nodes = this.getSelecteds();
        var vts = this.getValueAndText(nodes, delimiter);
        return vts[1];
    },

    _filterInfo: null,
    _sortInfo: null,
    filter: function (fn, scope) {

        if (typeof fn != "function") return;
        scope = scope || this;

        this._filterInfo = [fn, scope];

        this._doFilter();

        this._doSort();

        this._dataChanged();

        this.fire("filter");
    },
    clearFilter: function () {
        if (!this._filterInfo) return;
        this._filterInfo = null;
        this._doFilter();
        this._doSort();
        this._dataChanged();
        this.fire("filter");
    },
    sort: function (fn, scope, reverse) {
        if (typeof fn != "function") return;
        scope = scope || this;
        this._sortInfo = [fn, scope, reverse];
        this._doSort();
        this._dataChanged();
        this.fire("sort");
    },
    clearSort: function () {
        this._sortInfo = null;

        this.sortField = this.sortOrder = null;

        this._doFilter();
        this._dataChanged();
        this.fire("filter");
    },
    _doClientSortField: function (sortField, sortOrder, dataType) {

        var sortFn = this._getSortFnByField(sortField, dataType);
        if (!sortFn) return;

        this.sortField = sortField;
        this.sortOrder = sortOrder;

        var reverse = sortOrder == "desc";
        this.sort(sortFn, this, reverse);
    },
    _getSortFnByField: function (field, sortType) {
        if (!field) return null;
        var sortFn = null;
        var typeFn = mini.sortTypes[sortType];
        if (!typeFn) typeFn = mini.sortTypes["string"];
        function sortBy(a, b) {
            var a1 = mini._getMap(field, a), b1 = mini._getMap(field, b);

            var nullA = mini.isNull(a1) || a1 === "";
            var nullB = mini.isNull(b1) || b1 === "";
            if (nullA) return -1;
            if (nullB) return 1;

            var v1 = typeFn(a1);
            var v2 = typeFn(b1);
            if (v1 > v2) return 1;
            else if (v1 == v2) return 0;
            else return -1;
        }

        sortFn = sortBy;
        return sortFn;
    },



    ajaxAsync: true,
    ajaxMethod: '',

    ajaxOptions: null,
    autoLoad: false,
    url: "",

    pageSize: 20,
    pageIndex: 0,
    totalCount: 0,
    totalPage: 0,

    sortField: "",
    sortOrder: "",

    loadParams: null,
    getLoadParams: function () {
        return this.loadParams || {};
    },


    sortMode: "server",

    pageIndexField: "pageIndex",
    pageSizeField: "pageSize",
    sortFieldField: "sortField",
    sortOrderField: "sortOrder",
    totalField: "total",
    dataField: "data",

    load: function (params, success, error, complete) {
        if (typeof params == "string") {
            this.setUrl(params);
            return;
        }
        if (this._loadTimer) clearTimeout(this._loadTimer);
        this.loadParams = params || {};
        if (this.ajaxAsync) {
            var me = this;
            this._loadTimer = setTimeout(function () {
                me._doLoadAjax(me.loadParams, success, error, complete);
                me._loadTimer = null;
            }, 1);
        } else {
            this._doLoadAjax(this.loadParams, success, error, complete);
        }
    },
    reload: function (success, error, complete) {
        this.load(this.loadParams, success, error, complete);
    },
    gotoPage: function (index, size) {
        var params = this.loadParams || {};
        if (mini.isNumber(index)) params.pageIndex = index;
        if (mini.isNumber(size)) params.pageSize = size;
        this.load(params);
    },
    sortBy: function (sortField, sortOrder) {
        this.sortField = sortField;
        this.sortOrder = sortOrder == "asc" ? "asc" : "desc";
        if (this.sortMode == "server") {
            var params = this.getLoadParams();
            params.sortField = sortField;
            params.sortOrder = sortOrder;
            params.pageIndex = this.pageIndex;
            this.load(params);
        } else {


        }
    },
    checkSelectOnLoad: true,
    selectOnLoad: false,
    _doLoadAjax: function (params, success, error, complete, _successHandler) {
        params = params || {};
        if (mini.isNull(params.pageIndex)) params.pageIndex = 0;
        if (mini.isNull(params.pageSize)) params.pageSize = this.pageSize;
        params.sortField = this.sortField;
        params.sortOrder = this.sortOrder;

        this.loadParams = params;

        var url = this._evalUrl();
        var type = this._evalType(url);

        var e = {
            url: url,
            async: this.ajaxAsync,
            type: type,
            data: params,
            params: params,
            cancel: false
        };

        if (e.data != e.params && e.params != params) {
            e.data = e.params;
        }


        mini.copyTo(e, this.ajaxOptions);

        this._OnBeforeLoad(e);
        if (e.cancel == true) return;


        var o = {};
        o[this.pageIndexField] = params.pageIndex;
        o[this.pageSizeField] = params.pageSize;
        if (params.sortField) o[this.sortFieldField] = params.sortField;
        if (params.sortOrder) o[this.sortOrderField] = params.sortOrder;
        delete params.pageIndex;
        delete params.pageSize;
        delete params.sortField;
        delete params.sortOrder;
        mini.copyTo(params, o);


        var selected = this.getSelected();
        this._selectedValue = selected ? selected[this.idField] : null;

        var me = this;
        me._resultObject = null;


        var options = {
            url: e.url,
            type: e.type,
            async: e.async,
            data: e.data,
            cache: false,
            dataType: "text",
            success: function (text, textStatus, xhr) {

                var result = null;
                try {
                    result = mini.decode(text);
                } catch (ex) {
                    if (mini_debugger == true) {
                        alert(url + "\n json is error.");
                    }
                }
                if (result == null) {
                    result = {};
                    result[me.dataField] = [];
                    result[me.totalField] = 0;
                }

                if (mini.isArray(result)) {
                    var r = {};
                    r[me.dataField] = result;
                    r[me.totalField] = result.length;
                    result = r;
                }

                result.total = result[me.totalField];
                result.data = result[me.dataField];
                if (!result.data) result.data = [];
                if (!result.total) result.total = 0;

                me._resultObject = result;

                var ex = {
                    xhr: xhr,
                    text: text,
                    textStatus: textStatus,
                    result: result,
                    total: result.total,
                    data: result.data.clone(),

                    pageIndex: params[me.pageIndexField],
                    pageSize: params[me.pageSizeField]
                };

                if (mini.isNumber(result.error) && result.error != 0) {

                    ex.textStatus = "servererror";
                    ex.errorCode = result.error;
                    ex.stackTrace = result.stackTrace;
                    ex.errorMsg = result.errorMsg;
                    if (mini_debugger == true) {
                        alert(url + "\n" + ex.textStatus + "\n" + ex.stackTrace);
                    }
                    me.fire("loaderror", ex);
                    if (error) error.call(me, ex);
                } else {
                    if (_successHandler) {
                        _successHandler(ex);
                    } else {

                        me._OnPreLoad(ex);


                        me.pageIndex = ex.pageIndex;
                        me.pageSize = ex.pageSize;
                        me.setTotalCount(ex.total);


                        me.setData(ex.data);


                        if (me._selectedValue && me.checkSelectOnLoad) {
                            var o = me.getbyId(me._selectedValue);
                            if (o) {
                                me.select(o);
                            }
                        }

                        if (me.getSelected() == null && me.selectOnLoad && me.getDataView().length > 0) {
                            me.select(0);
                        }
                        me.fire("load", ex);
                        if (success) success.call(me, ex);
                    }
                }
            },
            error: function (xhr, textStatus, errorThrown) {
                var ex = {
                    xhr: xhr,
                    text: xhr.responseText,
                    textStatus: textStatus
                };
                ex.errorMsg = xhr.responseText;
                ex.errorCode = xhr.status;

                if (mini_debugger == true) {
                    alert(url + "\n" + ex.errorCode + "\n" + ex.errorMsg);
                }

                me.fire("loaderror", ex);
                if (error) error.call(me, ex);
            },
            complete: function (xhr, textStatus) {
                var ex = {
                    xhr: xhr,
                    text: xhr.responseText,
                    textStatus: textStatus
                };
                me.fire("loadcomplete", ex);
                if (complete) complete.call(me, ex);
                me._xhr = null;
            }
        };
        if (this._xhr) {
            this._xhr.abort();
        }
        this._xhr = mini.ajax(options);
    },
    _OnBeforeLoad: function (e) {
        this.fire("beforeload", e);
    },
    _OnPreLoad: function (e) {
        this.fire("preload", e);
    },
    _evalUrl: function () {
        var url = this.url;
        if (typeof url == "function") {
            url = url();
        } else {
            try {
                url = eval(url);
            } catch (ex) {
                url = this.url;
            }
        }
        return url;
    },
    _evalType: function (url) {
        var type = this.ajaxMethod;
        if (!type) {
            type = 'post';
            if (url) {
                if (url.indexOf(".txt") != -1 || url.indexOf(".json") != -1) {
                    type = "get";
                }
            } else {
                type = "get";
            }
        }
        return type;
    },
    setSortMode: function (value) {
        this.sortMode = value;
    },
    getSortMode: function () {
        return this.sortMode;
    },
    setAjaxOptions: function (value) {
        this.ajaxOptions = value;
    },
    getAjaxOptions: function () {
        return this.ajaxOptions;
    },
    setAutoLoad: function (value) {
        this.autoLoad = value;
    },
    getAutoLoad: function () {
        return this.autoLoad;
    },
    setUrl: function (value) {
        this.url = value;
        if (this.autoLoad) {
            this.load();
        }
    },
    getUrl: function () {
        return this.url;
    },
    setPageIndex: function (value) {
        this.pageIndex = value;
        this.fire("pageinfochanged");
    },
    getPageIndex: function () {
        return this.pageIndex;
    },
    setPageSize: function (value) {
        this.pageSize = value;
        this.fire("pageinfochanged");
    },
    getPageSize: function () {
        return this.pageSize;
    },
    setTotalCount: function (value) {
        this.totalCount = value;
        this.fire("pageinfochanged");
    },
    getTotalCount: function () {
        return this.totalCount;
    },
    getTotalPage: function () {
        return this.totalPage;
    },
    setCheckSelectOnLoad: function (value) {
        this.checkSelectOnLoad = value;
    },
    getCheckSelectOnLoad: function () {
        return this.checkSelectOnLoad;
    },
    setSelectOnLoad: function (value) {
        this.selectOnLoad = value;
    },
    getSelectOnLoad: function () {
        return this.selectOnLoad;
    }

});
mini.DataSource.RecordId = 1;





mini.DataTable = function () {
    mini.DataTable.superclass.constructor.call(this);
};
mini.extend(mini.DataTable, mini.DataSource, {
    _init: function () {
        mini.DataTable.superclass._init.call(this);
        this._filterInfo = null;
        this._sortInfo = null;
    },
    add: function (record) {
        return this.insert(this.source.length, record);
    },
    addRange: function (records) {
        this.insertRange(this.source.length, records);
    },
    insert: function (index, record) {
        if (!record) return null;
        if (!mini.isNumber(index)) {
            var insertRow = this.getRecord(index);
            if (insertRow) {
                index = this.indexOf(insertRow);
            } else {
                index = this.getDataView().length;
            }

        }

        var target = this.dataview[index];
        if (target) {
            this.dataview.insert(index, record);
        } else {
            this.dataview.add(record);
        }

        if (this.dataview != this.source) {
            if (target) {
                var sourceIndex = this.source.indexOf(target);
                this.source.insert(sourceIndex, record);
            } else {
                this.source.add(record);
            }
        }

        this._setAdded(record);

        this._dataChanged();

        var e = {
            index: index,
            record: record
        };
        this.fire("add", e);
    },
    insertRange: function (index, records) {
        if (!mini.isArray(records)) return;
        this.beginChange();
        for (var i = 0, l = records.length; i < l; i++) {
            var record = records[i];
            this.insert(index + i, record);
        }
        this.endChange();
    },
    remove: function (record, autoSelect) {
        var index = this.indexOf(record);
        return this.removeAt(index, autoSelect);
    },
    removeAt: function (index, autoSelect) {
        var record = this.getAt(index);
        if (!record) return null;

        var isSelected = this.isSelected(record);

        this.source.removeAt(index);
        if (this.dataview !== this.source) {
            this.dataview.removeAt(index);
        }

        this._setRemoved(record);

        this._checkSelecteds();

        this._dataChanged();

        var e = {
            record: record
        };
        this.fire("remove", e);

        if (isSelected && autoSelect) {
            var newSelected = this.getAt(index);
            if (!newSelected) newSelected = this.getAt(index - 1);
            this.deselectAll();
            this.select(newSelected);
        }
    },
    removeRange: function (records, autoSelect) {
        if (!mini.isArray(records)) return;
        this.beginChange();
        for (var i = 0, l = records.length; i < l; i++) {
            var o = records[i];
            this.remove(o, autoSelect);
        }
        this.endChange();
    },
    move: function (record, newIndex) {
        if (!record || !mini.isNumber(newIndex)) return;
        if (newIndex < 0) newIndex = this.dataview.length;
        if (mini.isArray(record)) {
            this.beginChange();

            var rs = record, targetRecord = this.getAt(newIndex);
            var sf = this;
            mini.sort(rs, function (a, b) {
                return sf.indexOf(a) > sf.indexOf(b);
            }, this);
            for (var i = 0, l = rs.length; i < l; i++) {
                var r = rs[i];
                var index = this.indexOf(targetRecord);
                this.move(r, index);
            }
            this.endChange();
            return;
        }

        var target = this.dataview[newIndex];

        this.dataview.remove(record);

        var _index = this.dataview.indexOf(target);
        if (_index != -1) {
            newIndex = _index;
        }
        if (target) {
            this.dataview.insert(newIndex, record);
        } else {
            this.dataview.add(record);
        }

        if (this.dataview != this.source) {
            this.source.remove(record);
            var _index = this.source.indexOf(target);
            if (_index != -1) {
                newIndex = _index;
            }
            if (target) {
                this.source.insert(newIndex, record);
            } else {
                this.source.add(record);
            }
        }

        this._dataChanged();

        var e = {
            index: newIndex,
            record: record
        };
        this.fire("move", e);
    },
    indexOf: function (record) {
        return this.dataview.indexOf(record);
    },
    getAt: function (index) {
        return this.dataview[index];
    },
    getRange: function (start, end) {
        if (start > end) {
            var t = start;
            start = end;
            end = t;
        }
        var range = [];
        for (var i = start, l = end; i <= l; i++) {
            var o = this.dataview[i];
            range.push(o);
        }
        return range;
    },
    selectRange: function (start, end) {
        if (!mini.isNumber(start)) start = this.indexOf(start);
        if (!mini.isNumber(end)) end = this.indexOf(end);
        if (mini.isNull(start) || mini.isNull(end)) return;

        var rs = this.getRange(start, end);
        this.selects(rs);
    },
    toArray: function () {
        return this.source.clone();
    },


    getChanges: function (rowState, onlyField) {
        var changes = [];
        if (rowState == "removed" || rowState == null) {
            changes.addRange(this._removeds.clone());
        }
        for (var i = 0, l = this.source.length; i < l; i++) {
            var record = this.source[i];
            if (!record._state) continue;
            if (record._state == rowState || rowState == null) {
                changes[changes.length] = record;
            }
        }

        var rows = changes;
        if (onlyField) {
            for (var i = 0, l = rows.length; i < l; i++) {
                var row = rows[i];
                if (row._state == "modified") {
                    var newRow = {};
                    newRow._state = row._state;
                    newRow[this.idField] = row[this.idField];
                    for (var field in row) {
                        var modifed = this.isModified(row, field);
                        if (modifed) {
                            newRow[field] = row[field];
                        }
                    }
                    rows[i] = newRow;
                }
            }
        }

        return changes;
    },

    accept: function () {
        this.beginChange();
        for (var i = 0, l = this.source.length; i < l; i++) {
            var record = this.source[i];
            this.acceptRecord(record);
        }
        this._removeds = [];
        this._originals = {};
        this.endChange();
    },
    reject: function () {
        this.beginChange();
        for (var i = 0, l = this.source.length; i < l; i++) {
            var record = this.source[i];
            this.rejectRecord(record);
        }
        this._removeds = [];
        this._originals = {};
        this.endChange();
    },
    acceptRecord: function (node) {
        delete this._originals[node._id];
        if (node._state == "deleted") {
            this.removeNode(node);
        } else {
            delete node._state;
            delete this._originals[node._id];
            this._dataChanged();
        }
    },
    rejectRecord: function (node) {
        if (node._state == "added") {
            this.removeNode(node);
        } else if (node._state == "modified" || node._state == "deleted") {
            var or = this._getOriginal(node);
            mini.copyTo(node, or);
            delete node._state;
            delete this._originals[node._id];
            this._dataChanged();
        }
    },




    _doFilter: function () {
        if (!this._filterInfo) {
            this.dataview = this.source;
            return;
        }
        var fn = this._filterInfo[0], scope = this._filterInfo[1];
        var view = [];
        var data = this.source;
        for (var i = 0, l = data.length; i < l; i++) {
            var r = data[i];
            var add = fn.call(scope, r, i, this);
            if (add !== false) {
                view.push(r);
            }
        }
        this.dataview = view;
    },
    _doSort: function () {
        if (!this._sortInfo) return;
        var fn = this._sortInfo[0], scope = this._sortInfo[1], reverse = this._sortInfo[2];
        var dv = this.getDataView().clone();
        mini.sort(dv, fn, scope);
        if (reverse) dv.reverse();
        this.dataview = dv;
    }
});
mini.regClass(mini.DataTable, "datatable");




mini.DataTree = function () {
    mini.DataTree.superclass.constructor.call(this);
};
mini.extend(mini.DataTree, mini.DataSource, {
    isTree: true,

    expandOnLoad: false,

    idField: "id",
    parentField: "pid",
    nodesField: "children",
    resultAsTree: true,

    checkModel: "cascade",
    autoCheckParent: false,
    onlyLeafCheckable: false,

    setExpandOnLoad: function (value) {
        this.expandOnLoad = value;
    },
    getExpandOnLoad: function () {
        return this.expandOnLoad;
    },
    setParentField: function (value) {
        this.parentField = value;
    },
    setNodesField: function (value) {
        if (this.nodesField != value) {
            var data = this.root[this.nodesField];
            this.nodesField = value;
            this._doLoadData(data);
        }
    },
    setResultAsTree: function (value) {
        this.resultAsTree = value;
    },
    setCheckRecursive: function (value) {
        this.checkModel = value ? "cascade" : "multiple";
    },
    getCheckRecursive: function () {
        return this.checkModel == "cascade";
    },
    setShowFolderCheckBox: function (value) {
        this.onlyLeafCheckable = !value;
    },
    getShowFolderCheckBox: function () {
        return !this.onlyLeafCheckable;
    },

    _OnBeforeLoad: function (e) {
        var node = this._loadingNode || this.root;
        e.node = node;

        if (this.isNodeLoading()) {
            e.async = true;
            e.isRoot = e.node == this.root;
            if (!e.isRoot) {
                e.data[this.idField] = this.getItemValue(e.node);
            }
        }
        this.fire("beforeload", e);
    },
    _OnPreLoad: function (e) {

        if (this.resultAsTree == false) {
            e.data = mini.arrayToTree(e.data, this.nodesField, this.idField, this.parentField)
        }
        this.fire("preload", e);


        var nodesField = this.nodesField;
        var expandOnLoad = this.expandOnLoad;

        function eachNodes(nodes, level) {
            for (var i = 0, l = nodes.length; i < l; i++) {
                var node = nodes[i];

                if (expandOnLoad === true
                    || (mini.isNumber(expandOnLoad) && level <= expandOnLoad)) {
                    node.expanded = true;
                } else {
                    node.expanded = false;
                }

                var childs = node[nodesField];
                if (childs) {
                    eachNodes(childs, level + 1);
                }
            }
        }
        eachNodes(e.data, 0);

    },
    _init: function () {

        mini.DataTree.superclass._init.call(this);
        this.root = { _id: -1, _level: -1 };
        this.source = this.root[this.nodesField] = [];
        this.viewNodes = null;
        this.dataview = null;
        this.visibleRows = null;

        this._ids[this.root._id] = this.root;
    },
    _doLoadData: function (data) {

        this.source = this.root[this.nodesField] = data || [];
        this.viewNodes = null;
        this.dataview = null;
        this.visibleRows = null;


        var ds = mini.treeToArray(data, this.nodesField);
        var ids = this._ids;
        ids[this.root._id] = this.root;
        for (var i = 0, l = ds.length; i < l; i++) {
            var node = ds[i];

            node._id = mini.DataSource.RecordId++;
            ids[node._id] = node;


            node._uid = node._id;
        }


        var ds = mini.treeToArray(data, this.nodesField, "_id", "_pid", this.root._id);
        for (var i = 0, l = ds.length; i < l; i++) {
            var node = ds[i];
            var parentNode = this.getParentNode(node);
            node._pid = parentNode._id;
            node._level = parentNode._level + 1;
            delete node._state;
        }


        this._doUpdateLoadedCheckedNodes();
    },
    _setAdded: function (node) {
        var parentNode = this.getParentNode(node);
        node._id = mini.DataSource.RecordId++;


        node._uid = node._id;


        node._pid = parentNode._id;
        node[this.parentField] = parentNode[this.idField];
        node._level = parentNode._level + 1;
        node._state = "added";
        this._ids[node._id] = node;
        delete this._originals[node._id];
    },
    _createNodes: function (node) {
        var nodes = node[this.nodesField];
        if (!nodes) {
            nodes = node[this.nodesField] = [];

        }
        if (this.viewNodes && !this.viewNodes[node._id]) {
            this.viewNodes[node._id] = [];
        }
        return nodes;
    },

    addNode: function (node, parentNode) {
        if (!node) return;
        return this.insertNode(node, -1, parentNode);
    },
    addNodes: function (nodes, parentNode) {
        if (!mini.isArray(nodes)) return;
        return this.insertNodes(nodes, -1, parentNode);
    },
    insertNodes: function (nodes, index, parentNode) {
        if (!mini.isNumber(index)) return;
        if (!mini.isArray(nodes)) return;
        if (!parentNode) parentNode = this.root;
        this.beginChange();

        var pnodes = this._createNodes(parentNode);
        if (index < 0 || index > pnodes.length) index = pnodes.length;

        nodes = nodes.clone();
        for (var i = 0, l = nodes.length; i < l; i++) {
            this.insertNode(nodes[i], index + i, parentNode);
        }

        this.endChange();
        return nodes;
    },
    removeNode: function (node) {
        var parentNode = this.getParentNode(node);
        if (!parentNode) return;

        var nodes = this.getChildNodes(parentNode, false, false);
        var index = nodes.indexOf(node);



        return this.removeNodeAt(index, parentNode);
    },
    removeNodes: function (nodes) {
        if (!mini.isArray(nodes)) return;
        this.beginChange();
        nodes = nodes.clone();
        for (var i = 0, l = nodes.length; i < l; i++) {
            this.removeNode(nodes[i]);
        }
        this.endChange();
    },
    moveNodes: function (nodes, targetNode, action) {
        if (!nodes || nodes.length == 0 || !targetNode || !action) return;
        this.beginChange();
        var sf = this;
        mini.sort(nodes, function (a, b) {
            return sf.indexOf(a) > sf.indexOf(b);
        }, this);
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            this.moveNode(node, targetNode, action);
            if (i != 0) {
                targetNode = node;
                action = "after";
            }

        }
        this.endChange();
    },

    moveNode: function (node, targetNode, action) {
        if (!node || !targetNode || mini.isNull(action)) return;


        if (this.viewNodes) {
            var parentNode = targetNode;
            var index = action;
            if (index == 'before') {
                parentNode = this.getParentNode(targetNode);
                index = this.indexOfNode(targetNode);
            } else if (index == 'after') {
                parentNode = this.getParentNode(targetNode);
                index = this.indexOfNode(targetNode) + 1;
            } else if (index == 'add' || index == "append") {
                if (!parentNode[this.nodesField]) parentNode[this.nodesField] = [];
                index = parentNode[this.nodesField].length;
            } else if (!mini.isNumber(index)) {
                return;
            }
            if (this.isAncestor(node, parentNode)) {
                return false;
            }

            var childNodes = this.getChildNodes(parentNode);
            if (index < 0 || index > childNodes.length) index = childNodes.length;


            var ___node = {};
            childNodes.insert(index, ___node);


            var oldParentNode = this.getParentNode(node);
            var oldChildNodes = this.getChildNodes(oldParentNode);
            oldChildNodes.remove(node);


            index = childNodes.indexOf(___node);
            childNodes[index] = node;

        }

        var parentNode = targetNode;
        var index = action;
        var childNodes = this._createNodes(parentNode);

        if (index == 'before') {
            parentNode = this.getParentNode(targetNode);
            childNodes = this._createNodes(parentNode);
            index = childNodes.indexOf(targetNode);
        } else if (index == 'after') {
            parentNode = this.getParentNode(targetNode);
            childNodes = this._createNodes(parentNode);
            index = childNodes.indexOf(targetNode) + 1;
        } else if (index == 'add' || index == "append") {
            index = childNodes.length;
        } else if (!mini.isNumber(index)) {
            return;
        }
        if (this.isAncestor(node, parentNode)) {
            return false;
        }

        if (index < 0 || index > childNodes.length) index = childNodes.length;


        var ___node = {};
        childNodes.insert(index, ___node);


        var oldParentNode = this.getParentNode(node);
        oldParentNode[this.nodesField].remove(node);


        index = childNodes.indexOf(___node);
        childNodes[index] = node;


        this._updateParentAndLevel(node, parentNode);

        this._dataChanged();
        var e = {
            parentNode: parentNode,
            index: index,
            node: node
        };

        this.fire("movenode", e);
    },

    insertNode: function (node, index, parentNode) {
        if (!node) return;
        if (!parentNode) {
            parentNode = this.root;
            index = "add";
        }
        if (!mini.isNumber(index)) {
            switch (index) {
                case "before":
                    index = this.indexOfNode(parentNode);
                    parentNode = this.getParentNode(parentNode);
                    this.insertNode(node, index, parentNode);
                    break;
                case "after":
                    index = this.indexOfNode(parentNode);
                    parentNode = this.getParentNode(parentNode);
                    this.insertNode(node, index + 1, parentNode);
                    break;
                case "append":
                case "add":
                    this.addNode(node, parentNode);
                    break;
                default:
                    break;
            }
            return;
        };

        var nodes2 = this._createNodes(parentNode);
        var nodes = this.getChildNodes(parentNode);
        if (index < 0) index = nodes.length;

        nodes.insert(index, node);

        index = nodes.indexOf(node);












        if (this.viewNodes) {
            var nextNode = nodes[index + 1];
            if (nextNode) {
                var index2 = nodes2.indexOf(nextNode);
                nodes2.insert(index2, node);
            } else {
                nodes2.add(node);
            }
        }

        node._pid = parentNode._id;
        this._setAdded(node);
        this.cascadeChild(node, function (n, i, p) {
            n._pid = p._id;
            this._setAdded(n);
        }, this);

        this._dataChanged();
        var e = {
            parentNode: parentNode,
            index: index,
            node: node
        };
        this.fire("addnode", e);
        return node;
    },
    removeNodeAt: function (index, parentNode) {

        if (!parentNode) parentNode = this.root;

        var nodes = this.getChildNodes(parentNode, false, false);
        var node = nodes[index];
        if (!node) return null;

        nodes.removeAt(index);
        if (this.viewNodes) {
            var nodes2 = parentNode[this.nodesField];
            nodes2.remove(node);
        }

        this._setRemoved(node);
        this.cascadeChild(node, function (n, i, p) {
            this._setRemoved(n);
        }, this);

        this._checkSelecteds();

        this._dataChanged();
        var e = {
            parentNode: parentNode,
            index: index,
            node: node
        };
        this.fire("removenode", e);

        return node;
    },


    bubbleParent: function (node, fn, scope) {
        scope = scope || this;
        if (node) fn.call(this, node);
        var parentNode = this.getParentNode(node);
        if (parentNode && parentNode != this.root) {
            this.bubbleParent(parentNode, fn, scope);
        }
    },

    cascadeChild: function (node, fn, scope) {
        if (!fn) return;
        if (!node) node = this.root;
        var nodes = node[this.nodesField];
        if (nodes) {
            nodes = nodes.clone();
            for (var i = 0, l = nodes.length; i < l; i++) {
                var c = nodes[i];
                if (fn.call(scope || this, c, i, node) === false) return;
                this.cascadeChild(c, fn, scope);
            }
        }
    },

    eachChild: function (node, fn, scope) {
        if (!fn || !node) return;
        var nodes = node[this.nodesField];
        if (nodes) {
            var list = nodes.clone();
            for (var i = 0, l = list.length; i < l; i++) {
                var o = list[i];
                if (fn.call(scope || this, o, i, node) === false) break;
            }
        }
    },
    collapseLevel: function (level, deep) {
        this.beginChange();
        this.each(function (node) {
            var nodeLevel = this.getLevel(node);
            if (level == nodeLevel) {
                this.collapse(node, deep);
            }
        }, this);
        this.endChange();
    },
    expandLevel: function (level, deep) {
        this.beginChange();
        this.each(function (node) {
            var nodeLevel = this.getLevel(node);
            if (level == nodeLevel) {
                this.expand(node, deep);
            }
        }, this);
        this.endChange();
    },
    collapse: function (node, deep) {

        if (!node) return;
        this.beginChange();

        node.expanded = false;
        if (deep) {
            this.eachChild(node, function (o) {
                if (o[this.nodesField] != null) {
                    this.collapse(o, deep);
                }
            }, this);
        }

        this.endChange();

        var e = {
            node: node
        };
        this.fire("collapse", e);
    },
    expand: function (node, deep) {

        if (!node) return;
        this.beginChange();

        node.expanded = true;
        if (deep) {
            this.eachChild(node, function (o) {
                if (o[this.nodesField] != null) {
                    this.expand(o, deep);
                }
            }, this);
        }

        this.endChange();

        var e = {
            node: node
        };
        this.fire("expand", e);
    },
    toggle: function (node) {
        if (this.isExpandedNode(node)) this.collapse(node);
        else this.expand(node);
    },
    collapseAll: function () {
        this.collapse(this.root, true);
    },
    expandAll: function () {
        this.expand(this.root, true);
    },


    isAncestor: function (parentNode, node) {
        if (parentNode == node) return true;
        if (!parentNode || !node) return false;
        var as = this.getAncestors(node);
        for (var i = 0, l = as.length; i < l; i++) {
            if (as[i] == parentNode) return true;
        }
        return false;
    },

    getAncestors: function (node) {
        var as = [];
        while (1) {
            var parentNode = this.getParentNode(node);
            if (!parentNode || parentNode == this.root) break;
            as[as.length] = parentNode;
            node = parentNode;
        }
        as.reverse();
        return as;
    },
    getRootNode: function () {
        return this.root;
    },
    getParentNode: function (node) {

        if (!node) return null;
        return this.getby_id(node._pid);
    },
    getAllChildNodes: function (node) {
        return this.getChildNodes(node, true);
    },
    getChildNodes: function (node, all, useView) {
        var nodes = node[this.nodesField];


        if (this.viewNodes && useView !== false) {
            nodes = this.viewNodes[node._id];
        }




        if (all === true && nodes) {
            var view = [];
            for (var i = 0, l = nodes.length; i < l; i++) {
                var cnode = nodes[i];
                view[view.length] = cnode;
                var cnodes = this.getChildNodes(cnode, all, useView);
                if (cnodes && cnodes.length > 0) {
                    view.addRange(cnodes);
                }
            }
            nodes = view;
        }
        return nodes || [];
    },
    getChildNodeAt: function (index, node) {
        var nodes = this.getChildNodes(node);
        if (nodes) return nodes[index];
        return null;
    },

    hasChildNodes: function (node) {
        var nodes = this.getChildNodes(node);
        return nodes.length > 0;
    },
    getNodeLevel: function (node) {
        return node._level;
    },
    getLevel: function (node) {
        return node._level;
    },



    isLeafNode: function (node) {
        return this.isLeaf(node);
    },
    isLeaf: function (node) {
        if (!node || node.isLeaf === false) return false;
        var nodes = this.getChildNodes(node);
        if (nodes.length > 0) return false;
        return true;
    },
    hasChildren: function (node) {
        var subNodes = this.getChildNodes(node);
        return !!(subNodes && subNodes.length > 0);
    },
    isFirstNode: function (node) {
        if (node == this.root) return true;
        var parentNode = this.getParentNode(node);
        if (!parentNode) return false;
        return this.getFirstNode(parentNode) == node;
    },
    isLastNode: function (node) {
        if (node == this.root) return true;
        var parentNode = this.getParentNode(node);
        if (!parentNode) return false;
        return this.getLastNode(parentNode) == node;
    },
    isCheckedNode: function (node) {
        return node.checked === true;
    },
    isExpandedNode: function (node) {
        return node.expanded == true || node.expanded == 1 || mini.isNull(node.expanded);
    },
    isVisible: function (node) {
        var pnode = this._ids[node._pid];
        if (!pnode || pnode == this.root) return true;
        if (pnode.expanded === false) return false;
        return this.isVisible(pnode);
    },
    getNextNode: function (node) {
        var parentNode = this.getby_id(node._pid);
        if (!parentNode) return null;
        var index = this.indexOfNode(node);
        return this.getChildNodes(parentNode)[index + 1];
    },
    getPrevNode: function (node) {
        var parentNode = this.getby_id(node._pid);
        if (!parentNode) return null;
        var index = this.indexOfNode(node);
        return this.getChildNodes(parentNode)[index - 1];
    },
    getFirstNode: function (parentNode) {
        return this.getChildNodes(parentNode)[0];
    },
    getLastNode: function (parentNode) {
        var nodes = this.getChildNodes(parentNode);
        return nodes[nodes.length - 1];
    },
    indexOfNode: function (node) {
        var parentNode = this.getby_id(node._pid);
        if (parentNode) {
            return this.getChildNodes(parentNode).indexOf(node);
        }
        return -1;
    },
    getAt: function (index) {
        return this.getDataView()[index];
    },
    indexOf: function (record) {
        return this.getDataView().indexOf(record);
    },
    getRange: function (start, end) {
        if (start > end) {
            var t = start;
            start = end;
            end = t;
        }
        var data = this.getChildNodes(this.root, true);
        var range = [];
        for (var i = start, l = end; i <= l; i++) {
            var o = data[i];
            if (o) {
                range.push(o);
            }
        }
        return range;
    },
    selectRange: function (start, end) {
        var data = this.getChildNodes(this.root, true);
        if (!mini.isNumber(start)) start = data.indexOf(start);
        if (!mini.isNumber(end)) end = data.indexOf(end);
        if (mini.isNull(start) || mini.isNull(end)) return;

        var rs = this.getRange(start, end);
        this.selects(rs);
    },
    findRecords: function (property, value) {
        var data = this.toArray();

        var ifFn = typeof property == "function";
        var fn = property;
        var scope = value || this;
        var records = [];
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];

            if (ifFn) {
                var ret = fn.call(scope, o);
                if (ret == true) {
                    records[records.length] = o;
                }
                if (ret === 1) break;
            } else {
                if (o[property] == value) {
                    records[records.length] = o;
                }
            }
        }
        return records;
    },

    _dataChangedCount: 0,
    _dataChanged: function () {
        this._dataChangedCount++;
        this.dataview = null;
        this.visibleRows = null;
        if (this.__changeCount == 0) {
            this.fire("datachanged");
        }
    },
    _createDataView: function () {

        var data = this.getChildNodes(this.root, true);
        return data;
    },
    _createVisibleRows: function () {

        var data = this.getChildNodes(this.root, true);

        var view = [];
        for (var i = 0, l = data.length; i < l; i++) {
            var node = data[i];
            if (this.isVisible(node)) view[view.length] = node;
        }
        return view;
    },
    getList: function () {

        return mini.treeToList(this.source, this.nodesField);
    },
    getDataView: function () {
        if (!this.dataview) {
            this.dataview = this._createDataView();
        }
        return this.dataview;
    },
    getVisibleRows: function () {
        if (!this.visibleRows) {
            this.visibleRows = this._createVisibleRows();
        }
        return this.visibleRows;
    },

    _doFilter: function () {
        if (!this._filterInfo) {
            this.viewNodes = null;
            return;
        }

        var fn = this._filterInfo[0], scope = this._filterInfo[1];

        var viewNodes = this.viewNodes = {}, nodesField = this.nodesField;
        function filter(node) {
            var nodes = node[nodesField];
            if (!nodes) return false;
            var id = node._id;
            var views = viewNodes[id] = [];

            for (var i = 0, l = nodes.length; i < l; i++) {
                var r = nodes[i];
                var cadd = filter(r);
                var add = fn.call(scope, r, i, this);
                if (add === true || cadd) {
                    views.push(r);
                }

            }
            return views.length > 0;
        }
        filter(this.root);
    },
    _doSort: function () {
        if (!this._filterInfo && !this._sortInfo) {
            this.viewNodes = null;
            return;
        }
        if (!this._sortInfo) return;
        var fn = this._sortInfo[0], scope = this._sortInfo[1], reverse = this._sortInfo[2];
        var nodesField = this.nodesField;
        if (!this.viewNodes) {
            var viewNodes = this.viewNodes = {};

            viewNodes[this.root._id] = this.root[nodesField].clone();
            this.cascadeChild(this.root, function (node, i, p) {
                var nodes = node[nodesField];
                if (nodes) {
                    viewNodes[node._id] = nodes.clone();
                }
            });
        }

        var sf = this;
        function sort(node) {
            var nodes = sf.getChildNodes(node);
            mini.sort(nodes, fn, scope);
            if (reverse) nodes.reverse();
            for (var i = 0, l = nodes.length; i < l; i++) {
                var r = nodes[i];
                sort(r);
            }
        };
        sort(this.root);
    },


    toArray: function () {


        if (!this._array || this._dataChangedCount != this._dataChangedCount2) {
            this._dataChangedCount2 = this._dataChangedCount;
            this._array = this.getChildNodes(this.root, true, false);
        }



        return this._array;
    },
    toTree: function () {
        return this.root[this.nodesField];
    },

    getChanges: function (rowState, onlyField) {
        var changes = [];
        if (rowState == "removed" || rowState == null) {
            changes.addRange(this._removeds.clone());
        }
        this.cascadeChild(this.root, function (record, i, p) {
            if (record._state == null || record._state == "") return;
            if (record._state == rowState || rowState == null) {
                changes[changes.length] = record;
            }
        }, this);

        var rows = changes;
        if (onlyField) {
            for (var i = 0, l = rows.length; i < l; i++) {
                var row = rows[i];
                if (row._state == "modified") {
                    var newRow = {};
                    newRow._state = row._state;
                    newRow[this.idField] = row[this.idField];
                    for (var field in row) {
                        var modifed = this.isModified(row, field);
                        if (modifed) {
                            newRow[field] = row[field];
                        }
                    }
                    rows[i] = newRow;
                }
            }
        }

        return changes;
    },

    accept: function (node) {
        node = node || this.root;
        this.beginChange();
        this.cascadeChild(this.root, function (node) {
            this.acceptRecord(node);
        }, this);
        this._removeds = [];
        this._originals = {};
        this.endChange();
    },
    reject: function (node) {
        this.beginChange();
        this.cascadeChild(this.root, function (node) {
            this.rejectRecord(node);
        }, this);
        this._removeds = [];
        this._originals = {};
        this.endChange();
    },
    acceptRecord: function (node) {
        delete this._originals[node._id];
        if (node._state == "deleted") {
            this.removeNode(node);
        } else {
            delete node._state;
            delete this._originals[node._id];
            this._dataChanged();
        }
    },
    rejectRecord: function (node) {
        if (node._state == "added") {
            this.removeNode(node);
        } else if (node._state == "modified" || node._state == "deleted") {
            var or = this._getOriginal(node);
            mini.copyTo(node, or);
            delete node._state;
            delete this._originals[node._id];
            this._dataChanged();
        }
    },


    upGrade: function (task) {
        var parentTask = this.getParentNode(task);
        if (parentTask == this.root || task == this.root) {
            return false;
        }


        var pNodes = parentTask[this.nodesField];

        var index = pNodes.indexOf(task);
        var appendIndex = task[this.nodesField] ? task[this.nodesField].length : 0;

        for (var i = pNodes.length - 1; i >= index; i--) {
            var o = pNodes[i];
            pNodes.removeAt(i);
            if (o != task) {
                if (!task[this.nodesField]) task[this.nodesField] = [];
                task[this.nodesField].insert(appendIndex, o);
            }
        }

        var pparentTask = this.getParentNode(parentTask);
        var ppNodes = pparentTask[this.nodesField];
        var index = ppNodes.indexOf(parentTask);
        ppNodes.insert(index + 1, task);


        this._updateParentAndLevel(task, pparentTask);

        this._doFilter();

        this._dataChanged();
    },
    downGrade: function (node) {

        if (this.isFirstNode(node)) {
            return false;
        }

        var oldParentNode = this.getParentNode(node);

        var opNodes = oldParentNode[this.nodesField];

        var index = opNodes.indexOf(node);

        var parentNode = opNodes[index - 1];


        opNodes.removeAt(index);
        if (!parentNode[this.nodesField]) parentNode[this.nodesField] = [];
        parentNode[this.nodesField].add(node);


        this._updateParentAndLevel(node, parentNode);



        this._doFilter();

        this._dataChanged();


    },

    _updateParentAndLevel: function (node, parentNode) {
        node._pid = parentNode._id;
        node._level = parentNode._level + 1;
        this.cascadeChild(node, function (n, i, p) {
            n._pid = p._id;
            n._level = p._level + 1;

            n[this.parentField] = p[this.idField];
        }, this);
        this._setModified(node);
    },



    setCheckModel: function (value) {
        this.checkModel = value;
    },
    getCheckModel: function () {
        return this.checkModel;
    },
    setOnlyLeafCheckable: function (value) {
        this.onlyLeafCheckable = value;
    },
    getOnlyLeafCheckable: function () {
        return this.onlyLeafCheckable;
    },
    setAutoCheckParent: function (value) {
        this.autoCheckParent = value;
    },
    getAutoCheckParent: function () {
        return this.autoCheckParent;
    },
    _doUpdateLoadedCheckedNodes: function () {

        var nodes = this.getAllChildNodes(this.root);
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            if (node.checked == true) {

                this._doUpdateNodeCheckState(node);
            }
        }

    },
    _doUpdateNodeCheckState: function (node) {


        if (!node) return;
        var checked = this.isChecked(node);
        if (this.checkModel == "cascade") {

            this.cascadeChild(node, function (cnode) {
                var checkable = this.getCheckable(cnode);
                if (checkable) {
                    this.doCheckNodes(cnode, checked);
                }
            }, this);

            if (!this.autoCheckParent) {
                var ans = this.getAncestors(node);
                ans.reverse();
                for (var i = 0, l = ans.length; i < l; i++) {
                    var pnode = ans[i];
                    var checkable = this.getCheckable(pnode);
                    if (checkable == false) return;
                    var childNodes = this.getChildNodes(pnode);
                    var checkAll = true;
                    for (var ii = 0, ll = childNodes.length; ii < ll; ii++) {
                        var cnode = childNodes[ii];
                        if (!this.isCheckedNode(cnode)) {
                            checkAll = false;
                        }
                    }
                    if (checkAll) this.doCheckNodes(pnode, true);
                    else {
                        this.doCheckNodes(pnode, false);
                    }

                    this.fire("checkchanged", { nodes: [pnode], _nodes: [pnode] });
                }
            }
        }
        if (this.autoCheckParent && checked) {

            var ans = this.getAncestors(node);
            ans.reverse();
            for (var i = 0, l = ans.length; i < l; i++) {
                var pnode = ans[i];
                var checkable = this.getCheckable(pnode);
                if (checkable == false) return;
                pnode.checked = true;
                this.fire("checkchanged", { nodes: [pnode], _nodes: [pnode] });
            }
        }
    },
    doCheckNodes: function (nodes, checked, cascade) {

        if (!nodes) return;
        if (typeof nodes == "string") {
            nodes = nodes.split(",");
        }
        if (!mini.isArray(nodes)) nodes = [nodes];
        nodes = nodes.clone();
        var _nodes = [];
        checked = checked !== false;

        if (cascade === true) {
            if (this.checkModel == "single") {
                this.uncheckAllNodes();
            }
        }
        for (var i = nodes.length - 1; i >= 0; i--) {
            var node = this.getRecord(nodes[i]);
            if (
                !node
                || (checked && node.checked === true)
                || (!checked && node.checked !== true)
            ) {
                if (node) {
                    if (cascade === true) {
                        this._doUpdateNodeCheckState(node);
                    }
                }
                continue;
            }
            node.checked = checked;
            _nodes.push(node);
            if (cascade === true) {
                this._doUpdateNodeCheckState(node);
            }

        }

        var me = this;
        setTimeout(function () {
            me.fire("checkchanged", { nodes: nodes, _nodes: _nodes, checked: checked });
        }, 1);
    },
    checkNode: function (node) {
        this.doCheckNodes([node], true, true);
    },
    uncheckNode: function (node) {
        this.doCheckNodes([node], false, true);
    },
    checkNodes: function (nodes) {
        if (!mini.isArray(nodes)) nodes = [];
        this.doCheckNodes(nodes, true, true);
    },
    uncheckNodes: function (nodes) {
        if (!mini.isArray(nodes)) nodes = [];
        this.doCheckNodes(nodes, false, true);
    },
    checkAllNodes: function () {
        var nodes = this.getList();
        this.doCheckNodes(nodes, true);
    },
    uncheckAllNodes: function () {
        var nodes = this.getList();
        this.doCheckNodes(nodes, false);
    },

    getCheckedNodes: function (mode) {
        var nodes = [];
        this.cascadeChild(this.root, function (node) {
            if (node.checked == true) {
                var isLeaf = this.isLeafNode(node);
                if (mode == "parent") {
                    if (!isLeaf) {
                        nodes.push(node);
                    }
                } else if (node == "leaf") {
                    if (isLeaf) {
                        nodes.push(node);
                    }
                } else {
                    nodes.push(node);
                }
            }
        }, this);
        return nodes;
    },
    getCheckedNodesId: function (mode, delimiter) {
        var nodes = this.getCheckedNodes(mode);
        var vts = this.getValueAndText(nodes, delimiter);
        return vts[0];
    },
    getCheckedNodesText: function (mode, delimiter) {
        var nodes = this.getCheckedNodes(mode);
        var vts = this.getValueAndText(nodes, delimiter);
        return vts[1];
    },
    isChecked: function (node) {
        node = this.getRecord(node);
        if (!node) return null;
        return node.checked === true;
    },
    getCheckState: function (node) {

        node = this.getRecord(node);
        if (!node) return null;
        if (node.checked === true) return "checked";
        if (!node[this.nodesField]) return "unchecked";
        var children = this.getChildNodes(node);
        for (var i = 0, l = children.length; i < l; i++) {
            var node = children[i];
            if (node.checked === true) return "indeterminate";
        }
        return "unchecked";
    },
    getUnCheckableNodes: function () {
        var nodes = [];
        this.cascadeChild(this.root, function (node) {
            var checkable = this.getCheckable(node);
            if (checkable == false) {
                nodes.push(node);
            }
        }, this);
        return nodes;
    },
    setCheckable: function (nodes, checkable) {
        if (!nodes) return;
        if (!mini.isArray(nodes)) nodes = [nodes];
        nodes = nodes.clone();
        checkable = !!checkable;
        for (var i = nodes.length - 1; i >= 0; i--) {
            var node = this.getRecord(nodes[i]);
            if (!node) {
                continue;
            }
            node.checkable = checked;
        }

    },
    getCheckable: function (node) {
        node = this.getRecord(node);
        if (!node) return false;
        if (node.checkable === true) return true;
        if (node.checkable === false) return false;
        return this.isLeafNode(node) ? true : !this.onlyLeafCheckable;
    },
    showNodeCheckbox: function (node, show) {

    },

    isNodeLoading: function () {
        return !!this._loadingNode;
    },
    loadNode: function (node, expand) {
        this._loadingNode = node;
        var e = { node: node };
        this.fire("beforeloadnode", e);


        var time = new Date();

        var me = this;
        me._doLoadAjax(me.loadParams, null, null, null, function (e) {
            var t = new Date() - time;
            if (t < 60) t = 60 - t;

            setTimeout(function () {
                e.node = me._loadingNode;
                me._loadingNode = null;

                var oldNodes = node[me.nodesField];
                me.removeNodes(oldNodes);

                var nodes = e.data;
                if (nodes && nodes.length > 0) {
                    me.addNodes(nodes, node);
                    if (expand !== false) {
                        me.expand(node, true);
                    } else {
                        me.collapse(node, true);
                    }
                } else {
                    delete node.isLeaf;
                }
                me.fire("loadnode", { node: node });
            }, t);
        }, true);
    }
});
mini.regClass(mini.DataTree, "datatree");





mini.SuperGrid = function () {
    mini.SuperGrid.superclass.constructor.call(this);

    this.columns = [];
    this.viewColumns = [];
    this.setData([]);
}
mini.extend(mini.SuperGrid, mini.Control, {
    width: 300,
    height: 150,

    virtualModel: false,
    data: null,

    _rowIdField: "_id",

    editOnDblClick: false,

    multiSelect: false,
    allowRowSelect: true,
    allowCellSelect: true,
    allowAlternating: true,
    allowResizeColumn: true,
    allowMoveColumn: true,
    allowSortColumn: true,
    allowDragDrop: false,
    showDirty: true,

    allowUnselect: false,

    scrollLeft: 0,
    scrollTop: 0,
    scrollWidth: 0,
    scrollHeight: 0,
    headerHeight: 23,
    showHScroll: true,
    showVScroll: true,

    columnWidth: 100,
    rowHeight: 21,
    columnMinWidth: 10,
    columnMaxWidth: 800,

    enterEditAction: "nextrowcell",


    _rowCls: "mini-supergrid-row",
    cellCls: "mini-supergrid-cell",
    _rowSelectedCls: 'mini-supergrid-rowselected',
    cellSelectedCls: 'mini-supergrid-cellselected',
    _alternatingCls: 'mini-supergrid-alternating',

    scrollIntoView: function (record) {
        var list = this.data.getVisibleRows();
        var index = list.indexOf(record);
        var top = index * this.rowHeight;
        this.setScrollTop(top);
    },

    uiCls: "mini-supergrid",
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-supergrid";

        var s = '<div class="mini-supergrid-border">' +
                    '<div class="mini-supergrid-header"></div>' +
                    '<div class="mini-supergrid-viewport">' +
                        '<div class="mini-supergrid-cells"></div>' +
                        '<div class="mini-supergrid-lockedcells"></div>' +
                        '<div class="mini-supergrid-tooltip"></div>' +
                    '</div>' +
                    '<div class="mini-supergrid-hscroller"><div class="mini-supergrid-hscrollercontent"></div></div>' +
                    '<div class="mini-supergrid-vscroller"><div class="mini-supergrid-vscrollercontent"></div></div>' +
                '</div>';
        this.el.innerHTML = s;

        this.el.tabIndex = 0;

        this._borderEl = this.el.firstChild;

        this._headerEl = this._borderEl.firstChild;

        this._viewportEl = this._borderEl.childNodes[1];
        this.cellsEl = this._viewportEl.childNodes[0];
        this.lockedcellsEl = this._viewportEl.childNodes[1];

        this.tooltipEl = this._viewportEl.childNodes[2];
        this.tooltipEl.style.display = "none";
        var sf = this;




        this.hscrollerEl = this._borderEl.childNodes[2];
        this.vscrollerEl = this._borderEl.childNodes[3];
        this.hscrollerContentEl = this.hscrollerEl.firstChild;
        this.vscrollerContentEl = this.vscrollerEl.firstChild;


        this._Select = new mini._SuperGridSelect(this);
        this._Splitter = new mini._SuperGridSplitter(this);
        this._ColumnDragger = new mini._SuperGridColumnMove(this);
        this._Sort = new mini._SuperGridSort(this);
        this._DragDrop = new mini._GridDragDrop(this);
    },
    _initEvents: function () {


        mini.on(this.el, 'click', this.__OnClick, this);
        mini.on(this.el, 'dblclick', this.__OnDblClick, this);
        mini.on(this.el, 'mousedown', this.__OnMouseDown, this);
        mini.on(this.el, 'mousewup', this.__OnMouseUp, this);
        mini.on(this.el, 'contextmenu', this.__OnContextMenu, this);
        mini.on(this.el, 'keydown', this.__OnKeyDown, this);

        mini.on(this.el, "mousewheel", this.__OnMousewheel, this);


        mini.on(this.hscrollerEl, "scroll", this.__OnHScroll, this);
        mini.on(this.vscrollerEl, "scroll", this.__OnVScroll, this);


        if (mini.isFirefox) {
            var sf = this;

            function onmouseup() {

                document.onmouseup = null;


                sf.refreshScrollComplete = false;
                sf.setScrollTop(sf.vscrollerEl.scrollTop, true);

                sf.fire("scroll", {
                    direction: "vertical"
                });
            }
            this.vscrollerEl.onmousedown = function (e) {
                sf.refreshScrollComplete = true;
                sf.tooltipEl.style.display = "block";
                document.onmouseup = onmouseup;
            }
        } else if (!mini.isOpera) {
            var sf = this;
            function onvscrollmousemove() {

                document.onmousemove = null;


                sf.refreshScrollComplete = false;

                sf.setScrollTop(sf.vscrollerEl.scrollTop, true);
                sf.fire("scroll", {
                    direction: "vertical"
                });

            }
            this.vscrollerEl.onmousedown = function (e) {
                sf.refreshScrollComplete = true;
                sf.tooltipEl.style.display = "block";
                document.onmousemove = onvscrollmousemove;
            }
        }
    },
    doLayout: function () {
        if (!this.canLayout()) return;



        var h = this.getHeight(true);
        var w = this.getWidth(true);


        mini.setHeight(this._headerEl, this.headerHeight);

        var vh = this.getViewportHeight();
        mini.setHeight(this._viewportEl, vh);

        this.viewportWidth = this.getViewportWidth();
        this.viewportHeight = this.getViewportHeight();




        if (this.showHScroll) {
            this.hscrollerEl.style.bottom = 0;
        } else {
            this.hscrollerEl.style.bottom = '-2000px';
        }
        if (this.showVScroll) {
            this.vscrollerEl.style.right = 0;
        } else {
            this.vscrollerEl.style.right = '-2000px';
        }

        this.vscrollerEl.style.top = this.getHeaderHeight() + "px";
        this.vscrollerEl.style.height = this.getVScrollHeight() + "px";
        this.hscrollerEl.style.width = this.getHScrollWidth() + "px";

        var scrollWidth = this.getViewScrollWidth();

        this.hscrollerContentEl.style.width = scrollWidth + "px";
        this.vscrollerContentEl.style.height = this.scrollHeight + "px";

        this.cellsEl.style.width = this.viewportWidth + "px";
        this.cellsEl.style.height = this.viewportHeight + "px";

        this.scrollLeft = this.hscrollerEl.scrollLeft;
        this.scrollTop = this.vscrollerEl.scrollTop;
        var vwidth = this.getHScrollWidth();
        if (this.scrollLeft > this.scrollWidth - vwidth) this.scrollLeft = this.scrollWidth - vwidth;



        var aw = this.getAllFrozenColumnWidth();
        this.cellsEl.style.left = aw + "px";
        this.lockedcellsEl.style.width = aw + "px";
        this.lockedcellsEl.style.height = this.viewportHeight + "px";

        this._refreshViewport(true);




    },

    setScrollLeft: function (value) {
        if (value < 0) value = 0;
        if (value > this.scrollWidth) value = this.scrollWidth;
        if (this.scrollLeft != value) {

            this.allowScroll = false;
            this.hscrollerEl.scrollLeft = value;

            this.scrollLeft = this.hscrollerEl.scrollLeft;

            this.allowScroll = true;


            this.inMaxLeft = (this.scrollLeft + parseInt(this.hscrollerEl.style.width)) == this.scrollWidth;


            this._refreshViewport();

        }
    },
    setScrollTop: function (value, must) {
        if (value < 0) value = 0;
        if (value > this.scrollHeight) value = this.scrollHeight;
        if (this.scrollTop != value || must === true) {
            this.scrollTop = value;

            this.allowScroll = false;
            this.vscrollerEl.scrollTop = value;
            if (this.isDisplay() && this.vscrollerEl.style.display != "none") {
                this.scrollTop = this.vscrollerEl.scrollTop;
            }
            this.allowScroll = true;

            this.inMaxTop = (this.scrollTop + parseInt(this.vscrollerEl.style.height)) == this.scrollHeight;


            if (this.virtualModel == false) {
                this._refreshViewport();
            }
        }
        this.tooltipEl.style.display = "none";
    },
    getScrollTop: function () {
        return this.scrollTop;
    },
    getScrollLeft: function () {
        return this.scrollLeft;
    },
    setScrollHeight: function (value) {
        value = parseInt(value);
        if (isNaN(value)) value = 0;
        if (this.scrollHeight != value) {
            this.scrollHeight = value;
            this.layoutChanged();
        }
    },
    setShowHScroll: function (value) {
        if (this.showHScroll != value) {
            this.showHScroll = value;
            this.layoutChanged();
        }
    },
    setShowVScroll: function (value) {
        if (this.showVScroll != value) {
            this.showVScroll = value;
            this.layoutChanged();
        }
    },

    setData: function (data) {
        if (this.data == data) return;
        if (typeof data == "string") {
            data = mini.get(data);
        }
        if (!data) data = [];

        data = this._getSource(data);

        if (this.data) this._unbindSource();
        if (this.data) this.data.destroy();
        this.data = data;
        this._bindSource();

        this.fire('datachanged');

        this.__OnDataChanged();
    },
    getVisibleRows: function () {
        return this.data.getVisibleRows();
    },
    _getSource: function (data) {
        if (!mini.isArray(data)) return data;
        var dataTable = new mini.DataTable();
        dataTable.loadData(data);
        return dataTable;
    },
    _bindSource: function () {
        this.data.on('datachanged', this.__OnDataChanged, this);
        this.data.on('SelectionChanged', this.__OnDataSelectionChanged, this);
        this.data.setMultiSelect(this.multiSelect);

        this.data.on('collapse', this.__OnTreeCollapse, this);
        this.data.on('expand', this.__OnTreeExpand, this);
    },
    _unbindSource: function () {
        this.data.un('datachanged', this.__OnDataChanged, this);
        this.data.un('SelectionChanged', this.__OnDataSelectionChanged, this);

        this.data.un('collapse', this.__OnTreeCollapse, this);
        this.data.un('expand', this.__OnTreeExpand, this);
    },

    __OnDataChanged: function (e) {

        if (this._commitEditing !== true) {

            this.cancelEdit();
        }


        var data = this.getVisibleRows();
        var scrollHeight = 0;
        for (var i = 0, l = data.length; i < l; i++) {
            var r = data[i];
            var h = parseInt(mini.isNull(r._height) ? this.rowHeight : r._height);
            if (isNaN(h)) h = this.rowHeight;
            scrollHeight += h;
        }
        if (this.virtualModel == false) {
            this.scrollHeight = scrollHeight;
        }


        this.vscrollerContentEl.style.height = this.scrollHeight + "px";


        this._refreshViewport(true);

    },
    __OnDataSelectionChanged: function (e) {
        var data = this.getVisibleRows();
        if (!this.viewRegion) return;

        var views = {};
        for (var i = this.viewRegion.startRow, l = this.viewRegion.endRow; i <= l; i++) {
            var record = data[i];
            if (!record) continue;
            views[record._id] = record;
        }

        var grid = this;
        var removes = [];

        var dataSource = this.data;
        var rows = e.records;
        for (var i = 0, l = rows.length; i < l; i++) {
            var record = rows[i];
            if (!views[record._id]) {
                continue;
            }





            if (e.select) {
                this.addRowCls(record, this._rowSelectedCls);
            } else {


                this.removeRowCls(record, this._rowSelectedCls);
            }

        }








        this.fire("selectionchanged", e);
        var e = {
            sender: this,
            selecteds: this.getSelecteds(),
            selected: this.getSelected()
        };
        var bottomColumns = this.columns;
        for (var i = 0, l = bottomColumns.length; i < l; i++) {
            var column = bottomColumns[i];
            if (column.onselectionchanged) {

                column.onselectionchanged.call(this, e);
            }
        }
    },
    refresh: function () {

        this.scrollWidth = this.getAllColumnWidth();


        this.doLayout();
    },
    _createHeaderCell: function (col) {
        var s = col.header;
        if (typeof s == "function") s = s.call(this, col);
        if (mini.isNull(s)) {
            s = '&nbsp;';
        }
        return s;
    },
    _refreshHeader: function () {
        var sb = [];
        var columns = this.viewColumns;
        var left = 0;

        var region = this.viewRegion;
        var startRow = region.startRow, endRow = region.endRow,
            startColumn = region.startColumn, endColumn = region.endColumn;

        var grid = this;

        var boxModel = jQuery.boxModel;

        function drawColumn(column, index) {
            var width = column.width;
            sb[sb.length] = '<div id="';
            sb[sb.length] = column._id;
            sb[sb.length] = '" class="mini-supergrid-headercell ';
            if (column.headerCls) sb[sb.length] = column.headerCls;

            if (index == this.frozenEndColumn) {
                sb[sb.length] = "mini-supergrid-frozenCell ";
            }

            sb[sb.length] = '" style="left:';
            sb[sb.length] = left;
            sb[sb.length] = 'px;width:';
            sb[sb.length] = boxModel ? width - 1 : width;
            sb[sb.length] = 'px;height:';
            sb[sb.length] = boxModel ? this.headerHeight - 1 : this.headerHeight;

            sb[sb.length] = 'px;';

            if (column.headerAlign) {
                sb[sb.length] = "text-align:"
                sb[sb.length] = column.headerAlign || "left";
                sb[sb.length] = ";";
            }
            if (column.headerStyle) sb[sb.length] = column.headerStyle;

            sb[sb.length] = '"><div class="mini-supergrid-headercell-inner" style="line-height:' + (this.headerHeight) + 'px;">';
            sb[sb.length] = this._createHeaderCell(column);
            sb[sb.length] = '</div></div>';

            left += width;


            if (this.allowResizeColumn && column.allowResize) {
                sb[sb.length] = '<div cid="';
                sb[sb.length] = column._id;
                sb[sb.length] = '" class="mini-supergrid-splitter" style="left:';
                sb[sb.length] = left - 3;
                sb[sb.length] = 'px;height:';
                sb[sb.length] = this.headerHeight;
                sb[sb.length] = 'px;top:0px;"></div>';
            }
        }


        if (this.isFrozen()) {
            for (var i = this.frozenStartColumn, l = this.frozenEndColumn; i <= l; i++) {
                var column = columns[i];
                if (column) {
                    drawColumn.call(this, column, i);
                }
            }

        }
        var append = false;
        for (var i = startColumn, l = endColumn; i <= l; i++) {
            var column = columns[i];
            if (column) {
                append = true;
                drawColumn.call(this, column, i);
            }
        }

        if (append) {
            sb[sb.length] = '<div class="mini-supergrid-headercell" style="left:' + left + 'px;width:500px;height:' + this.headerHeight + 'px;"></div>';
        }
        this._headerEl.innerHTML = sb.join("");
    },
    _refreshViewport: function (must) {

        if (this.refreshTimer) clearTimeout(this.refreshTimer);
        var sf = this;
        this.refreshTimer = setTimeout(function () {
            sf._doRefreshViewport(must);
        }, 1);
    },
    _doRefreshViewport: function (must) {

        var rowHeight = this.rowHeight, columnWidth = this.columnWidth;
        var data = this.getVisibleRows();
        var columns = this.viewColumns;
        var dataSource = this.data;


        var region = this.markRegion();
        this.viewRegion = region;



        if (this._lastRegion && must === false) {
            if (this._lastRegion.startRow == region.startRow
                && this._lastRegion.endRow == region.endRow
                && this._lastRegion.startColumn == region.startColumn
                && this._lastRegion.endColumn == region.endColumn
                ) {
                return;
            }
        }

        this._lastRegion = region;


        this._refreshHeader();


        var startRow = region.startRow, endRow = region.endRow,
            startColumn = region.startColumn, endColumn = region.endColumn;

        var currentRecord = this.currentCell ? this.currentCell.record : null;
        var currentColumn = this.currentCell ? this.currentCell.column : null;

        var boxModel = jQuery.boxModel;


        function drawRows(startColumn, endColumn, isFrozen) {
            var sb = [];
            var top = 0;
            for (var i = startRow, l = endRow; i <= l; i++) {
                var record = data[i];
                if (!record) continue;
                var h = record._height ? record._height : rowHeight;

                var rowClsIndex = -1;
                var rowCls = " ";
                var rowStyleIndex = -1;
                var rowStyle = " ";

                var cls = "mini-supergrid-row";
                if (this.allowAlternating && i % 2 == 1) {
                    cls += " " + this._alternatingCls;
                }

                var isSelected = dataSource.isSelected(record);
                if (isSelected) cls += " " + this._rowSelectedCls;

                sb[sb.length] = '<div id="';
                sb[sb.length] = this._createRowId(record, isFrozen);
                sb[sb.length] = '" class="';
                sb[sb.length] = cls;
                sb[sb.length] = ' ';

                rowClsIndex = sb.length;
                sb[rowClsIndex] = rowCls;

                sb[sb.length] = '" style="top:';
                sb[sb.length] = top;
                sb[sb.length] = 'px;height:';
                sb[sb.length] = h;
                sb[sb.length] = 'px;';

                rowStyleIndex = sb.length;
                sb[rowStyleIndex] = rowStyle;

                sb[sb.length] = '">';

                var left = 0;
                for (var j = startColumn, k = endColumn; j <= k; j++) {
                    var column = columns[j];
                    if (!column) continue;
                    var w = column.width;

                    var e = this._OnDrawCell(record, column, i, j);

                    sb[sb.length] = '<div  id="';
                    sb[sb.length] = this._createCellId(record, column);
                    sb[sb.length] = '" class="mini-supergrid-cell ';

                    if (isFrozen && j == this.frozenEndColumn) {
                        sb[sb.length] = "mini-supergrid-frozenCell ";
                    }

                    var dirty = this.showDirty ? dataSource.isModified(record, column.field) : false;
                    if (dirty) {
                        sb[sb.length] = "mini-supergrid-cell-dirty ";
                    }

                    if (currentRecord == record && currentColumn == column) {
                        sb[sb.length] = this.cellSelectedCls + " ";
                    }
                    if (e.cellCls) sb[sb.length] = e.cellCls;
                    sb[sb.length] = '" style="left:';
                    sb[sb.length] = left;
                    sb[sb.length] = 'px;width:';
                    sb[sb.length] = boxModel ? w - 1 : w;
                    sb[sb.length] = 'px;height:';
                    sb[sb.length] = boxModel ? h - 1 : h;
                    sb[sb.length] = 'px;';

                    if (column.align) {
                        sb[sb.length] = "text-align:"
                        sb[sb.length] = column.align || "left";
                        sb[sb.length] = ";";
                    }
                    if (e.cellStyle) sb[sb.length] = e.cellStyle;

                    sb[sb.length] = '"><div class="mini-supergrid-cell-inner" >';

                    sb[sb.length] = e.cellHtml;

                    if (dataSource.isModified(record, column.field)) {
                        sb[sb.length] = '</div><div class="mini-supergrid-cell-dirtytip"></div></div>';
                    } else {
                        sb[sb.length] = '</div></div>';
                    }

                    left += w;

                    if (e.rowCls !== null) {
                        rowCls = e.rowCls;
                    }
                    if (e.rowStyle !== null) {
                        rowStyle = e.rowStyle;
                    }
                }

                if (record._cls) rowCls += " " + record._cls;
                sb[rowClsIndex] = rowCls;
                sb[rowStyleIndex] = rowStyle;

                sb[sb.length] = '</div>';

                top += h;

            }
            return sb;
        }


        var x = this.scrollLeft, y = this.scrollTop;




        var sb = drawRows.call(this, startColumn, endColumn);
        this.cellsEl.innerHTML = sb.join("");


        var sb = drawRows.call(this, this.frozenStartColumn, this.frozenEndColumn, true);
        this.lockedcellsEl.innerHTML = sb.join("");



        var oldEl = this.cellsEl;

















    },
    getHeaderHeight: function () {
        return mini.getHeight(this._headerEl);

    },
    getViewportHeight: function () {
        var h = this.getHeight(true) - this.getHeaderHeight();
        return h >= 0 ? h : 0;
    },
    getViewportWidth: function () {
        var v = this.getWidth(true);
        return v >= 0 ? v : 0;
    },
    getViewportBox: function () {
        return mini.getBox(this._viewportEl);
    },
    getHScrollWidth: function () {
        this.viewportWidth = this.getViewportWidth();
        var vwidth = this.viewportWidth
        if (this.showVScroll) vwidth -= 18;
        if (vwidth < 0) vwidth = 0;
        return vwidth;
    },
    getVScrollHeight: function () {
        this.viewportHeight = this.getViewportHeight();
        var vheight = this.viewportHeight;
        if (this.showHScroll) vheight -= 18;
        if (vheight < 0) vheight = 0;
        return vheight;
    },
    markRegion: function () {
        var x = this.scrollLeft, y = this.scrollTop;



        if (this.viewportWidth == null) {
            this.viewportWidth = this.getViewportWidth();
            this.viewportHeight = this.getViewportHeight();
        }
        var width = this.viewportWidth - this.getAllFrozenColumnWidth(), height = this.viewportHeight;
        var bottom = y + height, right = x + width;

        var rowHeight = this.rowHeight, columnWidth = this.columnWidth;
        var data = this.getVisibleRows();
        var columns = this.viewColumns;

        var startRow = 0, endRow = 0, startColumn = 0, endColumn = 0;


        var top = 0;
        var yOffset = 0;
        for (var i = 0, l = data.length; i < l; i++) {
            var r = data[i];
            var h = r._height ? r._height : rowHeight;
            top += h;
            if (top >= y) {
                startRow = i;
                yOffset = top - h;

                break;
            }
        }


        for (var i = startRow, l = data.length; i < l; i++) {
            var r = data[i];
            var h = r._height ? r._height : rowHeight;
            if (top > bottom) {
                endRow = i;
                break;
            }
            top += h;
        }
        if (endRow == 0) endRow = data.length - 1;


        var xOffset = 0;



        var left = 0;
        var _start = 0;
        if (this.isFrozen()) _start = this.frozenEndColumn + 1;
        for (var i = _start, l = columns.length; i < l; i++) {
            var column = columns[i];
            var w = column.width;
            left += w;
            if (left >= x) {
                startColumn = i;
                xOffset = left - w;
                left -= w;
                break;
            }
        }



        for (var i = startColumn, l = columns.length; i < l; i++) {
            var column = columns[i];
            var w = column.width;
            left += w;
            if (left >= right) {
                endColumn = i;
                break;
            }

        }

        if (endColumn == 0) endColumn = columns.length - 1;

        var region = {
            startRow: startRow,
            endRow: endRow,
            startColumn: startColumn,
            endColumn: endColumn,
            xOffset: xOffset,
            yOffset: yOffset
        };

        if (this.inMaxLeft) {
            var startColumn = region.startColumn;
            var count = columns.length - region.endColumn;
            region.startColumn += count;
            region.endColumn += count;

            for (var i = startColumn, l = region.startColumn; i < l; i++) {
                var column = columns[i];
                var w = column.width;
                region.xOffset += w;
            }
        }
        if (this.inMaxTop) {
            var startRow = region.startRow;
            var count = data.length - region.endRow;
            region.startRow += count;
            region.endRow += count;

            for (var i = startRow, l = region.startRow; i < l; i++) {
                var r = data[i];
                if (r) {
                    var h = r._height ? r._height : rowHeight;
                    region.yOffset += h;
                }
            }
        }


        return region;
    },
    getRecord: function (id) {
        if (typeof id == "object") return id;
        if (mini.isNumber(id)) {
            return this.data.getAt(id);
        }
        return this.data.getby_id(id);
    },
    getRowHeight: function (row) {
        if (mini.isNumber(row)) row = this.data.getAt(row);
        return mini.isNumber(row.__height) ? row.__height : this.rowHeight;
    },
    getRowBox: function (rowIndex) {
        var data = this.getVisibleRows();
        if (!mini.isNumber(rowIndex)) rowIndex = data.indexOf(rowIndex);

        var rowHeight = this.rowHeight, columnWidth = this.columnWidth;

        var columns = this.viewColumns;

        var top = 0, height = 0;
        for (var i = 0, l = rowIndex; i <= l; i++) {
            var r = data[i];
            var h = r._height ? r._height : rowHeight;
            top += h;
            if (i == l) {
                top -= h;
                height = h;
            }
        }
        top -= this.viewRegion.yOffset;

        var box = this.getViewportBox();
        box.height = height;
        box.y += top;
        box.bottom = box.y + box.height;
        return box;
    },
    getColumnBox: function (columnIndex) {
        if (!mini.isNumber(columnIndex)) columnIndex = this.viewColumns.indexOf(columnIndex);

        var rowHeight = this.rowHeight, columnWidth = this.columnWidth;

        var columns = this.viewColumns;

        var left = 0, width = 0;
        var left = 0;
        for (var i = 0, l = columnIndex; i <= l; i++) {
            var column = columns[i];
            var w = column.width;
            left += w;
            if (i == l) {
                left -= w;
                width = w;
            }
        }
        left -= this.viewRegion.xOffset;

        if (this.isFrozen()) {
            if (this.frozenStartColumn <= columnIndex && columnIndex <= this.frozenEndColumn) {
                var left = 0, width = 0;
                var left = 0;
                for (var i = this.frozenStartColumn, l = columnIndex; i <= l; i++) {
                    var column = columns[i];
                    var w = column.width;
                    left += w;
                    if (i == l) {
                        left -= w;
                        width = w;
                    }
                }
            } else if (columnIndex > this.frozenEndColumn) {
                var w = this.getColumnsWidth(0, this.frozenStartColumn - 1);
                left -= w;
            }
        }

        var box = this.getBox(true);
        box.width = width;
        box.x += left;
        box.right = box.x + box.width;

        box.height = this.getHeaderHeight();
        box.bottom = box.y + box.height;

        return box;
    },
    getCellBox: function (record, column) {
        var rowBox = this.getRowBox(record);
        var columnBox = this.getColumnBox(column);
        var box = {
            x: columnBox.x,
            y: rowBox.y,
            width: columnBox.width,
            height: rowBox.height
        };
        box.right = box.x + box.width;
        box.bottom = box.y + box.height;
        return box;
    },

    _frozenCellCls: "mini-supergrid-frozenCell",
    frozenStartColumn: -1,
    frozenEndColumn: -1,
    isFrozen: function () {
        return this.frozenStartColumn >= 0 && this.frozenEndColumn >= this.frozenStartColumn;
    },
    frozenColumn: function (startColumn, endColumn) {
        if (typeof startColumn == "object") startColumn = this.viewColumns.indexOf(startColumn);
        if (typeof endColumn == "object") endColumn = this.viewColumns.indexOf(endColumn);
        if (!mini.isNumber(startColumn) || !mini.isNumber(endColumn) || startColumn == -1 || endColumn == -1) return;
        if (startColumn > endColumn) {
            var t = startColumn;
            startColumn = endColumn;
            endColumn = t;
        }
        this.frozenStartColumn = startColumn;
        this.frozenEndColumn = endColumn;
        this.setColumns(this.columns);
    },
    unfrozenColumn: function () {
        this.frozenStartColumn = this.frozenEndColumn = -1;
        this.setColumns(this.columns);
    },
    getAllFrozenColumnWidth: function () {
        var w = 0;
        var columns = this.getViewColumns();
        for (var i = this.frozenStartColumn; i <= this.frozenEndColumn; i++) {
            var c = columns[i];
            if (c) {
                w += c.width;
            }
        }
        return w;
    },
    getColumnsWidth: function (start, end) {
        var w = 0;
        var columns = this.getViewColumns();
        for (var i = start; i <= end; i++) {
            var c = columns[i];
            if (c) {
                w += c.width;
            }
        }
        return w;
    },
    getViewScrollWidth: function () {
        var scrollWidth = this.scrollWidth;




        return scrollWidth;
    },

    _vscrollTimer: null,
    _hscrollTimer: null,
    __OnVScroll: function (e) {

        if (this.allowScroll === false) return;

        this.scrollTop = this.vscrollerEl.scrollTop;


        var sf = this;
        if (!this.tooltipShowTimer) {
            this.tooltipShowTimer = setTimeout(function () {
                var region = sf.markRegion();

                sf.tooltipEl.innerHTML = "行号：" + (region.startRow + 1);
                sf.tooltipShowTimer = null;
            }, 30);
        }
















    },
    __OnHScroll: function (e) {
        if (this.allowScroll === false) return;
        this._scrollLeft = this.hscrollerEl.scrollLeft;
        this._scrollTop = this.vscrollerEl.scrollTop;

        var sf = this;
        if (this._hscrollTimer) return;
        this._hscrollTimer = setTimeout(function () {
            sf.setScrollLeft(sf._scrollLeft);
            sf._hscrollTimer = null;

            sf.fire("scroll", {
                direction: "horizontal"
            });
        }, 25);
    },
    __OnMousewheel: function (e, delta) {
        var oe = e;
        var e = e.wheelDelta ? e : e.originalEvent;

        var wheelDelta = e.wheelDelta || -e.detail * 24;
        var top = this.scrollTop;

        this.endEdit();

        top -= wheelDelta;
        this.setScrollTop(top);

        this.fire("scroll", {
            direction: "vertical"
        });


        if (top == this.vscrollerEl.scrollTop) {
            oe.preventDefault();
        } else {

        }
    },

    setHeaderHeight: function (value) {
        this.headerHeight = value;
        mini.setHeight(this._headerEl, value);
        this.layoutChanged();
    },

    __OnClick: function (e) {
        this._fireChildEvent(e, 'Click');
    },
    __OnDblClick: function (e) {
        this._fireChildEvent(e, 'Dblclick');
    },
    __OnMouseDown: function (e) {
        this._fireChildEvent(e, 'MouseDown');
    },
    __OnMouseUp: function (e) {
        this._fireChildEvent(e, 'MouseUp');
    },
    __OnContextMenu: function (e) {
        this._fireChildEvent(e, 'ContextMenu');
    },
    __OnKeyDown: function (e) {
        this._fireChildEvent(e, 'KeyDown');
    },


    getAttrs: function (el) {

        var attrs = mini.SuperGrid.superclass.getAttrs.call(this, el);

        var cs = mini.getChildNodes(el);
        for (var i = 0, l = cs.length; i < l; i++) {
            var node = cs[i];
            var property = jQuery(node).attr("property");
            if (!property) continue;
            property = property.toLowerCase();
            if (property == "columns") {
                attrs.columns = mini._ParseColumns(node);
            } else if (property == "data") {
                attrs.data = node.innerHTML;
            }
        }
























        return attrs;
    }
});



mini._SuperDataTableApplys = {
    clear: function () {
        this.data.clear();
    },
    loadData: function (data) {
        this.setData(data);
    },
    getCount: function () {
        return this.data.getCount();
    },
    getChanges: function () {
        return this.data.getChanges();
    },
    getData: function () {
        return this.data.toArray();
    },
    toArray: function () {
        return this.data.toArray();
    },
    getRows: function () {
        return this.data.toArray();
    },
    updateRow: function (record, field, value) {
        this.data.updateRecord(record, field, value);
    },
    addRow: function (record) {
        return this.data.add(record);
    },
    insertRow: function (index, record) {
        return this.data.insert(index, record);
    },
    removeRow: function (record) {
        return this.data.remove(record);
    },
    removeRowAt: function (index) {
        return this.data.removeAt(index);
    },
    moveRow: function (row, index) {
        this.data.move(row, index);
    },
    indexOf: function (record) {
        return this.data.indexOf(record);
    },
    getAt: function (index) {
        return this.data.getAt(index);
    },
    findRows: function (field, value) {
        return this.findRecords(field, value);
    },
    findRecords: function (field, value) {
        return this.data.findRecords(field, value);
    },
    removeSelected: function (select) {
        var row = this.getSelected();
        var index = this.indexOf(row);
        this.removeRow(row);
        if (select !== false) {
            row = this.getAt(index);
            this.select(row ? index : index - 1);
        }
    },
    getSelected: function () {
        return this.data.getSelected();
    },
    getSelecteds: function () {
        return this.data.getSelecteds();
    },
    select: function (record) {
        this.data.select(record);
    },
    selects: function (records) {
        this.data.selects(records);
    },
    deselect: function (record) {
        this.data.deselect(record);
    },
    deselects: function (records) {
        this.data.deselects(records);
    },
    selectAll: function () {
        this.data.selectAll();
    },
    deselectAll: function () {
        this.data.deselectAll();
    },
    isSelected: function (record) {
        return this.data.isSelected(record);
    },
    getRange: function (start, end) {
        if (mini.isNull(start) || mini.isNull(end)) return;
        return this.data.getRange(start, end);
    },
    selectRange: function (start, end) {
        this.data.selectRange(start, end);
    },
    filter: function (fn, scope) {
        this.data.filter(fn, scope);
    },
    clearFilter: function () {
        this.data.clearFilter();
    },
    sort: function (fn, scope) {
        this.data.sort(fn, scope);
    },
    clearSort: function () {
        this.data.clearSort();
    }
};

mini._SuperDataTreeApplys = {
    isLeaf: function (node) {
        return this.data.isLeaf(node);
    },
    getLevel: function (node) {
        return node ? node._level : 0;
    },
    isExpanded: function (node) {
        return this.data.isExpandedNode(node);
    },
    getChildNodes: function (node) {
        return this.data.getChildNodes(node);
    },
    getParentNode: function (node) {
        return this.data.getParentNode(node);
    },
    isAncestor: function (pnode, node) {
        return this.data.isAncestor(pnode, node);
    },
    getAncestors: function (node) {
        return this.data.getAncestors(node);
    },
    getRootNode: function (node) {
        return this.data.getRootNode(node);
    },
    getAncestors: function (node) {
        return this.data.getAncestors(node);
    },
    hasChildNodes: function (node) {
        return this.data.hasChildNodes(node);
    },
    indexOfNode: function (node) {
        return this.data.indexOfNode(node);
    },
    updateNode: function (node, field, value) {
        this.data.updateRecord(node, field, value);
    },
    addNode: function (node, parentNode) {
        return this.data.addNode(node, parentNode);
    },
    insertNode: function (node, index, parentNode) {
        return this.data.insertNode(node, index, parentNode);
    },
    removeNodeAt: function (index, parentNode) {
        return this.data.removeNodeAt(index, parentNode);
    },
    removeNode: function (node) {
        return this.data.removeNode(node);
    },
    moveNode: function (node, action, targetNode) {
        this.data.moveNode(node, action, targetNode);
    },
    addNodes: function (nodes, parentNode) {
        return this.data.addNodes(nodes, parentNode);
    },
    insertNodes: function (nodes, index, parentNode) {
        return this.data.insertNodes(index, nodes, parentNode);
    },
    moveNodes: function (nodes, action, targetNode) {
        this.data.moveNodes(nodes, action, targetNode);
    },
    removeNodes: function (nodes) {
        return this.data.removeNodes(nodes);
    },
    findNodes: function (field, value) {
        return this.data.findRecords(field, value);
    },
    getChanges: function () {
        return this.data.getChanges();
    },
    getData: function () {
        return this.data.toTree();
    },
    bubbleParent: function (node, fn, scope) {
        this.data.bubbleParent(node, fn, scope);
    },
    cascadeChild: function (node, fn, scope) {
        this.data.cascadeChild(node, fn, scope);
    },
    eachChild: function (node, fn, scope) {
        this.data.eachChild(node, fn, scope);
    },
    collapseLevel: function (level, deep) {
        this.data.collapseLevel(level, deep);
    },
    expandLevel: function (level, deep) {
        this.data.expandLevel(level, deep);
    },
    collapse: function (node, deep) {
        this.data.collapse(node, deep);
    },
    expand: function (node, deep) {
        this.data.expand(node, deep);
    },
    toggle: function (node) {
        this.data.toggle(node);
    },
    collapseAll: function () {
        this.data.collapseAll();
    },
    expandAll: function () {
        this.data.expandAll();
    },
    filter: function (fn, scope) {
        this.data.filter(fn, scope);
    },
    clearFilter: function () {
        this.data.clearFilter();
    },
    sort: function (fn, scope) {
        this.data.sort(fn, scope);
    },
    clearSort: function () {
        this.data.clearSort();
    }
};


mini.copyTo(mini.SuperGrid.prototype, mini._SuperDataTableApplys);


mini.regClass(mini.SuperGrid, "supergrid");







mini.GridColumnModel = {

    addColumn: function (column, index, targetColumn) {
        if (!column) return;
        targetColumn = this.getColumn(targetColumn);
        if (!targetColumn) {
            targetColumn = this;
            if (typeof action == "string") action = "append";
        }
        if (mini.isNull(index) || index < 0) index = 1000;

        switch (index) {
            case "before":
                parentColumn = this.getParentColumn(targetColumn);
                index = parentColumn.columns.indexOf(targetColumn);
                parentColumn.columns.insert(index, column);
                break;
            case "after":
                parentColumn = this.getParentColumn(targetColumn);
                index = parentColumn.columns.indexOf(targetColumn);
                parentColumn.columns.insert(index + 1, column);
                break;
            case "append":
            case "add":
                if (!targetColumn.columns) targetColumn.columns = [];
                targetColumn.columns.push(column);
                break;
            default:
                if (mini.isNumber(index)) {
                    if (!targetColumn.columns) targetColumn.columns = [];
                    targetColumn.columns.insert(index, column);
                }
                break;
        }
        this.setColumns(this.columns);
    },
    removeColumn: function (column) {
        column = this.getColumn(column);
        var pcolumn = this.getParentColumn(column);
        if (column && pcolumn) {
            pcolumn.columns.remove(column);
            this.setColumns(this.columns);
        }
        return column;
    },
    updateColumn: function (column, options) {
        column = this.getColumn(column);
        mini.copyTo(column, options);
        this.setColumns(this.columns);
    },
    moveColumn: function (column, targetColumn, action) {
        column = this.getColumn(column);
        targetColumn = this.getColumn(targetColumn);
        if (!column || !targetColumn || !action || column == targetColumn) return;

        if (this.isAncestorColumn(column, targetColumn)
            ) {
            return;
        }


        var pcolumn = this.getParentColumn(column);
        if (pcolumn) {
            pcolumn.columns.remove(column);
        }


        var parentColumn = targetColumn;
        var index = action;
        if (index == 'before') {
            parentColumn = this.getParentColumn(targetColumn);
            index = parentColumn.columns.indexOf(targetColumn);
        } else if (index == 'after') {
            parentColumn = this.getParentColumn(targetColumn);
            index = parentColumn.columns.indexOf(targetColumn) + 1;
        } else if (index == 'add' || index == "append") {
            if (!parentColumn.columns) parentColumn.columns = [];
            index = parentColumn.columns.length;
        } else if (!mini.isNumber(index)) {
            return;
        }

        parentColumn.columns.insert(index, column);

        this.setColumns(this.columns);
    },
    getColumn: function (name) {
        if (typeof name == "object") return name;
        var column = this._nameColumns[name];
        if (!column) column = this._idColumns[name];
        return column;
    },
    getParentColumn: function (column) {
        column = this.getColumn(column);
        var pcolumn = column ? this._idColumns[column._pid] : null;
        if (column && !pcolumn) pcolumn = this;
        return pcolumn;
    },
    isAncestorColumn: function (parentNode, node) {
        if (parentNode == node) return true;
        if (!parentNode || !node) return false;
        var as = this.getAncestorColumns(node);
        for (var i = 0, l = as.length; i < l; i++) {
            if (as[i] == parentNode) return true;
        }
        return false;
    },
    getAncestorColumns: function (node) {
        var as = [];
        while (1) {
            var parentNode = this.getParentColumn(node);
            if (!parentNode || parentNode == this) break;
            as[as.length] = parentNode;
            node = parentNode;
        }
        as.reverse();
        return as;
    },


    getViewColumns: function () {
        return this.viewColumns;
    },

    getColumns: function (pcolumn) {
        pcolumn = this.getColumn(pcolumn);
        if (!pcolumn) pcolumn = this;
        return pcolumn.columns;
    },
    isVisibleColumn: function (column) {
        column = this.getColumn(column);
        if (!column.visible) return false;
        var pcolumn = this.getParentColumn(column);
        if (pcolumn == this) return true;
        return this.isVisibleColumn(pcolumn);
    },
    getDisplayColumns: function (pcolumn) {
        pcolumn = this.getColumn(pcolumn);
        if (!pcolumn) pcolumn = this;
        return pcolumn.displayColumns || [];
    },
    eachColumns: function (column, fn, scope) {
        var columns = this.getColumns(column);
        if (columns) {
            var list = columns.clone();
            for (var i = 0, l = list.length; i < l; i++) {
                var o = list[i];
                if (fn.call(scope, o, i, column) === false) break;
            }
        }
    },
    eachDisplayColumns: function (column, fn, scope) {
        var columns = this.getDisplayColumns(column);
        if (columns) {
            var list = columns.clone();
            for (var i = 0, l = list.length; i < l; i++) {
                var o = list[i];
                if (fn.call(scope, o, i, column) === false) break;
            }
        }
    },
    _columnId: 0,

    setColumns: function (columns) {
        if (!mini.isArray(columns)) columns = [];
        this.columns = columns;

        this.displayColumns = [];
        this.viewColumns = [];
        this._idColumns = {};
        this._nameColumns = {};

        var maxLevel = 0;
        var level = 0;
        function init(column, index, pcolumn) {

            this._initColumn(column);

            column.__id = this._columnId++;
            column._id = this.id + "$column$" + column.__id;
            column._pid = pcolumn._id;


            var cname = column.name
            if (cname) {
                this._nameColumns[cname] = column;
            }

            this._idColumns[column._id] = column;

            column.level = level;
            level += 1;
            this.eachColumns(column, init, this);
            level -= 1;


            column.displayColumns = (column.columns || []).clone();
            for (var i = column.displayColumns.length - 1; i >= 0; i--) {
                var c = column.displayColumns[i];
                if (c.visible == false) {
                    column.displayColumns.removeAt(i);
                }
            }


            if (column.displayColumns.length == 0 && this.isVisibleColumn(column)) {
                this.viewColumns.push(column);

            }

            if (column.level > maxLevel) maxLevel = column.level;
        }
        this.eachColumns(this, init, this);


        this.displayColumns = columns.clone();
        for (var i = this.displayColumns.length - 1; i >= 0; i--) {
            var c = this.displayColumns[i];
            if (c.visible == false) {
                this.displayColumns.removeAt(i);
            }
        }



        this.maxColumnLevel = maxLevel;

        this.refresh();
    },
    _initColumn: function (column) {
        column._gridUID = this.uid;
        column._rowIdField = this._rowIdField;
        if (column.type && column.inited != true) {
            column.typeInited = true;

            var col = mini._getColumn(column.type);
            var _column = mini.copyTo({}, column);
            mini.copyTo(column, col);
            mini.copyTo(column, _column);
        }

        column.width = parseInt(column.width)
        if (mini.isNull(column.width) || isNaN(column.width)) column.width = this.columnWidth;

        column.visible = column.visible !== false;
        column.allowResize = column.allowResize !== false;
        column.allowMove = column.allowMove !== false;
        column.allowSort = column.allowSort === true;
        column.allowDrag = !!column.allowDrag;
        column.readOnly = !!column.readOnly;



        if (column.editor) {
            if (typeof column.editor == "string") {
                var cls = mini.getClass(column.editor);
                if (cls) {
                    column.editor = { type: column.editor };
                } else {
                    column.editor = eval('(' + column.editor + ')');
                }
            }

            if (column.editor && !mini.isControl(column.editor)) {
                column.editor = mini.create(column.editor);
            }
        }

        if (column.editor) {
            column.editor.setVisible(false);
        }

        if (typeof column.init == "function" && column.inited != true) {
            column.init(this);
        }

        delete column.colspan;
        delete column.rowspan;

        column.inited = true;
    },

    getDisplayColumnRows: function () {
        var maxLevel = this.getMaxColumnLevel();

        var dcs = [];
        for (var i = 0, l = maxLevel; i <= l; i++) {
            dcs.push([]);
        }

        function getColSpan(col) {
            var subColumns = mini.treeToArray(col.displayColumns, "displayColumns");
            var colSpan = 0;
            for (var i = 0, l = subColumns.length; i < l; i++) {
                var c = subColumns[i];
                if (c.displayColumns.length == 0) {
                    colSpan += 1;
                }
            }
            return colSpan;
        }

        var list = mini.treeToArray(this.displayColumns, "displayColumns");

        for (var i = 0, l = list.length; i < l; i++) {
            var column = list[i];
            var cols = dcs[column.level];

            if (column.displayColumns.length > 0) {
                column.colspan = getColSpan(column);
            }
            if (column.displayColumns.length == 0 && column.level < maxLevel) {
                column.rowspan = maxLevel - column.level + 1;
            }

            cols.push(column);
        }

        return dcs;
    },
    getMaxColumnLevel: function () {
        return this.maxColumnLevel;
    },
    getAllColumnWidth: function () {
        var columns = this.getViewColumns();
        var all = 0;
        var columnWidth = this.columnWidth;
        for (var i = 0, l = columns.length; i < l; i++) {
            var col = columns[i];
            var w = mini.isNull(col.width) ? columnWidth : col.width;
            all += w;
        }
        return all;
    }
};

mini.copyTo(mini.SuperGrid.prototype, mini.GridColumnModel);





mini.GridCellEditModel = {
    addRowCls: function (record, cls) {

        record = this.getRecord(record);
        if (!record) return;


        var rowEl = this._getRowEl(record);
        if (rowEl) mini.addClass(rowEl, cls);

        var rowEl = this._getRowEl(record, true);
        if (rowEl) mini.addClass(rowEl, cls);
    },
    removeRowCls: function (record, cls) {

        record = this.getRecord(record);
        if (!record) return;
        if (record._cls == cls) delete record._cls;
        var rowEl = this._getRowEl(record);
        if (rowEl) mini.removeClass(rowEl, cls);

        var rowEl = this._getRowEl(record, true);
        if (rowEl) mini.removeClass(rowEl, cls);
    },
    _createRowId: function (record, isFrozen) {
        var id = typeof record == "string" ? record : record._id;
        if (isFrozen) return this.id + "$locked$" + id;
        return this.id + "$" + id;
    },
    _createCellId: function (record, column) {
        return this.id + "$" + record._id + "$" + column.__id;
    },
    _getRowEl: function (row, isFrozen) {
        if (!row) return null;
        var id = this._createRowId(row, isFrozen);
        return document.getElementById(id);
    },
    _getHeaderCellEl: function (column) {
        return document.getElementById(column._id);
    },
    _getCellEl: function (record, column) {
        column = this.getColumn(column);
        if (!column) return null;
        var id = this._createCellId(record, column);
        return document.getElementById(id);
    },
    _getRecordByEvent: function (e) {
        var t = mini.findParent(e.target, this._rowCls);
        if (!t) return null;
        var ids = t.id.split("$");
        var rid = ids[ids.length - 1];
        return this.data.getby_id(rid);
    },
    _getColumnByEvent: function (e) {
        var t = mini.findParent(e.target, this.cellCls);
        if (t) {
            var ids = t.id.split("$");
            var column__id = parseInt(ids[ids.length - 1]);
            var column_id = this.id + "$column$" + column__id;
            return this.getColumn(column_id);
        } else {
            t = mini.findParent(e.target, "mini-supergrid-headercell");
            if (t) {
                return this.getColumn(t.id);
            }
        }
        return null;
    },
    _getCellByEvent: function (e) {
        var record = this._getRecordByEvent(e);
        var column = this._getColumnByEvent(e);
        return {
            record: record,
            column: column
        };
    },
    _fireChildEvent: function (e, name) {
        if (this.disabled) return;
        var cell = this._getCellByEvent(e);
        var record = cell.record, column = cell.column;
        if (record) {
            var fn = this['_OnRow' + name];
            if (fn) {
                fn.call(this, record, e);
            } else {
                var eve = {
                    record: record,
                    htmlEvent: e
                };
                this.fire("row" + name, eve);
            }
        }
        if (column) {
            var fn = this['_OnColumn' + name];
            if (fn) {
                fn.call(this, column, e);
            } else {
                var eve = {
                    column: column,
                    field: column.field,
                    htmlEvent: e
                };
                this.fire("column" + name, eve);
            }
        }

        if (record && column) {
            var fn = this['_OnCell' + name];
            if (fn) {
                fn.call(this, record, column, e);
            } else {
                var eve = {
                    record: record,
                    column: column,
                    field: column.field,
                    htmlEvent: e
                };
                this.fire("cell" + name, eve);
            }

        }
        if (!record && column) {
            var fn = this['_OnHeaderCell' + name];
            if (fn) {
                fn.call(this, column, e);
            } else {
                var eve = {
                    sender: this,
                    column: column,
                    htmlEvent: e
                };
                var evName = "onHeaderCell" + name;
                if (column[evName]) {
                    eve.sender = this;
                    column[evName](eve);
                }

                this.fire("headercell" + name, eve);
            }
        }
    },


    currentCell: null,
    editingCell: null,
    editControl: null,
    editWrap: null,
    _doCurrentCell: function (select) {
        if (this.currentCell) {
            var record = this.currentCell.record, column = this.currentCell.column;
            var cellId = this._createCellId(record, column);
            var cellEl = document.getElementById(cellId);
            if (cellEl) {
                if (select) {
                    mini.addClass(cellEl, this.cellSelectedCls);
                } else {
                    mini.removeClass(cellEl, this.cellSelectedCls);
                }
            }
        }
    },
    setCurrentCell: function (cell) {
        if (this.currentCell != cell) {
            this._doCurrentCell(false);
            this.currentCell = cell;
            this._doCurrentCell(true);
            this.fire("currentcellchanged");
        }
    },
    getCurrentCell: function () {
        var cc = this.currentCell;
        if (cc) {
            if (!this.data.hasRecord(cc.record)) {
                this.currentCell = null;
                cc = null;
            }
        }
        return cc;
    },
    allowCellEdit: true,
    allowCellSelect: true,
    beginEdit: function (selectAll) {
        if (this.editingCell) this.endEdit();
        var cell = this.getCurrentCell();
        if (cell) {
            var canEdit = this._OnCellBeginEdit(cell.record, cell.column);
            if (canEdit !== false) {
                this.editingCell = cell;
                this._OnCellShowingEdit(cell.record, cell.column);
            }
        }
    },
    commitEdit: function (value) {
        var cell = this.editingCell;
        if (cell) {
            this._commitEditing = true;
            this._OnCellCommitEdit(cell.record, cell.column, value);
            this._commitEditing = false;
        }
    },
    endEdit: function () {
        var cell = this.editingCell;
        if (cell) {
            this.commitEdit();
            this._OnCellEndEdit(cell.record, cell.column);
            this.editingCell = null;
        }
    },
    cancelEdit: function () {
        var cell = this.editingCell;
        if (cell) {
            this._OnCellEndEdit(cell.record, cell.column);
            this.editingCell = null;
        }
    },
    focus: function () {

        var me = this;
        setTimeout(function () {
            try {
                me.el.focus();






            } catch (e) { };
        }, 10);


    },
    getEditWrap: function (box) {
        if (!this.editWrap) {
            this.editWrap = mini.append(document.body, '<div class="mini-supergrid-editwrap" style="position:absolute;"></div>');

            mini.on(this.editWrap, "keydown", this.___OnEditControlKeyDown, this);
        }
        this.editWrap.style.zIndex = 1000000000;
        this.editWrap.style.display = 'block';
        mini.setXY(this.editWrap, box.x, box.y);

        mini.setWidth(this.editWrap, box.width);

        this.editWrap.style.zIndex = mini.getMaxZIndex();

        return this.editWrap;
    },

    _startEditNextRowCell: function (next) {
        var me = this;

        var currentCell = me.getCurrentCell();
        if (!currentCell) return;

        var column = currentCell.column;
        var record = currentCell.record;

        var rowIndex = me.indexOf(record) + (next ? 1 : -1);
        var nextRecord = me.getAt(rowIndex);

        if (this.viewRegion) {
            if (rowIndex < this.viewRegion.startRow || rowIndex >= this.viewRegion.endRow) {
                nextRecord = null;
            }
        }

        if (nextRecord) {
            currentCell = { record: nextRecord, column: column };
            me.setCurrentCell(currentCell);
            me.beginEdit();

            me.data.deselectAll();
            me.data.select(nextRecord);


        }
    },

    _startEditNextColumnCell: function (next) {
        var me = this;

        var currentCell = me.getCurrentCell();
        if (!currentCell) return;

        var column = currentCell.column;
        var record = currentCell.record;

        var columns = me.getViewColumns();
        var columnIndex = columns.indexOf(column) + (next ? 1 : -1);
        var nextColumn = columns[columnIndex];

        if (nextColumn) {
            currentCell = { record: record, column: nextColumn };
            me.setCurrentCell(currentCell);
            me.beginEdit();
        }
    },

    ___OnEditControlKeyDown: function (e) {
        var me = this;

        if (e.keyCode == 13) {
            var cell = this.editingCell;
            if (cell && cell.column && cell.column.enterCommit === false) return;
            this.endEdit();
            this.focus();

            if (me.enterEditAction == "nextrowcell") {
                me._startEditNextRowCell(e.shiftKey == false);
            } else if (me.enterEditAction == "nextcolumncell") {
                me._startEditNextColumnCell(e.shiftKey == false);
            }

        } else if (e.keyCode == 27) {
            this.cancelEdit();
            this.focus();
        } else if (e.keyCode == 9) {
            this.cancelEdit();

            e.preventDefault();
            me._startEditNextColumnCell(e.shiftKey == false);

        }
    },
    __OnBodyMouseDown: function (e) {
        if (this.editingControl) {
            var within = this.editingControl.within(e);
            if (within == false) {
                var sf = this;




                sf.endEdit();


                mini.un(document, 'mousedown', this.__OnBodyMouseDown, this);
            }
        }
    },
    _OnCellBeginEdit: function (record, column) {
        var e = {
            sender: this,
            source: this,
            record: record,
            column: column,
            field: column.field,
            editor: column.editor,
            value: record[column.field],
            cancel: false
        };
        if (column.oncellbeginedit) {
            column.oncellbeginedit(e);
        }
        this.fire("cellbeginedit", e);
        if (e.cancel) {
            return false;
        }

        if (!e.editor) return false;
        var editor = this.editingControl = e.editor;
        if (editor.setValue) {
            editor.setValue(e.value);
        }

        if (column.displayField && editor.setText) {
            var text = record[column.displayField];
            editor.setText(text);
        }

        return true;
    },
    _OnCellShowingEdit: function (record, column) {
        if (!this.editingControl) return false;

        var cellBox = this.getCellBox(record, column);
        var e = {
            sender: this,
            source: this,
            record: record,
            column: column,
            field: column.field,
            cellBox: cellBox,
            editor: this.editingControl
        };
        if (column.oncellshowingedit) {
            column.oncellshowingedit(e);
        }
        this.fire("cellshowingedit", e);

        var editWrap = this.getEditWrap(cellBox);
        var editor = e.editor;
        if (editor.render) {
            editor.render(this.editWrap);
            editor.focus();
            setTimeout(function () {
                editor.focus();
                if (editor.selectText) editor.selectText();
            }, 10);
            editor.setVisible(true);
        } else if (editor.el) {
            this.editWrap.appendChild(editor.el);
            try {
                editor.el.focus();
            } catch (e) {
            }
            setTimeout(function () {
                try {
                    editor.el.focus();
                } catch (e) {
                }
            }, 10);
        }

        if (editor.setWidth) {
            var width = cellBox.width;
            if (mini.isNumber(editor.minWidth)) {
                if (width < editor.minWidth) width = editor.minWidth;
            }
            editor.setWidth(width);
        }





        mini.on(document, 'mousedown', this.__OnBodyMouseDown, this);

        if (column.autoShowPopup && editor.showPopup) {

            editor.showPopup();
        }
    },
    _OnCellCommitEdit: function (record, column, value) {

        var e = {
            sender: this,
            source: this,
            record: record,
            column: column,
            field: column.field,
            editor: this.editingControl,
            value: value,
            cancel: false
        };
        if (e.editor && e.editor.getValue && value === undefined) {
            try {
                e.editor.blur();
            } catch (ex) {
                try {
                    e.editor.el.blur();
                } catch (e) {

                }
            }
            e.value = e.editor.getValue();
            if (e.editor.getText) {
                e.text = e.editor.getText();
            }
        }
        if (column.oncellcommitedit) {
            column.oncellcommitedit(e);
        }
        this.fire("cellcommitedit", e);
        if (e.cancel == false) {
            if (column.displayField) {
                var o = {};
                o[column.field] = e.value;
                o[column.displayField] = e.text;
                this.data.updateRecord(record, o);
            } else {
                this.data.updateRecord(record, column.field, e.value);
            }
        }
    },
    _OnCellEndEdit: function (record, column) {
        var e = {
            sender: this,
            source: this,
            record: record,
            column: column,
            field: column.field,
            editor: this.editingControl,
            value: record[column.field]
        };
        if (column.oncellendedit) {
            column.oncellendedit(e);
        }
        this.fire("cellendedit", e);
        if (this.editWrap) this.editWrap.style.display = 'none';
        var childNodes = this.editWrap.childNodes;
        for (var i = childNodes.length - 1; i >= 0; i--) {
            var el = childNodes[i];
            this.editWrap.removeChild(el);
        }

        var editor = e.editor;
        if (editor && editor.hidePopup) {
            editor.hidePopup();
        }
        if (editor && editor.clearValue) {
            editor.clearValue();
        }
        this.editingControl = null;
    },

    _OnDrawCell: function (record, column, rowIndex, columnIndex) {
        var value = record[column.field];

        var e = {
            sender: this,
            source: this,
            rowIndex: rowIndex,
            columnIndex: columnIndex,
            record: record,
            column: column,
            field: column.field,
            value: value,
            cellHtml: value,
            rowCls: null,
            cellCls: column.cellCls || '',
            rowStyle: null,
            cellStyle: column.cellStyle || '',
            autoEscape: column.autoEscape
        };

        if (column.dateFormat) {
            if (mini.isDate(e.value)) e.cellHtml = mini.formatDate(value, column.dateFormat);
            else e.cellHtml = "";
        }


        if (column.displayField) {
            e.cellHtml = record[column.displayField];
        }
        if (e.autoEscape == true) {
            e.cellHtml = mini.htmlEncode(e.cellHtml);
        }

        var renderer = column.renderer;
        if (renderer) {
            fn = typeof renderer == "function" ? renderer : window[renderer];
            if (fn) {
                e.cellHtml = fn.call(column, e);
            }
        }
        this.fire("drawcell", e);

        if (e.cellHtml === null || e.cellHtml === undefined) e.cellHtml = "";



        return e;
    },
    setRowHeight: function (value) {


        if (value != this.rowHeight) {
            this.rowHeight = value;
            this.layoutChanged();
        }
    },
























    getMultiSelect: function () {
        return this.multiSelect;
    },
    setMultiSelect: function (value) {
        if (this.multiSelect != value) {
            this.multiSelect = value;
            this.data.setMultiSelect(value);
            this.layoutChanged();
        }
    },
    setAllowUnselect: function (value) {
        this.allowUnselect = value;
    },
    getAllowUnselect: function (value) {
        return this.allowUnselect;
    },
    setAllowCellSelect: function (value) {
        if (this.allowCellSelect != value) {
            this.allowCellSelect = value;
            this.layoutChanged();
        }
    },
    setAllowRowSelect: function (value) {
        if (this.allowRowSelect != value) {
            this.allowRowSelect = value;
            this.layoutChanged();
        }
    },
    setAllowAlternating: function (value) {
        if (this.allowAlternating != value) {
            this.allowAlternating = value;
            this.layoutChanged();
        }
    },
    setAllowResizeColumn: function (value) {
        if (this.allowResizeColumn != value) {
            this.allowResizeColumn = value;
            this.layoutChanged();
        }
    },
    setAllowMoveColumn: function (value) {
        if (this.allowMoveColumn != value) {
            this.allowMoveColumn = value;
        }
    },
    setAllowSortColumn: function (value) {
        if (this.allowSortColumn != value) {
            this.allowSortColumn = value;
        }
    },

    setAllowDragDrop: function (value) {
        if (this.allowDragDrop != value) {
            this.allowDragDrop = value;
            this.layoutChanged();
        }
    },
    setShowDirty: function (value) {
        if (this.showDirty != value) {
            this.showDirty = value;
            this.layoutChanged();
        }
    },

    _getDragData: function () {
        return this.data.getSelecteds().clone();
    },
    _getDragText: function (dragRecords) {
        return "Rows " + dragRecords.length;
    },
    _OnRowDragStart: function (record, column) {
        var e = {
            record: record,
            column: column,
            cancel: false
        };
        this.fire("RowDragStart", e);
        return e;
    },
    _OnRowDragDrop: function (dragRecords, dropRecord, dragAction) {
        dragRecords = dragRecords.clone();
        var e = {
            records: dragRecords,
            targetRecord: dropRecord,
            action: dragAction,
            cancel: false
        };
        this.fire("RowDragDrop", e);
        return e;
    },
    _OnGiveFeedback: function (effect, dragRecords, dropRecord) {
        var e = {};
        e.effect = effect;
        e.records = dragRecords;
        e.targetRecord = dropRecord;
        this.fire("GiveFeedback", e);
        return e;
    },
    isAllowDragDrop: function (record, column) {
        if (!this.allowDragDrop) return false;
        if (column.allowDrag !== true) return false;
        var e = this._OnRowDragStart(record, column);
        return !e.cancel;
    }
};

mini.copyTo(mini.SuperGrid.prototype, mini.GridCellEditModel);




mini._SuperGridSort = function (grid) {
    this.grid = grid;
    this.grid.on("headercellclick", this.__onGridHeaderCellClick, this);
    this.grid.on("headercellmousedown", this.__OnGridHeaderCellMouseDown, this);

    mini.on(grid._headerEl, "mousemove", this.__OnGridHeaderMouseMove, this);
    mini.on(grid._headerEl, "mouseout", this.__OnGridHeaderMouseOut, this);
};
mini._SuperGridSort.prototype = {
    __OnGridHeaderMouseOut: function (e) {
        if (this._focusedColumnEl) {
            mini.removeClass(this._focusedColumnEl, "mini-supergrid-headercell-hover");
        }
    },
    __OnGridHeaderMouseMove: function (e) {
        var t = mini.findParent(e.target, "mini-supergrid-headercell");
        if (t) {
            mini.addClass(t, "mini-supergrid-headercell-hover");
            this._focusedColumnEl = t;
        }
    },
    __onGridHeaderCellClick: function (e) {
        var grid = this.grid;

        var t = mini.findParent(e.target, "mini-supergrid-headercell");
        if (t) {
            var column = grid.getColumn(t.id.split("$")[2]);
            if (grid.allowMoveColumn && column && column.allowDrag) {
                this.dragColumn = column;
                this._columnEl = t;
                this.getDrag().start(e);
            }
        }
    }
};




mini._SuperGridSelect = function (grid) {

    this.grid = grid;
    this.grid.on("cellmousedown", this.__onGridCellMouseDown, this);
    this.grid.on("cellclick", this.__onGridCellClick, this);
    this.grid.on("celldblclick", this.__onGridCellDblClick, this);

    mini.on(this.grid.el, "keydown", this.__OnGridKeyDown, this);
};
mini._SuperGridSelect.prototype = {
    __OnGridKeyDown: function (e) {


        var grid = this.grid;
        var currentCell = grid.getCurrentCell();

        if (e.shiftKey || e.ctrlKey || e.altKey) {
            return;
        }

        if (!currentCell) return;
        if (e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40) {
            e.preventDefault();
        }

        var columns = grid.getViewColumns();
        var column = currentCell.column, record = currentCell.record;
        var columnIndex = columns.indexOf(column);
        var rowIndex = grid.indexOf(record);
        var count = grid.getCount();



        switch (e.keyCode) {

            case 9:




                break;
            case 27:

                break;
            case 13:
                if (column.readOnly != true) {
                    grid.beginEdit();
                }
                break;
            case 37:
                if (columnIndex > 0) {
                    columnIndex -= 1;
                }
                break;
            case 38:
                if (rowIndex > 0) rowIndex -= 1;
                break;
            case 39:

                if (columnIndex < columns.length - 1) {
                    columnIndex += 1;
                }
                break;
            case 40:
                if (rowIndex < count - 1) rowIndex += 1;
                break;
            default:
                return;
        }
        column = columns[columnIndex];
        record = grid.getAt(rowIndex);

        if (column && record && grid.allowCellSelect) {
            var currentCell = { record: record, column: column };
            grid.setCurrentCell(currentCell);
        }

        if (record && grid.allowRowSelect) {
            grid.deselectAll();
            grid.select(record);
        }
    },
    __onGridCellClick: function (e) {

        var record = e.record, column = e.column;


        if (!column.readOnly && !this.grid.isReadOnly()) {
            if (e.htmlEvent.shiftKey || e.htmlEvent.ctrlKey) {
            } else {
                if (!this.grid.editOnDblClick) {
                    this.grid.beginEdit();
                }
            }
        }
    },
    __onGridCellDblClick: function (e) {

        var record = e.record, column = e.column;

        if (!column.readOnly && !this.grid.isReadOnly()) {
            if (e.htmlEvent.shiftKey || e.htmlEvent.ctrlKey) {
            } else {
                if (this.grid.editOnDblClick) {
                    this.grid.beginEdit();
                }
            }
        }
    },
    __onGridCellMouseDown: function (e) {
        var record = e.record, column = e.column;


        if (this.grid.allowCellSelect) {
            var cell = {
                record: record,
                column: column
            };
            this.grid.setCurrentCell(cell);
        }


        if (!this.grid.allowRowSelect) return;



        var ex = {
            record: record,
            column: column,
            cancel: false
        };
        this.grid.fire("beforeselect", ex);
        if (ex.cancel == true) return;
        var grid = this.grid;

        if (this.grid.getMultiSelect()) {
            this.grid.el.onselectstart = function () { };
            if (e.htmlEvent.shiftKey) {
                this.grid.el.onselectstart = function () { return false };
                e.htmlEvent.preventDefault();

                if (!this.currentRecord) {
                    this.grid.data.select(record);
                    this.currentRecord = this.grid.getSelected();
                } else {

                    this.grid.deselectAll();
                    this.grid.selectRange(this.currentRecord, record);
                }

            } else {
                this.grid.el.onselectstart = function () { };
                if (e.htmlEvent.ctrlKey) {
                    this.grid.el.onselectstart = function () { return false };
                    e.htmlEvent.preventDefault();
                }


                if (column._multiRowSelect || e.htmlEvent.ctrlKey || grid.allowUnselect) {
                    if (this.grid.data.isSelected(record) && (column._multiRowSelect || e.htmlEvent.ctrlKey)) {
                        if (e.htmlEvent.button != 2) {
                            this.grid.data.deselect(record);

                            this.grid.setCurrentCell(null);

                        }
                    } else {
                        this.grid.data.select(record);
                    }

                } else {
                    if (this.grid.data.isSelected(record)) {

                    } else {
                        this.grid.data.deselectAll();
                        this.grid.data.select(record);
                    }
                }

                this.currentRecord = this.grid.getSelected();

            }

        }
        else {
            if (!this.grid.data.isSelected(record)) {
                this.grid.data.select(record);
            }
        }







    }
};




mini._SuperGridSplitter = function (grid) {
    this.grid = grid;
    mini.on(this.grid.el, "mousedown", this.__onGridMouseDown, this);
};
mini._SuperGridSplitter.prototype = {
    __onGridMouseDown: function (e) {
        var grid = this.grid;
        var t = e.target;
        if (mini.hasClass(t, "mini-supergrid-splitter")) {
            var cid = mini.getAttr(t, "cid");

            var column = grid.getColumn(cid);
            if (grid.allowResizeColumn && column) {
                this.splitterColumn = column;
                this.getDrag().start(e);
            }
        }
    },
    getDrag: function () {
        if (!this.drag) {
            this.drag = new mini.Drag({
                capture: true,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this.drag;
    },
    _OnDragStart: function (drag) {
        var grid = this.grid;
        var columnBox = grid.getColumnBox(this.splitterColumn);
        this.columnBox = columnBox;
        this._dragProxy = mini.append(document.body, '<div class="mini-supergrid-proxy"></div>');


        var box = grid.getBox(true);
        box.x = columnBox.x;
        box.width = columnBox.width;
        box.right = columnBox.right;
        mini.setBox(this._dragProxy, box);
    },
    _OnDragMove: function (drag) {
        var grid = this.grid;
        var box = mini.copyTo({}, this.columnBox);
        var width = box.width + (drag.now[0] - drag.init[0]);
        if (width < grid.columnMinWidth) width = grid.columnMinWidth;
        if (width > grid.columnMaxWidth) width = grid.columnMaxWidth;

        mini.setWidth(this._dragProxy, width);
    },
    _OnDragStop: function (drag) {
        var grid = this.grid;
        var box = mini.getBox(this._dragProxy);
        jQuery(this._dragProxy).remove();
        this._dragProxy = null;
        grid.updateColumn(this.splitterColumn, { width: box.width });
    }
};




mini._SuperGridColumnMove = function (grid, headerCellCls, splitterCls) {
    this.grid = grid;
    this.headerCellCls = headerCellCls;
    this.splitterCls = splitterCls;
    mini.on(this.grid.el, "mousedown", this.__onGridMouseDown, this);
};
mini._SuperGridColumnMove.prototype = {
    __onGridMouseDown: function (e) {

        var grid = this.grid;
        if (mini.hasClass(e.target, "mini-supergrid-splitter")) return;

        if (e.button == mini.MouseButton.Right) return;

        var t = mini.findParent(e.target, "mini-supergrid-headercell");
        if (t) {
            var column = grid.getColumn(t.id);
            if (grid.allowMoveColumn && column && column.allowMove) {
                this.dragColumn = column;
                this._columnEl = t;
                this.getDrag().start(e);
            }
        }
    },
    getDrag: function () {
        if (!this.drag) {
            this.drag = new mini.Drag({
                capture: isIE9 ? false : true,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this.drag;
    },
    _OnDragStart: function (drag) {
        var grid = this.grid;
        this._dragProxy = mini.append(document.body, '<div class="mini-supergrid-columnproxy"></div>');
        this._dragProxy.innerHTML = '<div class="mini-supergrid-columnproxy-inner">' + grid._createHeaderCell(this.dragColumn) + '</div>';
        mini.setXY(this._dragProxy, drag.now[0] + 15, drag.now[1] + 18);
        mini.addClass(this._dragProxy, "mini-supergrid-no");

        this.moveTop = mini.append(document.body, '<div class="mini-supergrid-movetop"></div>');
        this.moveBottom = mini.append(document.body, '<div class="mini-supergrid-movebottom"></div>');
    },
    _OnDragMove: function (drag) {
        var grid = this.grid;
        var x = drag.now[0];
        mini.setXY(this._dragProxy, x + 15, drag.now[1] + 18);

        this.targetColumn = this.insertAction = null;
        var t = mini.findParent(drag.event.target, "mini-supergrid-headercell");

        if (t) {

            var column = grid.getColumn(t.id);
            if (column && column != this.dragColumn
                && !grid.isAncestorColumn(this.dragColumn, column)
            ) {
                this.targetColumn = column;
                this.insertAction = "before";
                var columnBox = grid.getColumnBox(this.targetColumn);

                if (x > columnBox.x + columnBox.width / 2) {

                    this.insertAction = "after";
                }
            }
        }

        if (this.targetColumn) {
            mini.addClass(this._dragProxy, "mini-supergrid-ok");
            mini.removeClass(this._dragProxy, "mini-supergrid-no");

            var box = grid.getColumnBox(this.targetColumn);

            this.moveTop.style.display = 'block';
            this.moveBottom.style.display = 'block';
            if (this.insertAction == "before") {

                mini.setXY(this.moveTop, box.x - 4, box.y - 9);
                mini.setXY(this.moveBottom, box.x - 4, box.bottom);
            } else {

                mini.setXY(this.moveTop, box.right - 4, box.y - 9);
                mini.setXY(this.moveBottom, box.right - 4, box.bottom);
            }
        } else {
            mini.removeClass(this._dragProxy, "mini-supergrid-ok");
            mini.addClass(this._dragProxy, "mini-supergrid-no");

            this.moveTop.style.display = 'none';
            this.moveBottom.style.display = 'none';
        }
    },
    _OnDragStop: function (drag) {
        var grid = this.grid;
        mini.removeNode(this._dragProxy);
        mini.removeNode(this.moveTop);
        mini.removeNode(this.moveBottom);
        grid.moveColumn(this.dragColumn, this.targetColumn, this.insertAction);
        this._dragProxy = this.moveTop = this.moveBottom = this.dragColumn = this.targetColumn = null;


    }
};






mini._GridDragDrop = function (grid) {
    this.owner = grid;
    this.owner.on('CellMouseDown', this.__OnGridCellMouseDown, this);



}
mini._GridDragDrop.prototype = {
    __OnGridCellMouseDown: function (e) {

        if (e.htmlEvent.button == mini.MouseButton.Right) return;
        var grid = this.owner;
        if (grid.isReadOnly() || grid.isAllowDragDrop(e.record, e.column) == false) return;
        var record = e.record;

        this.isTree = grid.data.isTree;
        this.dragData = grid._getDragData();

        if (this.dragData.indexOf(record) == -1) {
            this.dragData.push(record);
        }


        var drag = this._getDrag();
        drag.start(e.htmlEvent);
    },
    _OnDragStart: function (drag) {
        var grid = this.owner;

        this.feedbackEl = mini.append(document.body, '<div class="mini-feedback"></div>');
        this.feedbackEl.innerHTML = grid._getDragText(this.dragData);
        this.lastFeedbackClass = "";
    },
    _OnDragMove: function (drag) {
        var grid = this.owner;

        var x = drag.now[0], y = drag.now[1];
        mini.setXY(this.feedbackEl, x + 15, y + 18);

        var targetRecord = grid._getRecordByEvent(drag.event);
        this.dropRecord = targetRecord;

        if (targetRecord) {
            if (this.isTree) {
                this.dragAction = this.getFeedback(targetRecord, y, 3);
            } else {
                this.dragAction = this.getFeedback(targetRecord, y, 2);
            }
        } else {
            this.dragAction = "no";
        }

        this.lastFeedbackClass = "mini-feedback-" + this.dragAction;
        this.feedbackEl.className = "mini-feedback " + this.lastFeedbackClass;

        if (this.dragAction == "no") targetRecord = null;
        this.setRowFeedback(targetRecord, this.dragAction);

    },
    _OnDragStop: function (drag) {
        var grid = this.owner;
        mini.removeNode(this.feedbackEl);

        this.feedbackEl = null;
        this.setRowFeedback(null);


        if (this.isTree) {
            var dragRecords = [];
            for (var i = 0, l = this.dragData.length; i < l; i++) {
                var dragRecord = this.dragData[i];

                var hasParent = false;
                for (var j = 0, k = this.dragData.length; j < k; j++) {
                    var dr = this.dragData[j];
                    if (dr != dragRecord) {
                        hasParent = grid.data.isAncestor(dr, dragRecord);
                        if (hasParent) break;
                    }
                }

                if (!hasParent) {
                    dragRecords.push(dragRecord);
                }
            }
            this.dragData = dragRecords;
        }

        if (this.dropRecord && this.dragAction != "no") {
            var e = grid._OnRowDragDrop(this.dragData, this.dropRecord, this.dragAction);

            if (!e.cancel) {
                var dragRecords = e.records, targetRecord = e.targetRecord, action = e.action;
                if (grid.data.isTree) {
                    grid.data.moveNodes(dragRecords, targetRecord, action);
                } else {
                    var index = grid.data.indexOf(targetRecord);
                    if (action == "after") index += 1;
                    grid.data.move(dragRecords, index);
                }
            }
        }
        this.dropRecord = null;
        this.dragData = null;
    },
    setRowFeedback: function (record, feedback) {



        var grid = this.owner;
        if (this.lastAddDomRow) {

            grid.removeRowCls(this.lastAddDomRow, "mini-supergrid-feedback-add");
        }
        if (record == null || this.dragAction == "add") {
            mini.removeNode(this.feedbackLine);
            this.feedbackLine = null;
        }

        this.lastRowFeedback = record;

        if (record != null) {
            if (feedback == "before" || feedback == "after") {
                if (!this.feedbackLine) {
                    this.feedbackLine = mini.append(document.body, "<div class='mini-feedback-line'></div>");
                }
                this.feedbackLine.style.display = "block";
                var rowBox = grid.getRowBox(record);
                var x = rowBox.x, y = rowBox.y - 1;
                if (feedback == "after") {
                    y += rowBox.height;
                }
                mini.setXY(this.feedbackLine, x, y);

                var box = grid.getBox(true);
                mini.setWidth(this.feedbackLine, box.width);
            } else {
                grid.addRowCls(record, "mini-supergrid-feedback-add");
                this.lastAddDomRow = record;


            }
        }
    },
    getFeedback: function (dropRecord, y, way) {

        var grid = this.owner;

        var rowBox = grid.getRowBox(dropRecord);


        var h = rowBox.height;
        var t = y - rowBox.y;

        var effect = null;


        if (this.dragData.indexOf(dropRecord) != -1) return "no";
        var IsLeaf = false;
        if (way == 3) {
            IsLeaf = grid.isLeaf(dropRecord);


            for (var i = 0, l = this.dragData.length; i < l; i++) {
                var dragRecord = this.dragData[i];

                var isAncestor = grid.isAncestor(dragRecord, dropRecord);
                if (isAncestor) {
                    effect = "no";
                    break;
                }
            }
        }
        if (effect == null) {
            if (way == 2) {
                if (t > h / 2) effect = "after";
                else effect = "before";
            } else {
                if (IsLeaf) {
                    if (t > h / 2) effect = "after";
                    else effect = "before";
                } else {
                    if (t > (h / 3) * 2) effect = "after";
                    else if (h / 3 <= t && t <= (h / 3 * 2)) effect = "add";
                    else effect = "before";
                }
            }
        }
        var e = grid._OnGiveFeedback(effect, this.dragData, dropRecord);
        return e.effect;
    },
    _getDrag: function () {
        if (!this.drag) {
            this.drag = new mini.Drag({
                capture: false,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this.drag;
    }
};































































































































































mini.SuperTree = function () {
    mini.SuperTree.superclass.constructor.call(this);

}
mini.extend(mini.SuperTree, mini.SuperGrid, {
    treeColumn: null,
    showTreeIcon: false,
    allowColumnSort: false,

    leafIcon: "mini-supertree-leaf",
    folderIcon: "mini-supertree-folder",

    uiCls: "mini-supertree",
    _create: function () {
        mini.SuperTree.superclass._create.call(this);
        this.addCls("mini-supergrid");
    },
    _initEvents: function () {
        mini.SuperTree.superclass._initEvents.call(this);
    },
    _getSource: function (data) {
        if (!mini.isArray(data)) return data;
        var dataTree = new mini.DataTree();
        dataTree.loadData(data);
        return dataTree;
    },
    __OnTreeCollapse: function (e) {
        this.fire("collapse", e);
    },
    __OnTreeExpand: function (e) {

        this.fire("expand", e);
    },

    isLeaf: function (node) {
        return this.data.isLeaf(node);
    },
    getLevel: function (node) {
        return node ? node._level : 0;
    },
    isExpanded: function (node) {
        return this.data.isExpanded(node);
    },
    isAncestor: function (p, n) {
        return this.data.isAncestor(p, n);
    },
    _OnDrawCell: function (record, column, rowIndex, columnIndex) {
        var e = mini.SuperTree.superclass._OnDrawCell.call(this, record, column, rowIndex, columnIndex);
        if (this.treeColumn !== column.name) return e;

        var node = record;
        if (!node) return e;

        var cellHtml = e.cellHtml;

        var columnWidth = column.width;
        var isLeaf = this.isLeaf(node);
        var left = this.getLevel(node) * 18;

        var cls = '';
        if (!isLeaf) {
            cls = this.isExpanded(node) ? 'mini-supertree-expand' : 'mini-supertree-collapse';
        }

        var s = '<div class="mini-supertree-node ' + cls + '">';

        if (!isLeaf) {
            s += '<a href="#" onclick="return false;"  hidefocus class="mini-supertree-ec-icon" style="left:' + (left) + 'px;"></a>';
        }
        left += 18;

        if (this.showTreeIcon) {
            var icon = this.getIcon(node);

            s += '<div class="' + icon + ' mini-supertree-nodeicon" style="left:' + left + 'px;"></div>';
            left += 18;

        }

        s += '<div class="mini-supertree-nodetext" style="padding-left:' + (left + 2) + 'px;">' + cellHtml + '</div>';
        s += '</div>';
        cellHtml = s;
        e.cellHtml = cellHtml;
        return e;
    },
    getIcon: function (node) {
        var icon = node[this.iconField];
        if (!icon) {
            if (this.isLeaf(node)) icon = this.leafIcon;
            else icon = this.folderIcon;
        }
        return icon;
    },
    setTreeColumn: function (value) {
        if (this.treeColumn != value) {
            this.treeColumn = value;
            this.layoutChanged();
        }
    },
    setShowTreeIcon: function (value) {
        if (this.showTreeIcon != value) {
            this.showTreeIcon = value;
            this.layoutChanged();
        }
    },

    _OnCellMouseDown: function (record, column, e) {
        if (mini.findParent(e.target, "mini-supertree-ec-icon")) {

            this.data.toggle(record);


        } else {
            var eve = {
                record: record,
                column: column,
                field: column.field,
                htmlEvent: e
            };
            this.fire("cellmousedown", eve);
        }

    },
    _OnCellClick: function (record, column, e) {
        if (mini.findParent(e.target, "mini-supertree-ec-icon")) {
            e.stopPropagation();
        } else {
            var eve = {
                record: record,
                column: column,
                field: column.field,
                htmlEvent: e
            };
            this.fire("cellclick", eve);
        }

    },
    addNodeCls: function (node, cls) {
        this.addRowCls(node, cls);
    },
    removeNodeCls: function (node, cls) {
        this.removeRowCls(node, cls);
    },

    getAttrs: function (el) {
        var attrs = mini.SuperTree.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        var treeColumn = jq.attr("treeColumn");
        if (treeColumn) {
            attrs.treeColumn = treeColumn;
        }
        var iconField = jq.attr("iconField");
        if (iconField) {
            attrs.iconField = iconField;
        }
        var nodesField = jq.attr("nodesField");
        if (nodesField) {
            attrs.nodesField = nodesField;
        }
        var useArrows = jq.attr("useArrows");
        if (useArrows) {
            attrs.useArrows = useArrows == "false" ? false : true;
        }
        var showTreeIcon = jq.attr("showTreeIcon");
        if (showTreeIcon) {
            attrs.showTreeIcon = showTreeIcon == "false" ? false : true;
        }

        return attrs;
    }
});

mini.copyTo(mini.SuperTree.prototype, mini._SuperDataTreeApplys);

mini.regClass(mini.SuperTree, "supertree");




mini.GanttView = function () {
    mini.GanttView.superclass.constructor.call(this);

    this._TaskUIDs = {};
    this._TaskIndexs = {};
    this._linkHashed = {};


    this.topTimeScale = mini.GanttView.getTimeScale(this.topTimeScaleType);
    this.bottomTimeScale = mini.GanttView.getTimeScale(this.bottomTimeScaleType);

    this.zoomTimeScales = mini.GanttView.createZoomTimeScales();

    var d = new Date();
    this.startDate = new Date(d.getFullYear(), d.getMonth(), d.getDate());
    this.finishDate = new Date(d.getFullYear(), d.getMonth() + 1, d.getDate());
    this.setDateRange(this.startDate, this.finishDate);
    this.setData([]);
}
mini.extend(mini.GanttView, mini.Control, {
    virtualModel: false,
    viewModel: "gantt",
    setViewModel: function (value) {
        this.viewModel = value;
        this.layoutChanged();
    },
    isTrackModel: function () {
        return this.viewModel == "track";
    },
    baselineIndex: 0,
    getBaseline: function (item) {
        var bls = item.Baseline;
        return bls ? bls[this.baselineIndex] : null;
    },


    startDate: null,
    finishDate: null,
    weekStartDay: 0,

    rowHeight: 20,
    showGridLines: true,
    showLinkLines: true,
    showSummary: true,
    showCriticalPath: false,
    topTimeScaleType: "week",
    bottomTimeScaleType: "day",

    bottomTimeScaleFormatter: null,

    showLabel: true,
    labelField: "Name",
    labelAlign: "right",

    allowDrag: true,

    scrollLeft: 0,
    scrollTop: 0,
    scrollWidth: 0,
    scrollHeight: 0,
    headerHeight: 25,

    uiCls: "mini-ganttview",
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-ganttview";

        this.el.innerHTML =
                    '<div class="mini-ganttview-header"></div>' +
                    '<div class="mini-ganttview-viewport">' +
                        '<div class="mini-ganttview-gridlines"></div>' +
                        '<div class="mini-ganttview-cells"><div class="mini-ganttview-bars"></div><div class="mini-ganttview-linklines"></div></div>' +

                    '</div>' +
                    '<div class="mini-supergrid-hscroller"><div class="mini-supergrid-hscrollercontent"></div></div>' +
                    '<div class="mini-supergrid-vscroller"><div class="mini-supergrid-vscrollercontent"></div></div>';

        this._headerEl = this.el.firstChild;
        this._viewportEl = this.el.childNodes[1];
        this.cellsEl = this._viewportEl.childNodes[1];
        this.gridlinesEl = this._viewportEl.childNodes[0];

        this.barsEl = this.cellsEl.childNodes[0];
        this.linklinesEl = this.cellsEl.childNodes[1];

        this.hscrollerEl = this.el.childNodes[2];
        this.vscrollerEl = this.el.childNodes[3];
        this.hscrollerContentEl = this.hscrollerEl.firstChild;
        this.vscrollerContentEl = this.vscrollerEl.firstChild;

    },
    refreshScrollComplete: false,
    _initEvents: function () {
        mini.on(this.hscrollerEl, "scroll", this.__onHScroll, this);
        mini.on(this.vscrollerEl, "scroll", this.__onVScroll, this);


        if (mini.isFirefox) {
            var sf = this;
            function onmouseup() {

                document.onmouseup = null;


                sf.refreshScrollComplete = false;
                sf.setScrollTop(sf.scrollTop, true);

                sf.fire("scroll", {
                    direction: "vertical"
                });
            }
            this.vscrollerEl.onmousedown = function (e) {
                sf.refreshScrollComplete = true;
                document.onmouseup = onmouseup;
            }
        } else if (!mini.isOpera) {
            var sf = this;
            function onvscrollmousemove() {

                document.onmousemove = null;


                sf.refreshScrollComplete = false;
                sf.setScrollTop(sf.scrollTop, true);
                sf.fire("scroll", {
                    direction: "vertical"
                });

            }
            this.vscrollerEl.onmousedown = function (e) {
                sf.refreshScrollComplete = true;
                document.onmousemove = onvscrollmousemove;
            }
        }




        mini.on(this.el, "mousewheel", this.__OnMousewheel, this);
        mini.on(this.el, "click", this.__OnClick, this);
        mini.on(this.el, "dblclick", this.__OnDblClick, this);
        mini.on(this.el, "mousedown", this.__OnMouseDown, this);
        mini.on(this.el, "contextmenu", this.__OnContextMenu, this);


        this._initPlugins();
    },
    _initPlugins: function () {

        this._ToolTip = new mini._GanttViewToolTip(this);
        this._DragDrop = new mini._GanttViewDragDrop(this);
    },
    doLayout: function (must) {


        if (must !== false) {
            this._lastBodyWidth = this._lastBodyWidth = null;
        }
        if (this.canLayout() == false) return;

        mini.setHeight(this._headerEl, this.headerHeight);

        var vh = this.getViewportHeight();
        mini.setHeight(this._viewportEl, vh);

        this.viewportWidth = this.getViewportWidth();
        this.viewportHeight = this.getViewportHeight();

        this.bodyWidth = this.viewportWidth;
        this.bodyHeight = this.viewportHeight;

        var vheight = this.viewportHeight - 18;
        if (vheight < 0) vheight = 0;
        var vwidth = this.viewportWidth - 18
        if (vwidth < 0) vwidth = 0;

        this.vscrollerEl.style.top = this.getHeaderHeight() + "px";
        this.vscrollerEl.style.height = vheight + "px";
        this.hscrollerEl.style.width = vwidth + "px";

        this.hscrollerContentEl.style.width = this.scrollWidth + "px";
        this.vscrollerContentEl.style.height = this.scrollHeight + "px";





        if (!this._lastBodyWidth || this._lastBodyWidth != this.bodyWidth
            || !this._lastBodyHeight || this._lastBodyHeight != this.bodyHeight
            ) {
            this.refresh();

        }
        this._lastBodyWidth = this.bodyWidth;
        this._lastBodyHeight = this.bodyHeight;


    },
    getHeaderHeight: function () {
        return mini.getHeight(this._headerEl);

    },
    getViewportHeight: function () {
        var h = this.getHeight(true) - this.getHeaderHeight();
        return h;
    },
    getViewportWidth: function () {
        return this.getWidth(true);
    },

    setShowLabel: function (value) {
        if (this.showLabel != value) {
            this.showLabel = value;
            this.layoutChanged("showLabel");
        }
    },
    setShowCriticalPath: function (value) {
        if (this.showCriticalPath != value) {
            this.showCriticalPath = value;
            this.layoutChanged("showCriticalPath");
        }
    },
    setShowGridLines: function (value) {
        if (this.showGridLines != value) {
            this.showGridLines = value;
            this.layoutChanged("showGridLines");
        }
    },
    setTimeLines: function (value) {
        if (this.timeLines != value) {
            this.timeLines = value;
            this.layoutChanged("timeLines");
        }
    },
    setRowHeight: function (value) {
        value = parseInt(value);
        if (isNaN(value)) return;
        if (this.rowHeight != value) {
            this.rowHeight = value;

            this.__OnDataChanged();
        }
    },
    setScrollLeft: function (value) {
        if (value < 0) value = 0;
        if (value > this.scrollWidth) value = this.scrollWidth;
        if (this.scrollLeft != value) {

            this.allowScroll = false;
            this.hscrollerEl.scrollLeft = value;
            this.allowScroll = true;

            this.scrollLeft = this.hscrollerEl.scrollLeft;

            this.refresh();
        }
    },
    setScrollTop: function (value, must) {
        if (value < 0) value = 0;


        if (value > this.scrollHeight) value = this.scrollHeight;
        if (this.scrollTop != value || must === true) {
            this.scrollTop = value;

            this.allowScroll = false;

            this.vscrollerEl.scrollTop = value;
            if (this.isDisplay() && this.vscrollerEl.style.display != "none") {
                this.scrollTop = this.vscrollerEl.scrollTop;
            }

            this.allowScroll = true;

            this.inMaxTop = (this.scrollTop + parseInt(this.vscrollerEl.style.height)) == this.scrollHeight;


            if (this.virtualModel == false) {
                this.refresh();
            }

        }
    },
    getScrollTop: function () {
        return this.scrollTop;
    },
    getScrollLeft: function () {
        return this.scrollLeft;
    },
    setScrollHeight: function (value) {
        value = parseInt(value);
        if (isNaN(value)) value = 0;
        if (this.scrollHeight != value) {
            this.scrollHeight = value;
            this.layoutChanged();
        }
    },
    setHeaderHeight: function (value) {
        if (this.headerHeight != value) {
            this.headerHeight = value;


            mini.setHeight(this._headerEl, value);
            this.layoutChanged("headerheight");
        }
    },
    setTopTimeScale: function (value) {
        var ts = mini.GanttView.getTimeScale(value);
        if (this.bottomTimeScale.index <= ts.index) return;
        this.topTimeScale = ts;

        this.setDateRange(this._startDate, this._finishDate);
        this.layoutChanged();
    },
    setBottomTimeScale: function (value) {
        var ts = mini.GanttView.getTimeScale(value);
        if (this.topTimeScale.index >= ts.index) return;
        this.bottomTimeScale = ts;

        this.setDateRange(this._startDate, this._finishDate);
        this.layoutChanged();
    },
    isSummary: function (task) {

        if (this.showSummary) {



            return task.Summary || (task.children && task.children.length > 0) || task.TaskType == 1;


        } else {
            return false;
        }
    },
    isCritical: function (task) {
        if (this.showCriticalPath) {
            return task.Critical || task.Critical2;
        } else {
            return false;
        }
    },
    isMilestone: function (task) {
        return task.Milestone;
    },
    isWorking: function (date, timescale) {
        if (!timescale) return true;
        if (timescale.type == "day" && timescale.number == 1) {
            var day = date.getDay();
            if (day == 0 || day == 6) return false;
        }
        return true;
    },
    setDateRange: function (start, finish) {
        var sss = new Date();
        if (!mini.isDate(start)) throw new Error("start must be date type");
        if (!mini.isDate(finish)) throw new Error("finish must be date type");
        if (start.getTime() >= finish.getTime()) {
            finish = new Date(start.getFullYear(), start.getMonth(), start.getDate() + 1);
        }
        if (start < new Date(1900, 0, 1)) throw new Error("date 1900 error ");

        var bType = this.bottomTimeScale.type,
            bNumber = this.bottomTimeScale.number,
            bWidth = this.bottomTimeScale.width;


        this._startDate = this._clearDate(start);
        this._finishDate = this._clearDate(finish);

        this.startDate = this.getTimeScaleStartDate(this._startDate, bType, bNumber);
        this.finishDate = this.getTimeScaleNextDate(this._finishDate, bType, 1);

        var scrollWidth = 0;

        var finishTime = this.finishDate.getTime();

        if (bType == "hour") {
            bWidth = (bWidth / bNumber) * 24;
            bType = "day";
            bNumber = 1;
        }
        if (bType == "minutes") {
            bWidth = (bWidth / bNumber) * 60 * 24;
            bType = "day";
            bNumber = 1;
        }
        if (bType == "seconds") {
            bWidth = (bWidth / bNumber) * 60 * 60 * 24;
            bType = "day";
            bNumber = 1;
        }

        for (var d = this._cloneDate(this.startDate); d.getTime() <= finishTime; ) {
            scrollWidth += bWidth;

            d = this.getTimeScaleNextDate(d, bType, bNumber);

        }

        this.scrollWidth = scrollWidth;







    },






    setData: function (data) {
        if (this.data == data) return;
        if (typeof data == "string") {
            data = mini.get(data);
        }
        if (!data) data = [];
        if (data instanceof Array) {
            data = this._getSourceFromArray(data);
        }

        if (this.data) this._unbindSource();
        if (this.data) this.data.destroy();

        this.data = data;
        this._bindSource();

        this.fire('datachanged');

        this.__OnDataChanged();
    },
    getVisibleRows: function () {
        return this.data.getVisibleRows();
    },
    _getSourceFromArray: function (data) {
        if (!mini.isArray(data)) return data;
        var dataTree = new mini.DataTree();
        dataTree.loadData(data);
        return dataTree;
    },
    _bindSource: function () {
        this.data.on('datachanged', this.__OnDataChanged, this);
    },
    _unbindSource: function () {
        this.data.un('datachanged', this.__OnDataChanged, this);
    },
    showed: false,
    __OnDataChanged: function (e) {

        this._lastBodyWidth = this._lastBodyHeight = null;

        var taskUIDs = this._TaskUIDs = {};
        var indexs = this._TaskIndexs = {};
        var tops = this._TaskTops = {};

        var data = this.getVisibleRows();
        var scrollHeight = 0;

        for (var i = 0, l = data.length; i < l; i++) {
            var r = data[i];
            var h = mini.isNumber(r._height) ? r._height : this.rowHeight;

            taskUIDs[r.UID] = r;
            indexs[r._id] = i;
            tops[r._id] = scrollHeight;

            scrollHeight += h;
        }
        if (this.virtualModel == false) {
            this.scrollHeight = scrollHeight;
        }























        this.refresh();
    },
    refresh: function () {
        if (this.refreshTimer) clearTimeout(this.refreshTimer);
        var sf = this;
        this.refreshTimer = setTimeout(function () {
            sf.doRefresh();
        }, 1);
    },
    doRefresh: function () {

        if (this.refreshScrollComplete) return;


        var sss = new Date();

        this.vscrollerContentEl.style.height = this.scrollHeight + "px";


        var region = this.markRegion();

        this._refreshHeader(region);

        this._refreshViewport(region);


        this._doShowGridLines(region);


        this.linklinesEl.innerHTML = '';
        this._deferLinkLines();



        this.fire("refresh");
    },
    _deferLinkLines: function () {

        this.linklinesEl.innerHTML = '';
        var sf = this;
        if (this._drawLineTimer) clearTimeout(this._drawLineTimer);
        this._drawLineTimer = setTimeout(function () {
            var region = sf.markRegion();
            sf._doShowLinkLines(region);
        }, 100);
    },
    headerCellOffset: 2,
    _refreshHeader: function (region) {
        var startDate = region.startDate, endDate = region.endDate;
        var endTime = endDate.getTime();
        var h = this.headerHeight / 2;

        var boxModel = jQuery.boxModel;

        var bType = this.bottomTimeScale.type,
            bNumber = this.bottomTimeScale.number,
            bWidth = this.bottomTimeScale.width,
            balign = this.bottomTimeScale.align || "left",
            btooltip = this.bottomTimeScale.tooltip,
            bformatter = this.bottomTimeScale.formatter;
        var tType = this.topTimeScale.type,
            ttooltip = this.topTimeScale.tooltip,
            tformatter = this.topTimeScale.formatter,
            tNumber = this.topTimeScale.number,
            talign = this.topTimeScale.align || "left";

        var renderer = this.headerCellRenderer;
        var event = {};



        var sb = [];

        sb[sb.length] = '<div style="top:0px;height:' + h + 'px;" class="mini-ganttview-toptimescale">';
        var left = this.getOffsetByDate(startDate);

        event.timescale = this.topTimeScale;
        event.position = "top";

        for (var date = startDate; date.getTime() <= endTime; ) {
            var next = this.getTimeScaleNextDate(date, tType, tNumber);

            var topLeft = this.getOffsetByDate(date);
            var topRight = this.getOffsetByDate(next);
            var offset = topLeft - left;
            var w = topRight - topLeft;

            var v = tformatter(date, "top");


            event.date = date;
            event.html = v;
            event.tooltip = ttooltip(date, "top");
            event.cls = "";
            event.style = "";
            if (renderer) renderer(event);


            sb[sb.length] = '<div time="';
            sb[sb.length] = date.getTime();
            sb[sb.length] = '" title="';
            sb[sb.length] = event.tooltip;
            sb[sb.length] = '" class="mini-ganttview-headercell ';
            sb[sb.length] = event.cls;
            sb[sb.length] = '" style="';
            sb[sb.length] = event.style;
            sb[sb.length] = ';left:';
            sb[sb.length] = offset;
            sb[sb.length] = 'px;width:';
            sb[sb.length] = boxModel ? w - 5 : w;
            sb[sb.length] = 'px;height:';
            sb[sb.length] = boxModel ? h - this.headerCellOffset : h;
            sb[sb.length] = 'px;top:0px;line-height:';
            sb[sb.length] = h - 3;
            sb[sb.length] = 'px;">';
            sb[sb.length] = event.html;
            sb[sb.length] = '</div>';

            date = next;
        }
        sb[sb.length] = '</div>';


        sb[sb.length] = '<div style="top:' + h + 'px;height:' + h + 'px;" class="mini-ganttview-bottomtimescale">';

        event.timescale = this.bottomTimeScale;
        event.position = "bottom";



        for (var date = startDate; date.getTime() <= endTime; ) {
            var v = bformatter(date, "bottom", tType);
            var next = this.getTimeScaleNextDate(date, bType, bNumber);

            var topLeft = this.getOffsetByDate(date);
            var topRight = this.getOffsetByDate(next);
            var offset = topLeft - left;
            var w = topRight - topLeft;

            event.date = date;
            event.html = v;
            event.tooltip = btooltip(date, "bottom", tType);
            event.cls = "";
            event.style = "";
            if (renderer) renderer(event);

            sb[sb.length] = '<div time="';
            sb[sb.length] = date.getTime();
            sb[sb.length] = '" title="';
            sb[sb.length] = event.tooltip;
            sb[sb.length] = '" class="mini-ganttview-headercell ';
            sb[sb.length] = event.cls;
            sb[sb.length] = '" style="';
            sb[sb.length] = event.style;
            sb[sb.length] = ';left:';
            sb[sb.length] = offset;
            sb[sb.length] = 'px;width:';
            sb[sb.length] = boxModel ? w - 1 : w;
            sb[sb.length] = 'px;height:';
            sb[sb.length] = boxModel ? h - this.headerCellOffset : h;
            sb[sb.length] = 'px;top:0px;line-height:';
            sb[sb.length] = h - 3;
            sb[sb.length] = 'px;">';
            sb[sb.length] = event.html;
            sb[sb.length] = '</div>';


            date = next;
        }
        sb[sb.length] = '</div>';

        this._headerEl.innerHTML = sb.join("");
    },
    _refreshViewport: function (region, returns) {

        var rowHeight = this.rowHeight;
        var tType = this.topTimeScale.type, bType = this.bottomTimeScale.type;
        var data = this.getVisibleRows();
        var startRow = region.startRow, endRow = region.endRow;
        var offset = this.getOffsetByDate(region.startDate);
        this._ReadOnly = this.isReadOnly();

        var viewBox = this.getViewportBounds(region);
        var VLeft = viewBox.left, VTop = viewBox.top, VWidth = viewBox.width, VHeight = viewBox.height;

        var sb = [];

        var isTrack = this.isTrackModel();
        var isBaseline = false;

        var refreshItemID = this._refreshItem ? this._refreshItem._id : null;
        for (var i = startRow, l = endRow; i <= l; i++) {
            var record = data[i];
            if (!record) continue;
            if (!mini.isDate(record.Start) || !mini.isDate(record.Finish)
                || (refreshItemID && refreshItemID != record._id)
            ) {
                continue;
            }

            var itemBox = this.getItemBox(record, VLeft, VTop);
            this.createItem(record, itemBox, sb, refreshItemID, isTrack, false);
        }


        if (isTrack) {

            for (var i = startRow, l = endRow; i <= l; i++) {
                var record = data[i];
                if (!record) continue;
                var baseline = this.getBaseline(record);
                if (!baseline || !baseline.Start || !baseline.Finish) continue;
                var itemBox = this.getItemBox(record, VLeft, VTop, baseline);
                this.createItem(record, itemBox, sb, refreshItemID, isTrack, true);
            }
        }

        if (returns) return sb.join("");

        this.barsEl.innerHTML = sb.join("");
    },
    createItem: function (record, itemBox, sb, refreshItemID, isTrack, isBaseLine) {
        var h = itemBox.height;
        var top = itemBox.top;
        var left = itemBox.left;
        var right = itemBox.right;
        var w = right - left;
        if (w < 0) {
            return;
        }
        if (w < 2) w = 2;




        var boxModel = jQuery.boxModel;

        var percentComplete = record.PercentComplete || 0;
        var percentWidth = parseInt(w * percentComplete / 100);
        if (isBaseLine) percentWidth = 0;

        var isMilestone = this.isMilestone(record);

        var cls = "mini-gantt-item ";
        if (this.isCritical(record)) cls += " mini-gantt-critical ";
        var ex = this._OnItemDragStart(record, "move");
        if (!isBaseLine && !this._ReadOnly && !ex.cancel) cls += " mini-gantt-move ";
        if (isBaseLine) cls += " mini-gantt-baseline ";
        if (isTrack == true) cls += " mini-gantt-track ";

        var e = this._OnDrawItem(record, itemBox, isBaseLine);
        if (e.itemCls) {
            cls += " " + e.itemCls + " ";
        }
        if (e.itemHtml === null) {

            if (this.isSummary(record) && !isBaseLine) {

                sb[sb.length] = '<div id="';
                sb[sb.length] = record._id;
                sb[sb.length] = '" class="';
                sb[sb.length] = cls;
                sb[sb.length] = ' mini-gantt-summary" style="left:';
                sb[sb.length] = left;
                sb[sb.length] = 'px;top:';
                sb[sb.length] = top;
                sb[sb.length] = 'px;width:';
                sb[sb.length] = w;
                sb[sb.length] = 'px;"><div class="mini-gantt-summary-left"></div><div class="mini-gantt-summary-right"></div></div>';

            } else if (isMilestone) {
                if (isBaseLine) cls += " mini-gantt-baselinemilestone ";
                sb[sb.length] = '<div id="';
                sb[sb.length] = record._id;
                sb[sb.length] = '" class="';
                sb[sb.length] = cls;
                sb[sb.length] = ' mini-gantt-milestone" style="left:';
                sb[sb.length] = left;
                sb[sb.length] = 'px;top:';
                sb[sb.length] = top;
                sb[sb.length] = 'px;"></div>';
            } else {
                sb[sb.length] = '<div id="';
                sb[sb.length] = record._id;
                sb[sb.length] = '" class="';
                sb[sb.length] = cls;
                sb[sb.length] = '" style="left:';
                sb[sb.length] = left;
                sb[sb.length] = 'px;top:';
                sb[sb.length] = top;
                sb[sb.length] = 'px;height:';
                sb[sb.length] = boxModel ? h - 2 : h;
                sb[sb.length] = 'px;width:';
                sb[sb.length] = boxModel ? w - 2 : w;
                sb[sb.length] = 'px;"><div class="mini-gantt-percentcomplete" style="width:';
                sb[sb.length] = percentWidth;
                sb[sb.length] = 'px;"></div></div>';
            }
        } else {

            sb[sb.length] = e.itemHtml;
        }


        if (!isBaseLine && e.showLabel && !refreshItemID) {
            var label = mini.htmlEncode(e.label);
            var labelLeft = (right) + 5;
            if (isMilestone) {
                labelLeft += 10;
            }

            sb[sb.length] = '<div id="';
            sb[sb.length] = record._id;
            if (e.labelAlign == "left") {
                sb[sb.length] = '" class="mini-gantt-label" style="text-align:right;width:250px;left:';
                var labelRight = left - 255;
                sb[sb.length] = labelRight;
            } else {
                sb[sb.length] = '" class="mini-gantt-label" style="left:';
                sb[sb.length] = labelLeft;
            }

            sb[sb.length] = 'px;top:';
            sb[sb.length] = top - 4;
            sb[sb.length] = 'px;">';
            sb[sb.length] = label;
            sb[sb.length] = '</div>';



            if (e.label2) {
                sb[sb.length] = '<div id="';
                sb[sb.length] = record._id;
                if (e.label2Align == "left") {
                    sb[sb.length] = '" class="mini-gantt-label" style="text-align:right;width:250px;left:';
                    var labelRight = left - 255;
                    sb[sb.length] = labelRight;
                } else {
                    sb[sb.length] = '" class="mini-gantt-label" style="left:';
                    sb[sb.length] = labelLeft;
                }

                sb[sb.length] = 'px;top:';
                sb[sb.length] = top - 4;
                sb[sb.length] = 'px;">';
                sb[sb.length] = mini.htmlEncode(e.label2);
                sb[sb.length] = '</div>';
            }
        }
    },
    refreshItem: function (item) {
        item = this.getItem(item);
        if (!item) return;
        this._refreshItem = item;
        var id = item._id;


        var region = this.markRegion();
        var doms = this.barsEl.getElementsByTagName('div');
        for (var i = 0, l = doms.length; i < l; i++) {
            var dom = doms[i];
            if (dom && (dom.id == this.id + "$" + id || dom.id == id)) {
                mini.removeNode(dom);
            }
        }


        var html = this._refreshViewport(region, true);
        mini.append(this.barsEl, html);

        this._doShowLinkLines(region);

        this._refreshItem = null;
    },
    _doShowGridLines: function (region) {

        var sss = new Date();
        var sb = [];
        var tType = this.topTimeScale.type,
            bType = this.bottomTimeScale.type,
            bNumber = this.bottomTimeScale.number;
        var rowHeight = this.rowHeight;
        var data = this.getVisibleRows();
        var boxModel = jQuery.boxModel;

        var startRow = region.startRow, endRow = region.endRow;
        var vwidth = this.viewportWidth, vheight = this.viewportHeight;
        if (this.showGridLines) {


            var top = 0;
            for (var i = startRow, l = endRow; i <= l; i++) {
                var record = data[i];
                if (!record) continue;
                var h = record._height ? record._height : rowHeight;


                var e = { row: record, cls: '' }
                this.fire('drawrow', e);

                sb[sb.length] = '<div id="';
                sb[sb.length] = record._id + "row";
                sb[sb.length] = '" class="mini-gantt-row ';
                sb[sb.length] = e.cls;
                sb[sb.length] = '" style="top:';
                sb[sb.length] = top;
                sb[sb.length] = 'px;height:';
                sb[sb.length] = boxModel ? h - 1 : h;
                sb[sb.length] = 'px;width:';
                sb[sb.length] = vwidth;
                sb[sb.length] = 'px;"></div>';

                top += h;
            }


            var startDate = region.startDate, endDate = region.endDate;

            var endTime = endDate.getTime();
            var left = this.getOffsetByDate(region.startDate);
            for (var date = startDate; date.getTime() <= endTime; ) {
                var next = this.getTimeScaleNextDate(date, bType, bNumber);

                var topLeft = this.getOffsetByDate(date);
                var topRight = this.getOffsetByDate(next);
                var offset = topLeft - left;
                var w = topRight - topLeft;

                var cls = "mini-gantt-column ";
                var isWorking = this.isWorking(date, this.bottomTimeScale);
                if (!isWorking) {
                    cls += "mini-gantt-offday ";
                }

                var e = { date: date, cls: '' }
                this.fire('drawcolumn', e);

                sb[sb.length] = '<div class="';
                sb[sb.length] = cls;
                sb[sb.length] = e.cls;
                sb[sb.length] = '" style="left:';
                sb[sb.length] = offset;
                sb[sb.length] = 'px;width:';
                sb[sb.length] = boxModel ? w - 1 : w;
                sb[sb.length] = 'px;height:';
                sb[sb.length] = vheight;
                sb[sb.length] = 'px;" ></div>';

                date = next;
            }



            var left = this.getOffsetByDate(region.startDate);
            var top = 0;
            for (var i = startRow, l = endRow; i <= l; i++) {
                var record = data[i];
                if (!record) continue;
                var h = record._height ? record._height : rowHeight;

                for (var date = startDate; date.getTime() <= endTime; ) {
                    var next = this.getTimeScaleNextDate(date, bType, bNumber);

                    var topLeft = this.getOffsetByDate(date);
                    var topRight = this.getOffsetByDate(next);
                    var offset = topLeft - left;
                    var w = topRight - topLeft;

                    var e = { row: record, date: date, cls: '', html: '' }
                    this.fire('drawcell', e);

                    if (e.cls || e.html) {
                        sb[sb.length] = '<div class="mini-gantt-cell ';
                        sb[sb.length] = e.cls;
                        sb[sb.length] = '" style="left:';
                        sb[sb.length] = offset;
                        sb[sb.length] = 'px;top:';
                        sb[sb.length] = top;
                        sb[sb.length] = 'px;height:';
                        sb[sb.length] = boxModel ? h - 1 : h;
                        sb[sb.length] = 'px;width:';
                        sb[sb.length] = boxModel ? w - 1 : w;
                        sb[sb.length] = 'px;">';
                        sb[sb.length] = e.html;
                        sb[sb.length] = '</div>';
                    }

                    date = next;
                }


                top += h;
            }
        }


        if (this.timeLines) {
            var LEFT = this.getOffsetByDate(region.startDate);
            for (var i = 0, l = this.timeLines.length; i < l; i++) {
                var tline = this.timeLines[i];
                var lineDate = tline.date;
                if (lineDate) {
                    var title = tline.text || "";
                    var style = tline.style || "";
                    var left = this.getOffsetByDate(lineDate) - LEFT;
                    var html = tline.html || '';
                    sb[sb.length] = '<div title="' + title + '" style="' + style + ';left:' + left + 'px;height:' + (vheight - 18) + 'px;" class="mini-gantt-timeline">' + html + '</div>'

                    var css = tline.position == 'top' ? "top: 2px;" : ("top:" + (vheight - 42) + "px;");
                    if (tline.position == 'top' || tline.position == 'bottom') {
                        sb[sb.length] = '<div style="' + css + 'left:' + (left + 4) + 'px;position:absolute;z-index:100;white-space:nowrap; " class="mini-gantt-timeline-label">' + title + '</div>'
                    }

                }
            }
        }

        this.gridlinesEl.innerHTML = sb.join("");


    },
    markRegion: function () {

        var x = this.scrollLeft, y = this.scrollTop;
        if (mini.isNull(this.viewportWidth)) {
            this.viewportWidth = this.getViewportWidth();
            this.viewportHeight = this.getViewportHeight();
        }
        var width = this.viewportWidth, height = this.viewportHeight;
        var bottom = y + height, right = x + width;

        var rowHeight = this.rowHeight, timeScaleWidth = this.getBottomTimeScaleWidth();
        var tType = this.topTimeScale.type, bType = this.bottomTimeScale.type;
        var data = this.getVisibleRows();

        var startRow = 0, endRow = 0;


        var top = 0;
        for (var i = 0, l = data.length; i < l; i++) {
            var r = data[i];
            var h = r._height ? r._height : rowHeight;
            top += h;
            if (top >= y) {
                startRow = i;


                break;
            }
        }

        for (var i = startRow, l = data.length; i < l; i++) {
            var r = data[i];
            var h = r._height ? r._height : rowHeight;
            if (top > bottom) {
                endRow = i;
                break;
            }
            top += h;
        }
        if (endRow == 0) endRow = data.length - 1;




        var startDate = this.getTimeScaleStartDate(this.getDateByOffset(x), bType, this.bottomTimeScale.number);
        var endDate = this.getTimeScaleStartDate(this.getDateByOffset(x + width), bType);

        var region = {
            startRow: startRow,
            endRow: endRow,
            startDate: startDate,
            endDate: endDate
        };

        if (this.inMaxTop) {

            var startRow = region.startRow;
            var count = data.length - region.endRow;
            region.startRow += count;
            region.endRow += count;






        }

        this.viewRegion = region;
        return region;
    },

    _vscrollTimer: null,
    _hscrollTimer: null,
    __onVScroll: function (e) {

        if (this.allowScroll === false) {

            return;
        }
        this._scrollLeft = this.hscrollerEl.scrollLeft;
        this._scrollTop = this.vscrollerEl.scrollTop;


        var sf = this;
        if (this._vscrollTimer) return;
        this._vscrollTimer = setTimeout(function () {
            sf.setScrollTop(sf._scrollTop);
            sf._vscrollTimer = null;

            sf.fire("scroll", {
                direction: "vertical"
            });
        }, 30);
    },
    __onHScroll: function (e) {
        if (this.allowScroll === false) return;
        this._scrollLeft = this.hscrollerEl.scrollLeft;
        this._scrollTop = this.vscrollerEl.scrollTop;

        var sf = this;
        if (this._hscrollTimer) return;
        this._hscrollTimer = setTimeout(function () {
            sf.setScrollLeft(sf._scrollLeft);
            sf._hscrollTimer = null;

            sf.fire("scroll", {
                direction: "horizontal"
            });
        }, 30);
    },
    __OnMousewheel: function (e, delta) {
        var oe = e;
        var e = e.wheelDelta ? e : e.originalEvent;

        var wheelDelta = e.wheelDelta || -e.detail * 24;
        var top = this.vscrollerEl.scrollTop;

        top -= wheelDelta;
        this.vscrollerEl.scrollTop = top;

        if (top == this.vscrollerEl.scrollTop) {
            oe.preventDefault();
        } else {

        }
    },

    getHeaderCellByEvent: function (event) {
        var t = mini.findParent(event.target, 'mini-ganttview-headercell');
        if (!t) return null;

        var position = mini.findParent(event.target, "mini-ganttview-toptimescale") ? "top" : "bottom";
        var timescale = position == "top" ? this.topTimeScale : this.bottomTimeScale;
        var date = new Date(parseInt($(t).attr("time")));
        return {
            position: position,
            timescale: timescale,
            date: date
        };
    },



    __OnClick: function (e) {
        var item = this.getItemByEvent(e);
        if (item) this._OnItemClick(item, e);

        var headerCell = this.getHeaderCellByEvent(e);
        if (headerCell) {
            if (this.headerCellClick) this.headerCellClick(headerCell);
        }

        if (mini.isAncestor(this._viewportEl, e.target) && !mini.findParent(e.target, 'mini-gantt-item')) {









            var date = this.getDateByPageX(e.pageX);

            var row = this.getRowByPageY(e.pageY);

            this.fire('cellclick', { date: date, row: row });

        }


    },
    __OnDblClick: function (e) {
        var item = this.getItemByEvent(e);
        if (item) this._OnItemDblClick(item, e);

        var link = this.getLinkByEvent(e);
        if (link) {
            if (confirm(mini.Gantt.DeleteLink)) {

                this.owner.removeLink(link);
                this.owner.fire("linkremove", { link: link });
            } else {

            }
            return;
        }

        if (mini.isAncestor(this._viewportEl, e.target) && !mini.findParent(e.target, 'mini-gantt-item')) {



            var date = this.getDateByPageX(e.pageX);

            var row = this.getRowByPageY(e.pageY);

            this.fire('celldblclick', { date: date, row: row });

        }
    },
    __OnMouseDown: function (e) {
        var item = this.getItemByEvent(e);
        if (item) this._OnItemMouseDown(item, e);
    },
    __OnContextMenu: function (e) {

        e.preventDefault();
        e.stopPropagation();

        var item = this.getItemByEvent(e);
        if (item) this._OnItemContextMenu(item, e);
    },


    getRowByPageY: function (y) {
        return this.getDragRecord(y);
    },

    getBottomTimeScaleWidth: function () {
        return this.bottomTimeScale.width;
    },
    getDateByPageX: function (x) {
        var region = this.viewRegion;
        var viewBox = this.getViewportBounds(region);
        var bodyBox = this.getViewportBox(region);
        var offset = x - bodyBox.x + viewBox.left;
        return this.getDateByOffset(offset);
    },
    getDragRecord: function (y) {
        var ganttview = this;
        var region = ganttview.markRegion();
        var viewBox = ganttview.getViewportBounds(region);
        var VLeft = viewBox.left, VTop = viewBox.top, VWidth = viewBox.width, VHeight = viewBox.height;

        var viewportBox = ganttview.getViewportBox();

        if (y < viewportBox.y || y > viewportBox.bottom) return null;
        var y = y - viewportBox.y;

        var dropNode = null;

        var data = ganttview.getVisibleRows();
        for (var i = region.startRow, l = region.endRow; i <= l; i++) {
            var node = data[i];
            if (!node) continue;

            var top = ganttview._TaskTops[node._id] - VTop;
            var height = mini.isNumber(node._height) ? node._height : ganttview.rowHeight;

            if (top <= y && y <= top + height) {
                dropNode = node;
                break;
            }
        }
        return dropNode;
    },
    getDateByOffset: function (offset) {


        var start = new Date(1900, 0, 1), finish = new Date(5000, 0, 1);

        var bType = this.bottomTimeScale.type;
        var sf = this;


        var width = this.bottomTimeScale.width / this.bottomTimeScale.number;

        function findDate() {
            var halfDate = new Date(start.getTime() + (finish - start) / 2);
            var nowOffset = sf.getOffsetByDate(halfDate);
            var jian = nowOffset - offset;
            if (Math.abs(jian) <= width) {

                switch (bType) {
                    case "year":
                        halfDate.setMonth(halfDate.getMonth() + -(12 / width) * jian);
                        break;
                    case "halfyear":
                        halfDate.setMonth(halfDate.getMonth() + -(6 / width) * jian);
                        break;
                    case "quarter":
                        halfDate.setMonth(halfDate.getMonth() + -(4 / width) * jian);
                        break;
                    case "month":
                        halfDate.setDate(halfDate.getDate() + -(30 / width) * jian);
                        break;
                    case "tendays":
                        halfDate.setDate(halfDate.getDate() + -(10 / width) * jian);
                        break;
                    case "week":
                        halfDate.setDate(halfDate.getDate() + -(7 / width) * jian);
                        break;
                    case "day":
                        halfDate.setHours(halfDate.getHours() + -(24 / width) * jian);
                        break;
                    case "hour":
                        halfDate.setMinutes(halfDate.getMinutes() + -(60 / width) * jian);
                        break;
                    case "minutes":
                        halfDate.setSeconds(halfDate.getSeconds() + -(60 / width) * jian);
                        break;
                    case "seconds":
                        halfDate.setSeconds(halfDate.getSeconds() + -jian / width);
                        break;
                }
                return halfDate;
            } else if (jian > 0) {
                finish = halfDate;
            } else if (jian < 0) {
                start = halfDate;
            }
            return findDate();
        }
        var date = findDate();
        return date;
    },

    getOffsetByDate: function (date) {
        var time = date - this.startDate;
        var oneWidth = this.bottomTimeScale.width / this.bottomTimeScale.number;
        switch (this.bottomTimeScale.type) {
            case "year":
                var Year = time / (1000 * 60 * 60 * 24 * 365);
                sw = oneWidth * Year;
                break;
            case "halfyear":
                var HalfYear = time / (1000 * 60 * 60 * 24 * 365 / 2);
                sw = oneWidth * HalfYear;
                break;
            case "quarter":
                var Quarter = time / (1000 * 60 * 60 * 24 * 365 / 4);
                sw = oneWidth * Quarter;
                break;
            case "month":
                var Month = time / (1000 * 60 * 60 * 24 * 30);
                sw = oneWidth * Month;
                break;
            case "tendays":
                var TenDays = time / (1000 * 60 * 60 * 24 * 10);
                sw = oneWidth * TenDays;
                break;
            case "week":
                var Week = time / (1000 * 60 * 60 * 24 * 7);
                sw = oneWidth * Week;
                break;
            case "day":
                var Day = time / (1000 * 60 * 60 * 24);
                sw = oneWidth * Day;
                break;
            case "hour":
                var Hour = time / (1000 * 60 * 60);
                sw = oneWidth * Hour;
                break;
            case "minutes":
                var Minutes = time / (1000 * 60);
                sw = oneWidth * Minutes;
                break;
            case "seconds":
                var Seconds = time / 1000;
                sw = oneWidth * Seconds;
                break;
        }

        return parseInt(sw);
    },
    _cloneDate: function (date) {
        return new Date(date.getTime());
    },
    _clearDate: function (date) {
        return new Date(date.getFullYear(), date.getMonth(), date.getDate());
    },
    _addDate: function (date, type, num) {
        date = new Date(date.getTime());
        switch (type.toLowerCase()) {
            case "year":
                date.setFullYear(date.getFullYear() + num);
                break;






            case "month":
                date.setMonth(date.getMonth() + num);
                break;
            case "week":
                date.setDate(date.getDate() + (num * 7));
                break;
            case "day":
                date.setDate(date.getDate() + num);
                break;
            case "hour":
                date.setHours(date.getHours() + num);
                break;
            case "minutes":
                date.setMinutes(date.getMinutes() + num);
                break;
            case "seconds":
                date.setSeconds(date.getSeconds() + num);
                break;
        }
        return date;
    },
    getViewportBox: function () {

        var box = this.getBox(true);
        var headerHeight = this.getHeaderHeight();
        box.y += headerHeight;
        box.height -= headerHeight;
        box.bottom = box.y + box.height;
        return box;
    },
    getViewportBounds: function (region) {
        var row = this.getVisibleRows()[region.startRow];
        var box = {
            left: this.getOffsetByDate(region.startDate),
            top: row ? this._TaskTops[row._id] : 0,
            width: this.viewportWidth,
            height: this.viewportHeight
        };
        box.right = box.left + box.width;
        box.bottom = box.top + box.height;
        return box;
    },
    getItemTop: function (item) {
        return this._TaskTops[item._id];
    },
    getItemHeight: function (item) {
        var h = mini.isNumber(item._height) ? item._height : this.rowHeight;
        return h;
    },


    topOffset: 4,
    baselinePosition: 'bottom',

    baseLineBarHeight: 7,

    getItemBox: function (item, leftOffset, topOffset, baseline) {
        var start = baseline ? baseline.Start : item.Start;
        var finish = baseline ? baseline.Finish : item.Finish;

        var left = this.getOffsetByDate(start);


        if (this.isMilestone(item) && finish) {
            finish = new Date(finish.getFullYear(), finish.getMonth(), finish.getDate(), 23, 59, 59);
        }
        var right = this.getOffsetByDate(finish);
        var width = right - left;



        var height = this.getItemHeight(item);
        var top = this.getItemTop(item);

        leftOffset = leftOffset || 0;
        topOffset = topOffset || 0;
        left -= leftOffset;
        top -= topOffset;
        var box = {
            left: left,
            top: top + this.topOffset,
            width: width,
            height: height - 9,
            right: left + width,
            bottom: top + height
        };
        if (this.isMilestone(item) && !this.isSummary(item)) {
            box.width = 12;

            box.left = box.right - box.width;

            box.top = box.top - 3;
            box.height = 18;
            box.bottom = box.top + box.height;


        } else {
            if (this.isTrackModel()) {

                var barHeight = this.baseLineBarHeight;

                if (this.baselinePosition == 'bottom') {
                    if (baseline) {
                        box.top = top + height / 2 + 1;
                        box.height = barHeight;
                        box.bottom = box.top + box.height;
                    } else {
                        box.top = top + 2;
                        box.height = barHeight;
                        box.bottom = box.top + box.height;
                    }
                } else {
                    if (!baseline) {
                        box.top = top + height / 2 + 1;
                        box.height = barHeight;
                        box.bottom = box.top + box.height;
                    } else {
                        box.top = top + 2;
                        box.height = barHeight;
                        box.bottom = box.top + box.height;
                    }
                }
            }
        }
        box.x = box.left;
        box.y = box.top;

        return box;
    },
    getViewStartItem: function () {

        this.markRegion();

        return this.getVisibleRows()[this.viewRegion.startRow];
    },
    getViewStartDate: function () {
        return this.viewRegion.startDate;
    },

    getItem: function (id) {
        if (typeof id == "object") id = id._id;

        return this.data.getby_id(id);
    },
    getLink: function (item, preItem) {
        item = this.getItem(item);
        preItem = this.getItem(preItem);
        var link = this._linkHashed[item._id + "$$" + preItem._id];
        if (link) link.TaskUID = item.UID;
        if (!link) {
            link = this._linkHashed[preItem._id + "$$" + item._id];
            if (link) link.TaskUID = preItem.UID;
        }
        return link;
    },
    getItemByEvent: function (event) {
        var t = mini.findParent(event.target, 'mini-gantt-item');
        var id = t ? t.id : event.target.id;
        if (t) {
            var ids = id.split("$");
            id = ids[ids.length - 1];
        }
        var item = this.getItem(id);
        if (!item) {
            var t = mini.findParent(event.target, 'mini-gantt-item');
            if (t) {
                id = t.id;
                item = this.getItem(id);
            }
        }
        return item;
    },
    getLinkByEvent: function (event) {
        if (!mini.findParent(event.target, 'mini-gantt-line')) return;

        var id = event.target.id;
        var ids = id.split("$$");

        var link = this.getLink(ids[0], ids[1]);

        return link;
    },

    _doShowLinkLines: function (region) {
        if (!this.showLinkLines) return;
        var data = this.getVisibleRows();
        if (data.length == 0) return;
        var w = this.getBottomTimeScaleWidth();
        var rowHeight = this.rowHeight;
        var startRow = region.startRow, endRow = region.endRow;
        var startDate = region.startDate, endDate = region.endDate;
        var startTime = startDate.getTime(), endTime = endDate.getTime();



        var taskUIDs = this._TaskUIDs, indexs = this._TaskIndexs;
        var drawLinks = [];
        var linkHashed = this._linkHashed = {};
        var refreshItemId = this._refreshItem ? this._refreshItem._id : null;

        for (var i = 0, l = data.length; i < l; i++) {
            var task = data[i];
            var taskUID = task.UID;
            if (!task.Start || !task.Finish) continue;

            var start1 = task.Start.getTime(), finish1 = task.Finish.getTime();

            var index1 = indexs[task._id];
            var links = task.PredecessorLink;
            if (!links || links.length == 0) continue;

            for (var j = 0, k = links.length; j < k; j++) {
                var link = links[j];
                var preTask = taskUIDs[link.PredecessorUID];
                if (!preTask) continue;

                if (refreshItemId && (task._id != refreshItemId && preTask._id != refreshItemId)) continue;

                linkHashed[task._id + "$$" + preTask._id] = link;

                if (!preTask.Start || !preTask.Finish) continue;
                var start2 = preTask.Start.getTime(), finish2 = preTask.Finish.getTime();
                var index2 = indexs[preTask._id];







                if (
                        (index1 >= startRow && index1 <= endRow)
                    || (index2 >= startRow && index2 <= endRow)
                    || (index1 < startRow && index2 > endRow)
                    || (index2 < startRow && index1 > endRow)
                ) {

                    if (start1 > endTime && start2 > endTime) {
                    } else if (finish1 < startTime && finish2 < startTime) {
                    } else {
                        link.TaskUID = task.UID;
                        drawLinks.push(link);
                    }
                }
            }
        }


        this._doDrawLinks(drawLinks, region);
    },
    getFromTo: function (link) {
        var from = this._TaskUIDs[link.PredecessorUID];
        var to = this._TaskUIDs[link.TaskUID];
        return [from, to];
    },
    getLinkType: function (link) {
        return link.Type;
    },


    _doDrawLinks: function (drawLinks, region) {
        var data = this.getVisibleRows();
        if (data.length == 0) return;
        var timeWidth = this.getBottomTimeScaleWidth();
        var rowHeight = this.rowHeight;
        var startRow = region.startRow, endRow = region.endRow;
        var startDate = region.startDate, endDate = region.endDate;
        var startTime = startDate.getTime(), endTime = endDate.getTime();
        var taskUIDs = this._TaskUIDs, indexs = this._TaskIndexs;


        var viewBox = this.getViewportBounds(region);
        var VLeft = viewBox.left, VTop = viewBox.top, VWidth = viewBox.width, VHeight = viewBox.height;


        var drawLines = [];
        for (var i = 0, l = drawLinks.length; i < l; i++) {
            var link = drawLinks[i];
            var fromTo = this.getFromTo(link);
            var from = fromTo[0];
            var to = fromTo[1];



            if (!from || !to) continue;
            if (!from.Start || !from.Finish) continue;
            if (!to.Start || !to.Finish) continue;
            var fromBox = this.getItemBox(from, VLeft, VTop);
            var toBox = this.getItemBox(to, VLeft, VTop);



            if (fromBox.right < 0 && toBox.right < 0) continue;
            if (fromBox.bottom < 0 && toBox.bottom < 0) continue;
            if (fromBox.left > VWidth && toBox.left > VWidth) continue;
            if (fromBox.top > VHeight && toBox.top < VHeight) continue;

            var drawLine = [];
            drawLine.id = from._id + "$$" + to._id;

            switch (parseInt(this.getLinkType(link))) {
                case 0:
                    if (fromBox.right < toBox.right) {
                        var fromTop = fromBox.top + (fromBox.height / 2);
                        var toTop = toBox.top;
                        drawLine.arrowType = 'bottom';
                        if (fromBox.top > toBox.top) {
                            toTop = toBox.bottom;
                            drawLine.arrowType = 'top';
                        }

                        var p1 = [fromBox.right, fromTop];
                        var p2 = [toBox.right, fromTop];
                        var p3 = [toBox.right, toTop];
                        drawLine.push([p1, p2]);
                        drawLine.push([p2, p3]);
                    } else {
                        var fromTop = fromBox.top + (fromBox.height / 2);
                        var toTop = toBox.top + (toBox.height / 2);
                        drawLine.arrowType = 'left';

                        var p1 = [fromBox.right, fromTop];
                        var p2 = [fromBox.right + 6, fromTop];
                        var p3 = [fromBox.right + 6, toTop];
                        var p4 = [toBox.right, toTop];
                        drawLine.push([p1, p2]);
                        drawLine.push([p2, p3]);
                        drawLine.push([p3, p4]);
                    }
                    break;
                case 1:

                    if (fromBox.right <= toBox.left) {
                        var fromTop = fromBox.top + (fromBox.height / 2);
                        var fromLeft = fromBox.right;
                        var toTop = toBox.top;
                        var toLeft = toBox.left;
                        drawLine.arrowType = 'bottom';
                        if (fromBox.top > toBox.top) {
                            toTop = toBox.bottom;
                            drawLine.arrowType = 'top';
                        }
                        var p1 = [fromLeft, fromTop];
                        var p2 = [toLeft, fromTop];
                        var p3 = [toLeft, toTop];

                        if (fromBox.right == toBox.left) {
                            p1 = [fromLeft, fromTop];
                            p2 = [toLeft + 2, fromTop];
                            p3 = [toLeft + 2, toTop];
                        }

                        drawLine.push([p1, p2]);
                        drawLine.push([p2, p3]);
                    } else {
                        var fromTop = fromBox.top + (fromBox.height / 2);
                        var fromLeft = fromBox.right;
                        var toTop = toBox.top + (toBox.height / 2);
                        var toLeft = toBox.left;
                        var toTop2 = toBox.top - 4;
                        drawLine.arrowType = 'right';
                        if (fromBox.top > toBox.top) {
                            toTop2 = toBox.bottom + 4;
                        }

                        var p1 = [fromLeft, fromTop];
                        var p2 = [fromLeft + 6, fromTop];
                        var p3 = [fromLeft + 6, toTop2];
                        var p4 = [toLeft - 10, toTop2];
                        var p5 = [toLeft - 10, toTop];
                        var p6 = [toLeft, toTop];
                        drawLine.push([p1, p2]);
                        drawLine.push([p2, p3]);
                        drawLine.push([p3, p4]);
                        drawLine.push([p4, p5]);
                        drawLine.push([p5, p6]);
                    }
                    break;
                case 3:
                    if (fromBox.left < toBox.left) {
                        var fromTop = fromBox.top + (fromBox.height / 2);
                        var fromLeft = fromBox.left;
                        var toTop = toBox.top + (toBox.height / 2);
                        var toLeft = toBox.left;
                        drawLine.arrowType = 'right';

                        var p1 = [fromLeft, fromTop];
                        var p2 = [fromLeft - 6, fromTop];
                        var p3 = [fromLeft - 6, toTop];
                        var p4 = [toLeft, toTop];
                        drawLine.push([p1, p2]);
                        drawLine.push([p2, p3]);
                        drawLine.push([p3, p4]);
                    } else {
                        var fromTop = fromBox.top + (fromBox.height / 2);
                        var fromLeft = fromBox.left;
                        var toTop = toBox.top;
                        var toLeft = toBox.left;
                        drawLine.arrowType = 'bottom';
                        if (fromBox.top > toBox.top) {
                            toTop = toBox.bottom;
                            drawLine.arrowType = 'top';
                        }

                        var p1 = [fromLeft, fromTop];
                        var p2 = [toLeft, fromTop];
                        var p3 = [toLeft, toTop];
                        drawLine.push([p1, p2]);
                        drawLine.push([p2, p3]);
                    }
                    break;
                case 2:
                    if (fromBox.left < toBox.right) {
                        var fromTop = fromBox.top + (fromBox.height / 2);
                        var fromLeft = fromBox.left;
                        var toTop = toBox.top + (toBox.height / 2);
                        var toLeft = toBox.right;
                        var toTop2 = toBox.top - 4;
                        drawLine.arrowType = 'left';
                        if (fromBox.top > toBox.top) {
                            toTop2 = toBox.bottom + 4;
                        }

                        var p1 = [fromLeft, fromTop];
                        var p2 = [fromLeft - 6, fromTop];
                        var p3 = [fromLeft - 6, toTop2];
                        var p4 = [toLeft + 10, toTop2];
                        var p5 = [toLeft + 10, toTop];
                        var p6 = [toLeft, toTop];
                        drawLine.push([p1, p2]);
                        drawLine.push([p2, p3]);
                        drawLine.push([p3, p4]);
                        drawLine.push([p4, p5]);
                        drawLine.push([p5, p6]);
                    } else {
                        var fromTop = fromBox.top + (fromBox.height / 2);
                        var fromLeft = fromBox.left;
                        var toTop = toBox.top;
                        var toLeft = toBox.right;
                        drawLine.arrowType = 'bottom';
                        if (fromBox.top > toBox.top) {
                            toTop = toBox.bottom;
                            drawLine.arrowType = 'top';
                        }
                        var p1 = [fromLeft, fromTop];
                        var p2 = [toLeft, fromTop];
                        var p3 = [toLeft, toTop];
                        drawLine.push([p1, p2]);
                        drawLine.push([p2, p3]);
                    }
                    break;
                default:
                    throw new Error("");
                    break;
            }
            drawLine.Critical = this.isCritical(from) && this.isCritical(to);

            drawLine.Cls = link.Cls;
            drawLines.push(drawLine);

            if (this.isCriticalLine && this.isCriticalLine(from, to, link)) {
                drawLine.Critical = true;
            }
        }





        this._doDrawLines(drawLines);

    },
    _doDrawLines: function (drawLines) {
        var Width = this.viewportWidth, Height = this.viewportHeight;
        var sb = [];
        for (var i = 0, l = drawLines.length; i < l; i++) {
            var lines = drawLines[i];
            var from = null;
            var to = null;
            var critical = lines.Critical;

            var cls = critical ? 'mini-gantt-line-critical' : '';
            if (lines.Cls) cls += " " + lines.Cls;

            var id = lines.id;
            for (var j = 0, k = lines.length; j < k; j++) {
                var line = lines[j];
                from = line[0];
                to = line[1];
                var left = from[0] < to[0] ? from[0] : to[0];
                var top = from[1] < to[1] ? from[1] : to[1];
                var width = Math.abs(to[0] - from[0]) + 1;
                var height = Math.abs(to[1] - from[1]) + 1;

                if (left > Width || left + width < 0) continue;
                if (top > Height || top + height < 0) continue;

                if (from[1] == to[1]) {
                    if (left < 0) {
                        width -= Math.abs(left)
                        left = 0;
                    }
                    if (width + left > Width) width = Width - left;

                    sb[sb.length] = '<div id="';
                    sb[sb.length] = id;
                    sb[sb.length] = '" style="left:';
                    sb[sb.length] = left;
                    sb[sb.length] = 'px;top:';
                    sb[sb.length] = top
                    sb[sb.length] = 'px;width:';
                    sb[sb.length] = width;
                    sb[sb.length] = 'px;" class="mini-gantt-line mini-gantt-line-h ';
                    sb[sb.length] = cls;
                    sb[sb.length] = '"></div>';
                } else {
                    if (top < 0) {
                        height -= Math.abs(top)
                        top = 0;
                    }
                    if (height + top > Height) height = Height - top;

                    sb[sb.length] = '<div id="';
                    sb[sb.length] = id;
                    sb[sb.length] = '" style="left:';
                    sb[sb.length] = left;
                    sb[sb.length] = 'px;top:';
                    sb[sb.length] = top;
                    sb[sb.length] = 'px;height:';
                    sb[sb.length] = height;
                    sb[sb.length] = 'px;" class="mini-gantt-line mini-gantt-line-v ';
                    sb[sb.length] = cls;
                    sb[sb.length] = '"></div>';
                }
            }
            sb[sb.length] = '<div id="';
            sb[sb.length] = id;
            sb[sb.length] = '" style="left:';
            sb[sb.length] = to[0];
            sb[sb.length] = 'px;top:';
            sb[sb.length] = to[1];
            sb[sb.length] = 'px;" class="mini-gantt-line mini-gantt-arrow-';
            sb[sb.length] = lines.arrowType;
            sb[sb.length] = critical ? ' mini-gantt-arrow-' + lines.arrowType + '-critical' : '';
            sb[sb.length] = '"></div>';

        }
        var lineString = sb.join('');

        this.linklinesEl.innerHTML = lineString;



    },

    getZoomTimeScale: function (noNumber) {
        var zoomTimeScales = this.zoomTimeScales;
        var zts = null;
        for (var i = 0, l = zoomTimeScales.length; i < l; i++) {
            var z = zoomTimeScales[i];
            var zt = z[0], zb = z[1];
            if (zt.type == this.topTimeScale.type && zt.number == this.topTimeScale.number
                && zb.type == this.bottomTimeScale.type && zb.number == this.bottomTimeScale.number
                ) {
                zts = z;
                break;
            }
            if (zb.type == this.bottomTimeScale.type && noNumber) {
                zts = z;
                break;
            }
        }
        if (!zts && noNumber) {
            zts = zoomTimeScales[6];
        }
        return zts;
    },
    zoomIn: function () {
        var ts = this.getZoomTimeScale();
        if (!ts) ts = this.getZoomTimeScale(true);
        var index = this.zoomTimeScales.indexOf(ts);
        index += 1;
        if (index >= this.zoomTimeScales.length) index = this.zoomTimeScales.length - 1;
        ts = this.zoomTimeScales[index];

        this.topTimeScale = ts[0];
        this.bottomTimeScale = ts[1];
        this.setDateRange(this._startDate, this._finishDate);

        this.layoutChanged();
    },
    zoomOut: function () {
        var ts = this.getZoomTimeScale();
        if (!ts) ts = this.getZoomTimeScale(true);
        var index = this.zoomTimeScales.indexOf(ts);
        index -= 1;
        if (index < 0) index = 0;
        ts = this.zoomTimeScales[index];

        this.topTimeScale = ts[0];
        this.bottomTimeScale = ts[1];
        this.setDateRange(this._startDate, this._finishDate);

        this.layoutChanged();
    },
    scrollIntoView: function (record, toFinish) {
        if (!record) return;
        var date = mini.isDate(record) ? record : record.Start;
        if (toFinish && !mini.isDate(record)) {
            date = record.Finish;
        }
        if (!date) return;

        this.markRegion();

        var offset = this.getOffsetByDate(date);
        var width = this.getWidth(true);
        if (toFinish) {

            this.setScrollLeft(offset - width / 2);

        } else {
            if (this.scrollLeft < offset && offset < this.scrollLeft + width) {
            } else {
                this.setScrollLeft(offset - width / 2);
            }
        }
    },
    scrollToDate: function (date, toFinish) {
        if (!mini.isDate(date)) return;
        var offset = this.getOffsetByDate(date);
        var width = this.getWidth(true);
        if (toFinish) {

            this.setScrollLeft(offset - width / 2);

        } else {
            if (this.scrollLeft < offset && offset < this.scrollLeft + width) {
            } else {
                this.setScrollLeft(offset - width / 2);
            }
        }
    },

    _OnItemDragTipNeeded: function (item) {
        var e = {
            item: item,
            tooltip: "",
            cls: ''
        }
        this.fire("ItemDragTipNeeded", e);
        return e;
    },
    _OnScrollToolTipNeeded: function (item) {
        var e = {
            item: item,
            tooltip: item ? item.Name : "",
            cls: ''
        };
        if (e.item) {
            this.fire("ScrollToolTipNeeded", e);
        }
        return e;
    },
    _OnDateToolTipNeeded: function (date) {
        var tip = this.bottomTimeScale.tooltip(date, "bottom", this.bottomTimeScale.type);
        var e = { date: date, tooltip: tip, cls: '' };
        this.fire("DateToolTipNeeded", e);
        return e;
    },
    _OnItemToolTipNeeded: function (item) {

        var baseline = item.isBaseline ? this.getBaseline(item) : null;
        delete item.isBaseline;

        var tip = item.Name;
        var e = { item: item, tooltip: tip, cls: '', baseline: baseline };
        this.fire("ItemToolTipNeeded", e);
        return e;
    },
    _OnLinkToolTipNeeded: function (link) {
        var fromItem = this._TaskUIDs[link.PredecessorUID];
        var toItem = this._TaskUIDs[link.TaskUID];
        var e = { link: link, tooltip: '', cls: '', fromItem: fromItem, toItem: toItem };
        this.fire("LinkToolTipNeeded", e);
        return e;
    },
    _OnItemMouseDown: function (item, event) {
        var e = { item: item, htmlEvent: event };
        this.fire("ItemMouseDown", e);
    },
    _OnItemClick: function (item, event) {
        var e = { item: item, htmlEvent: event };
        this.fire("ItemClick", e);
    },
    _OnItemDblClick: function (item, event) {
        var e = { item: item, htmlEvent: event };
        this.fire("ItemDblClick", e);
    },
    _OnItemContextMenu: function (item, event) {
        var e = { item: item, htmlEvent: event };
        this.fire("ItemContextMenu", e);
    },










    _OnDrawItem: function (item, itemBox, isBaseLine) {
        var e = {
            baseline: isBaseLine,
            item: item,
            itemBox: itemBox,
            itemCls: null,
            itemStyle: null,
            itemHtml: null,
            showLabel: this.showLabel,
            labelField: this.labelField,
            label: item[this.labelField],
            labelAlign: "right"
        };
        this.fire("DrawItem", e);
        return e;
    },

    _OnItemDragStart: function (item, action) {
        var cancel = false;
        action = action.toLowerCase();
        if (action == "start") {
            cancel = this.isSummary(item) || this.isMilestone(item);
        }
        if (action == "finish") {
            cancel = this.isSummary(item) || this.isMilestone(item);
        }
        if (action == "percentcomplete") {
            cancel = this.isSummary(item) || this.isMilestone(item);
        }

        if (action == "move") {
            cancel = this.isSummary(item);
        }
        var e = {
            item: item,
            action: action,
            cancel: cancel,
            dragUpdown: false
        };
        this.fire("ItemDragStart", e);
        return e;
    },
    _OnItemDragMove: function (item, drag, action) {
        var e = {
            item: item,
            drag: drag,
            action: action
        };
        this.fire("ItemDragMove", e);
        return e;
    },
    _OnItemDragDrop: function (item, dropNode) {
        var e = {
            item: item,
            dropNode: dropNode,
            cancel: false
        };
        this.fire("ItemDragDrop", e);
        return e;
    },
    _OnItemDragComplete: function (item, action, value, dropNode) {
        var e = {
            item: item,
            action: action.toLowerCase(),
            value: value,
            dropNode: dropNode
        };
        this.fire("ItemDragComplete", e);
        return e;
    }
});



mini.GanttView.prototype.getTimeScaleStartDate = function (date, type, number) {

    if (!number) number = 1;

    var y = date.getFullYear(), mo = date.getMonth(), d = date.getDate(), h = date.getHours(), m = date.getMinutes(), s = date.getSeconds();
    switch (type) {
        case "year":
            date = new Date(y, 0, 1);
            break;
        case "halfyear":
            if (mo < 6) {
                date = new Date(y, 0, 1);
            } else {
                date = new Date(y, 6, 1);
            }
            break;
        case "quarter":
            if (mo < 3) {
                date = new Date(y, 0, 1);
            } else if (mo < 6) {
                date = new Date(y, 3, 1);
            } else if (mo < 9) {
                date = new Date(y, 6, 1);
            } else {
                date = new Date(y, 9, 1);
            }
            break;
        case "month":
            date = new Date(y, mo, 1);
            break;
        case "tendays":

            if (d <= 10) {
                date = new Date(y, mo, 1);
            } else if (d <= 20) {
                date = new Date(y, mo, 11);
            } else {
                date = new Date(y, mo, 21);
            }
            break;
        case "week":

            date = mini.getWeekStartDate(date, this.weekStartDay);
            break;
        case "day":

            if (number > 1) {
                d = parseInt(d / number) * number;
            }

            date = new Date(y, mo, d);
            break;
        case "hour":

            if (number > 1) {
                h = parseInt(h / number) * number;
            }

            date = new Date(y, mo, d, h);

            break;
        case "minutes":
            if (number > 1) {
                m = parseInt(m / number) * number;
            }

            date = new Date(y, mo, d, h, m);
            break;
        case "seconds":
            if (number > 1) {
                s = parseInt(s / number) * number;
            }

            date = new Date(y, mo, d, h, m, s);
            break;
    }
    return date;
};
mini.GanttView.prototype.getTimeScaleNextDate = function (date, type, number) {
    var number = number || 1;
    weekStartDay = this.weekStartDay;
    var next;
    for (var i = 0; i < number; i++) {
        var y = date.getFullYear(), mo = date.getMonth(), d = date.getDate(), h = date.getHours(), m = date.getMinutes(), s = date.getSeconds();
        switch (type) {
            case "year":
                next = new Date(y + 1, 0, 1);
                break;
            case "halfyear":
                if (mo < 6) {
                    next = new Date(y, 6, 1);
                } else {
                    next = new Date(y + 1, 0, 1);
                }
                break;
            case "quarter":
                if (mo < 3) {
                    next = new Date(y, 3, 1);
                } else if (mo < 6) {
                    next = new Date(y, 6, 1);
                } else if (mo < 9) {
                    next = new Date(y, 9, 1);
                } else {
                    next = new Date(y + 1, 0, 1);
                }
                break;
            case "month":
                next = new Date(y, mo + 1, 1);
                break;
            case "tendays":

                if (d <= 10) {
                    next = new Date(y, mo, 11);
                } else if (d <= 20) {
                    next = new Date(y, mo, 21);
                } else {
                    next = new Date(y, mo + 1, 1);
                }
                break;
            case "week":
                next = mini.getNextWeekStartDate(date, weekStartDay);
                break;
            case "day":
                next = new Date(y, mo, d + 1);
                break;
            case "hour":
                next = new Date(y, mo, d, h + 1);
                break;
            case "minutes":
                next = new Date(y, mo, d, h, m + 1);
                break;
            case "seconds":
                next = new Date(y, mo, d, h, m, s + 1);
                break;
        }
        date = next;
    }
    return next;
};













mini.getNextWeekStartDate = function (date, weekStartDay) {
    var d = mini.getWeekStartDate(date, weekStartDay);
    d.setDate(d.getDate() + 7);
    return d;
}

String.leftPad = function (val, size, ch) {
    size = size || 2;
    ch = ch || "0";
    var result = new String(val);
    if (ch == null || ch == undefined) {
        ch = " ";
    }
    while (result.length < size) {
        result = ch + result;
    }
    return result.toString();
}



mini.GanttView.TimeScale = {
    year: {
        type: "year",
        width: 40,
        number: 1,
        align: "center",
        index: 0,
        tooltip: function (date, position) {
            return date.getFullYear();
        },
        formatter: function (date, position, topTimeScale) {
            if (position == "top") {
                return date.getFullYear();
            } else {
                return date.getFullYear();
            }
        }
    },
    halfyear: {
        type: "halfyear",
        width: 24,
        number: 1,
        align: "center",
        index: 1,
        tooltip: function (date, position) {
            return date.getFullYear() + "-" + String.leftPad(date.getMonth() + 1);
        },
        formatter: function (date, position, topTimeScale) {
            var s = "";
            var m = date.getMonth();
            if (m < 6) s += "H" + 1;
            else s += "H" + 2;

            return s;
        }
    },
    quarter: {
        type: "quarter",
        width: 24,
        number: 1,
        align: "center",
        index: 3,
        tooltip: function (date, position) {
            return date.getFullYear() + "-" + String.leftPad(date.getMonth() + 1);
        },
        formatter: function (date, position, topTimeScale) {
            var s = "";
            var m = date.getMonth();
            if (m < 3) s += "Q" + 1;
            else if (m < 6) s += "Q" + 2;
            else if (m < 9) s += "Q" + 3;
            else s += "Q" + 4;

            if (position == "top") s = date.getFullYear() + "" + s;
            return s;
        }
    },
    month: {
        type: "month",
        width: 24,
        number: 1,
        align: "center",
        index: 4,
        tooltip: function (date, position) {
            return date.getFullYear() + "-" + String.leftPad(date.getMonth() + 1);
        },
        formatter: function (date, position, topTimeScale) {
            var s = date.getMonth() + 1;
            if (position == "top") s = date.getFullYear() + "-" + String.leftPad(s);
            return s;
        }
    },
    week: {
        type: "week",
        width: 24,
        number: 1,
        align: "center",
        index: 5,
        tooltip: function (date, position) {
            var s = date.getFullYear() + "-" + String.leftPad(date.getMonth() + 1) + "-" + String.leftPad(date.getDate());
            var next = new Date(date.getTime());
            next.setDate(next.getDate() + 6);
            s += " ~ ";
            s += next.getFullYear() + "-" + String.leftPad(next.getMonth() + 1) + "-" + String.leftPad(next.getDate());
            return s;
        },
        formatter: function (date, position, topTimeScale) {
            if (position == "top") {
                return date.getFullYear() + "-" + String.leftPad(date.getMonth() + 1) + "-" + String.leftPad(date.getDate());
            } else {
                return date.getDate();
            }
        }
    },
    day: {
        type: "day",
        width: 24,
        number: 1,
        align: "center",
        index: 6,
        tooltip: function (date, position) {
            return date.getFullYear() + "-" + String.leftPad(date.getMonth() + 1) + "-" + String.leftPad(date.getDate())
                + " " + mini.GanttView.LongWeeks[date.getDay()];
        },
        formatter: function (date, position, topTimeScale) {
            if (position == "top") {
                return date.getFullYear() + "-" + String.leftPad(date.getMonth() + 1) + "-" + String.leftPad(date.getDate());
            } else {
                if (topTimeScale == "week") {
                    return mini.GanttView.ShortWeeks[date.getDay()];
                } else {
                    return date.getDate();
                }
            }
        }
    },
    hour: {
        type: "hour",
        width: 20,
        number: 1,
        align: "center",
        index: 7,
        tooltip: function (date, position) {
            return date.getFullYear() + "-" + String.leftPad(date.getMonth() + 1) + "-" + String.leftPad(date.getDate()) + " " + String.leftPad(date.getHours());
        },
        formatter: function (date, position, topTimeScale) {
            if (position == "top") {
                return date.getFullYear() + "-" + String.leftPad(date.getMonth() + 1) + "-" + String.leftPad(date.getDate()) + " " + String.leftPad(date.getHours());
            } else {
                return String.leftPad(date.getHours());
            }
        }
    },
    minutes: {
        type: "minutes",
        width: 20,
        number: 1,
        align: "center",
        index: 8,
        tooltip: function (date, position) {
            return date.getFullYear() + "-" + String.leftPad(date.getMonth() + 1) + "-" + String.leftPad(date.getDate()) + " " + String.leftPad(date.getHours()) + ":" + String.leftPad(date.getMinutes());
        },
        formatter: function (date, position, topTimeScale) {
            if (position == "top") {
                return date.getFullYear() + "-" + String.leftPad(date.getMonth() + 1) + "-" + String.leftPad(date.getDate()) + " " + String.leftPad(date.getHours()) + ":" + String.leftPad(date.getMinutes());
            } else {
                return String.leftPad(date.getMinutes());
            }
        }
    },
    seconds: {
        type: "seconds",
        width: 20,
        number: 1,
        align: "center",
        index: 9,
        tooltip: function (date, position) {
            return date.getFullYear() + "-" + String.leftPad(date.getMonth() + 1) + "-" + String.leftPad(date.getDate()) + " " + String.leftPad(date.getHours()) + ":" + String.leftPad(date.getMinutes()) + ":" + String.leftPad(date.getSeconds());
        },
        formatter: function (date, position, topTimeScale) {
            if (position == "top") {
                return date.getDate() + " " + date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();
            } else {
                return String.leftPad(date.getSeconds());
            }
        }
    }
};
mini.GanttView.ShortWeeks = [
    "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"
];
mini.GanttView.LongWeeks = [
    "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
];
mini.GanttView.getTimeScale = function (timescale) {
    var type = typeof timescale == "string" ? timescale : timescale.type;
    var o = mini.GanttView.TimeScale[type.toLowerCase()];
    if (o) {
        o = mini.copyTo({}, o);
    }
    if (o && typeof timescale != "string") {
        o = mini.copyTo(o, timescale);
    }

    return o;
}
mini.GanttView.createZoomTimeScales = function () {

    var zoomTimeScales = [];

    var top = mini.GanttView.getTimeScale("year");
    var bottom = mini.GanttView.getTimeScale("halfyear");
    zoomTimeScales.push([top, bottom]);


    var top = mini.GanttView.getTimeScale("year");
    var bottom = mini.GanttView.getTimeScale("quarter");
    zoomTimeScales.push([top, bottom]);


    var top = mini.GanttView.getTimeScale("year");
    var bottom = mini.GanttView.getTimeScale("month");
    zoomTimeScales.push([top, bottom]);


    var top = mini.GanttView.getTimeScale("quarter");
    var bottom = mini.GanttView.getTimeScale("month");
    bottom.width = 24;
    zoomTimeScales.push([top, bottom]);


    var top = mini.GanttView.getTimeScale("month");
    var bottom = mini.GanttView.getTimeScale("week");
    zoomTimeScales.push([top, bottom]);


    var top = mini.GanttView.getTimeScale("month");
    var bottom = mini.GanttView.getTimeScale("day");
    bottom.number = 3;
    zoomTimeScales.push([top, bottom]);


    var top = mini.GanttView.getTimeScale("week");
    var bottom = mini.GanttView.getTimeScale("day");
    zoomTimeScales.push([top, bottom]);


    var top = mini.GanttView.getTimeScale("day");
    var bottom = mini.GanttView.getTimeScale("hour");
    bottom.number = 6;
    zoomTimeScales.push([top, bottom]);


    var top = mini.GanttView.getTimeScale("day");
    var bottom = mini.GanttView.getTimeScale("hour");
    bottom.number = 2;
    zoomTimeScales.push([top, bottom]);


    var top = mini.GanttView.getTimeScale("day");
    var bottom = mini.GanttView.getTimeScale("hour");
    bottom.number = 1;
    zoomTimeScales.push([top, bottom]);

    return zoomTimeScales;
};







mini._GanttViewToolTip = function (gantt) {
    this.gantt = gantt;
    mini.on(document.body, 'mousemove', this.__OnGanttMouseMove, this);

    this.gantt.on('ItemDragMove', this.__OnItemDragMove, this);
    this.gantt.on('ItemDragComplete', this.__OnItemDragComplete, this);

    this.gantt.on('scroll', this.__OnScroll, this);

    this.gantt.on('refresh', function (e) {
        this.draging = false;
        this.hideTip();
    }, this);
}
mini._GanttViewToolTip.prototype = {
    __OnScroll: function (e) {

        if (!this.gantt.isDisplay()) return;
        if (e.direction == "vertical") {
            this.toolTipEvent = '_OnScrollToolTipNeeded';
            var x = 0, y = 0;

            if (this.tooltipTimer) {
                clearTimeout(this.tooltipTimer);
                this.tooltipTimer = null;
            }
            var sf = this;
            var time = 30;
            if (mini.isFirefox) {
                var item = sf.gantt.getViewStartItem();
                sf.showTip(item, "right", "top", -1);
                sf.tooltipTimer = null;
                time = 0;
            } else {
                this.tooltipTimer = setTimeout(function () {

                    var item = sf.gantt.getViewStartItem();
                    sf.showTip(item, "right", "top", 0);
                    sf.tooltipTimer = null;
                }, time);
            }

        } else {
            this.toolTipEvent = '_OnDateToolTipNeeded';
            var x = 0, y = 0;
            var date = this.gantt.getViewStartDate();
            this.showTip(date, "left", "bottom", 0);
        }
    },

    __OnItemDragMove: function (e) {

        this.toolTipEvent = '_OnItemDragTipNeeded';
        this.draging = true;
        var x = e.drag.init[0], y = e.drag.init[1];

        this.showTip(e.item, x, y + 10, 0, true);
    },
    __OnItemDragComplete: function (sender, e) {
        this.draging = false;
        this.hideTip();
    },

    __OnGanttMouseMove: function (e) {
        if (this.draging === true) return;
        var t = e.target, gantt = this.gantt;

        if (gantt.refreshScrollComplete == true) return;

        if (!gantt.within(e)) {
            this.hideTip();
            return;
        }

        var item = gantt.getItemByEvent(e);
        if (item) {
            var isBaseline = !!mini.findParent(t, "mini-gantt-baseline");
            item.isBaseline = isBaseline;

            this.toolTipEvent = '_OnItemToolTipNeeded';
            this.toolTipItem = item;


            this.showTip(item, e.pageX + 8, e.pageY + 15, this.showTipDelay);
        } else {
            var link = gantt.getLinkByEvent(e);
            if (link) {
                this.toolTipEvent = '_OnLinkToolTipNeeded';
                this.toolTipItem = link;

                this.showTip(link, e.pageX + 5, e.pageY + 8, this.showTipDelay);


            } else {
                this.hideTip();
            }
        }
    },
    showTipDelay: 700,
    showTip: function (item, x, y, delay, auto) {
        if (this._lastShowItem == item && delay != 0) {
            this._showXY = [x, y];
            return;
        }

        this.hideTip(false);
        if (this.hideTimer) {
            clearInterval(this.hideTimer);
            this.hideTimer = null;
        }

        var gantt = this.gantt;
        this._lastShowItem = item;
        var sf = this;
        this._showXY = [x, y];
        if (delay <= 0 && mini.isFirefox) {
            sf._showTipCore(item, auto);
        } else {

            this._showTipTimer = setTimeout(function () {

                sf._showTipCore(item, auto);
            }, delay);
        }
    },
    _showTipCore: function (item, auto) {

        var gantt = this.gantt;
        if (!this._tipEl) {

            this._tipEl = mini.append(document.body, '<div class="mini-ganttview-tooltip" style="display:none;"></div>');
        }
        if (auto == true) this._tipEl.style.width = "auto";

        var e = gantt[this.toolTipEvent](item);
        this._tipEl.innerHTML = e.tooltip;
        this._tipEl.style.display = 'block';
        var x = this._showXY[0], y = this._showXY[1];

        mini.setXY(this._tipEl, -1000, -1000);
        var size = mini.getSize(this._tipEl);

        var ganttBox = this.gantt.getViewportBox();
        if (x == "left") {
            x = ganttBox.x + 5;
        } else if (x == "right") {
            x = ganttBox.right - 20 - size.width;
        }
        if (y == "top") {
            y = ganttBox.y + 5;
        } else if (y == "bottom") {
            y = ganttBox.bottom - 20 - size.height;
        }

        var vbox = mini.getViewportBox();
        if (x + size.width > vbox.right) x = vbox.right - size.width;
        if (y + size.height > vbox.bottom) y = vbox.bottom - size.height;

        mini.setXY(this._tipEl, x, y);
    },
    hideTip: function (remove, clearShow) {
        var sf = this;

        if (sf._tipEl && remove !== false) {
            mini.removeNode(sf._tipEl);
            sf._tipEl = null;


        }


        sf._lastShowItem = null;
        clearInterval(sf._showTipTimer);

    }
};




mini._GanttViewDragDrop = function (gantt) {
    this.owner = gantt;
    this.owner.on('refresh', this.__OnGanttRefresh, this);
    mini.on(this.owner.el, 'mousedown', this.__OnGanttMouseDown, this);







}
mini._GanttViewDragDrop.prototype = {
    isDraging: function () {
        return !!this.dragAction;
    },
    originalItem: null,
    dragItem: null,
    dragAction: null,

    __OnGanttMouseDown: function (e) {

        var t = e.target, ganttview = this.owner;
        if (ganttview.isReadOnly()) return;

        if (!ganttview.allowDrag) return;


        var item = ganttview.getItemByEvent(e);

        if (!item) {
            return;


        }
        if (mini.findParent(t, "mini-gantt-baseline")) return;

        this.createLink = false;

        if (mini.MouseButton.Left == e.button) {
            this.dragItem = item;
            this.originalItem = mini.copyTo({}, item);
            if (mini.hasClass(t, 'mini-gantt-resize-start')) {
                this.dragAction = 'start';

                var ex = ganttview._OnItemDragStart(item, "start");
                if (!ex.cancel) {
                    this.getDrag().start(e);
                }
            } else if (mini.hasClass(t, 'mini-gantt-resize-finish')) {
                this.dragAction = 'finish';
                var ex = ganttview._OnItemDragStart(item, "finish");
                if (!ex.cancel) {
                    this.getDrag().start(e);
                }
            } else if (mini.hasClass(t, 'mini-gantt-resize-percentcomplete')) {
                this.dragAction = 'percentcomplete';
                var ex = ganttview._OnItemDragStart(item, "percentcomplete");
                if (!ex.cancel) {
                    this.getDrag().start(e);
                }
            } else if (mini.findParent(t, 'mini-gantt-item')) {
                this.dragAction = 'move';
                this._BeforeDragMove(item, e);

                this.startCreateLink(item, e);
            }
        }
    },

    startCreateLink: function (item, clickEvent) {
        var me = this,
            ganttview = this.owner,
            gantt = ganttview.owner;

        if (!gantt.allowLinkBars) return;

        var ganttBox = mini.getBox(gantt.el);

        me.canLink = true;

        var suppertSVG = !!document.createElementNS;
        me.canLink = suppertSVG;

        var ns = "http:\/\/www.w3.org/2000/svg";
        var svg;

        if (!suppertSVG) return;


        if (suppertSVG) {

            svg = document.createElementNS(ns, 'svg');

            svg.style.cssText = 'position:absolute;left:0;top:0;display:none;width:100%;height:' + ganttBox.bottom + 'px;z-index:100000;pointer-events: none;';
            document.body.appendChild(svg);
            var line = document.createElementNS(ns, 'line');
            svg.appendChild(line);

            line.setAttribute("stroke", 'rgb(0,0, 0)');
            line.setAttribute("stroke-width", 1);
            line.setAttribute("x1", clickEvent.pageX);
            line.setAttribute("y1", clickEvent.pageY);









        }

        var endTask;

        function onMouseMove(event) {
            var xOffset = event.pageX - clickEvent.pageX,
                yOffset = event.pageY - clickEvent.pageY;

            var inX = Math.abs(xOffset) > 10,
                inY = gantt.allowLinkBars && Math.abs(yOffset) > 6;

            if (!moved && inY && me.canLink) {
                moved = true;
                me.createLink = true;

                $(document.body).addClass("mini-gantt-createlink");
                event.target.style.cursor = "pointer";
            }

            if (me.createLink) {
                if (suppertSVG) {
                    svg.style.display = '';
                    line.setAttribute("x2", event.pageX);
                    line.setAttribute("y2", event.pageY);
                }

                endTask = null;

                if (event.target) {



                    if ($(event.target).closest('.mini-gantt-item')[0]) {
                        endTask = ganttview.getItemByEvent(event);
                        if (endTask == item) {
                            endTask = null;
                        }
                    }


                }
            }




        }

        function onMouseUp(event) {


            clearTimeout(timer);
            mini.un(document, 'mousemove', onMouseMove);
            mini.un(document, 'mouseup', onMouseUp);
            if (svg) $(svg).remove();
            $(document.body).removeClass("mini-gantt-createlink");

            if (moved) {

                if (me.createLink) {


                    if (endTask) {

                        var link = gantt.getPredecessorLink(item, endTask);
                        if (!link) link = gantt.getPredecessorLink(endTask, item);



                        if (link) {
                            alert("已经存在Link关系");
                        } else {

                            var link = { PredecessorUID: item.UID, Type: 1 };

                            try {

                                gantt.addLink(endTask, link);

                                gantt.fire("linkcreate", { link: link });
                            } catch (ex) {
                                alert(ex.message);
                            }
                        }













                    }


                }

            }
        }

        var moved = false;

        var timer = setTimeout(function () {
            mini.on(document, 'mousemove', onMouseMove);
        }, 1);
        mini.on(document, 'mouseup', onMouseUp);




    },

    _BeforeDragMove: function (item, e) {

        var me = this;

        var ex = me.owner._OnItemDragStart(item, "move");
        if (!ex.cancel) {
            me.getDrag().start(e);
        }

    },

    getDrag: function () {
        if (!this.drag) {
            this.drag = new mini.Drag({
                delay: 180,
                capture: false,
                context: this.owner._viewportEl,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this.drag;
    },
    _GetCursor: function () {
        switch (this.dragAction) {
            case "start":
                return 'w-resize';
                break;
            case "finish":
                return 'w-resize';
                break;
            case "percentcomplete":



                return 'row-resize';
                break;
            case "move":
                return 'move';
                break;
            case "link":
                return 'move';
                break;
        }
    },
    _OnDragStart: function (drag) {
        if (this.createLink) return;

        var ganttview = this.owner, item = this.dragItem;
        this.viewBox = ganttview.getViewportBounds(ganttview.viewRegion);
        var itemBox = ganttview.getItemBox(item);
        this.MoveOffset = itemBox.left - drag.init[0];
        this.timeSpan = item.Finish - item.Start;
        this.itemBox = itemBox;







    },
    _OnDragMove: function (drag) {
        if (this.createLink) return;

        this.canLink = false;

        var ganttview = this.owner, item = this.dragItem;
        var viewBox = this.viewBox;
        var bodyBox = ganttview.getViewportBox();

        switch (this.dragAction) {
            case "start":
                var date = ganttview.getDateByPageX(drag.now[0]);

                item.Start = date;
                if (item.Start > item.Finish) item.Start = item.Finish;
                setTimeout(function () {
                    ganttview.refreshItem(item);
                }, 10);
                break;
            case "finish":
                var date = ganttview.getDateByPageX(drag.now[0]);
                item.Finish = date;
                if (item.Start > item.Finish) item.Finish = item.Start;
                setTimeout(function () {
                    ganttview.refreshItem(item);
                }, 1);

                break;
            case "percentcomplete":
                var itemWidth = this.itemBox.width;
                var offset = drag.now[0] - bodyBox.x + viewBox.left - this.itemBox.x;

                var percentComplete = parseInt(offset * 100 / itemWidth);

                if (percentComplete < 0) percentComplete = 0;
                if (percentComplete > 100) percentComplete = 100;

                item.PercentComplete = percentComplete;
                setTimeout(function () {
                    ganttview.refreshItem(item, false);
                }, 10);

                break;
            case "move":

                var offset = drag.now[0] + this.MoveOffset;
                var date = ganttview.getDateByOffset(offset);
                item.Start = date;
                item.Finish = new Date(date.getTime() + this.timeSpan);
                setTimeout(function () {
                    ganttview.refreshItem(item);
                }, 10);
                break;
            case "link":
                break;
        }

        ganttview._OnItemDragMove(item, drag, this.dragAction);
    },
    dropNode: null,
    _OnDragStop: function (drag, success) {
        if (this.createLink) return;

        var ganttview = this.owner, item = this.dragItem;
        if (success == false) {
            mini.copyTo(this.dragItem, this.originalItem);
        } else {
            var value = this.dragItem["Start"];
            switch (this.dragAction) {
                case "move":
                    this.dropNode = ganttview.getDragRecord(drag.now[1]);
                    var e = ganttview._OnItemDragDrop(this.dragItem, this.dropNode);
                    if (e.cancel) success = false;
                    break;
                case "start":

                    break;
                case "finish":
                    value = this.dragItem["Finish"];
                    break;
                case "percentcomplete":
                    value = this.dragItem["PercentComplete"];
                    break;
                case "link":
                    break;
            }
            mini.copyTo(this.dragItem, this.originalItem);

            if (success) {

                this._OnItemDragComplete(value);
            }

        }
        if (success == false) {

            drag.event.stopPropagation()
        }
        this.stopDrag(success);
    },
    _OnItemDragComplete: function (value) {
        if (this.createLink) return;

        var ganttview = this.owner, item = this.dragItem;
        ganttview._OnItemDragComplete(this.dragItem, this.dragAction, value, this.dropNode);
    },
    stopDrag: function (complete) {

        var ganttview = this.owner, item = this.dragItem;



        if (complete == false) {
            ganttview.refresh();
        }

        this.dragItem = this.originalItem = this.dragAction = this.dropNode = null;
    },

    __OnGanttRefresh: function (e) {

        if (this.___dragProxyTimer) {
            clearTimeout(this.___dragProxyTimer);
        }
        var sf = this;
        this.___dragProxyTimer = setTimeout(function () {
            sf.render_dragProxy();
            sf.___dragProxyTimer = null;
        }, 300);
    },
    renderItem_dragProxy: function (item, box, sb, id) {
        var ganttview = this.owner;

        var id = item._id;
        var ex = ganttview._OnItemDragStart(item, "start");
        if (!ex.cancel) {
            sb[sb.length] = '<div id="';
            sb[sb.length] = id;
            sb[sb.length] = '" class="mini-gantt-resize-start" style="left:';
            sb[sb.length] = box.x - 2;
            sb[sb.length] = 'px;top:';
            sb[sb.length] = box.y;
            sb[sb.length] = 'px;width:';
            sb[sb.length] = 5;
            sb[sb.length] = 'px;height:';
            sb[sb.length] = box.height;
            sb[sb.length] = 'px;"></div>';
        }
        var ex = ganttview._OnItemDragStart(item, "finish");
        if (!ex.cancel) {
            sb[sb.length] = '<div id="';
            sb[sb.length] = id;
            sb[sb.length] = '" class="mini-gantt-resize-finish" style="left:';
            sb[sb.length] = box.right - 2;
            sb[sb.length] = 'px;top:';
            sb[sb.length] = box.y;
            sb[sb.length] = 'px;width:';
            sb[sb.length] = 5;
            sb[sb.length] = 'px;height:';
            sb[sb.length] = box.height;
            sb[sb.length] = 'px;"></div>';
        }
        var ex = ganttview._OnItemDragStart(item, "percentcomplete");
        if (!ex.cancel) {
            var percentComplete = item.PercentComplete || 0;
            var percentWidth = parseInt((box.right - box.x) * percentComplete / 100);
            var right = box.x + percentWidth;
            var width = 4;
            if (percentComplete == 0) {
                width = 3;
            } else if (percentComplete == 100) {
                width = 3;
                right -= 3;
            } else {
                right -= 2;
            }
            sb[sb.length] = '<div id="';
            sb[sb.length] = id;
            sb[sb.length] = '" class="mini-gantt-resize-percentcomplete" style="left:';
            sb[sb.length] = right;
            sb[sb.length] = 'px;top:';
            sb[sb.length] = box.y;
            sb[sb.length] = 'px;width:';
            sb[sb.length] = width;
            sb[sb.length] = 'px;height:';
            sb[sb.length] = box.height;
            sb[sb.length] = 'px;"></div>';
        }
    },
    render_dragProxy: function () {

        var ganttview = this.owner;
        if (!ganttview.allowDrag || ganttview.isReadOnly()) return;

        var region = ganttview.viewRegion;
        var viewBox = ganttview.getViewportBounds(region);
        var VLeft = viewBox.left, VTop = viewBox.top, VWidth = viewBox.width, VHeight = viewBox.height;

        var data = ganttview.getVisibleRows();
        var startRow = region.startRow, endRow = region.endRow;

        var sb = [];
        for (var i = startRow, l = endRow; i <= l; i++) {
            var item = data[i];
            if (!item) continue;
            var box = ganttview.getItemBox(item, VLeft, VTop);
            this.renderItem_dragProxy(item, box, sb);
        }
        var s = '<div>' + sb.join('') + '</div>';
        mini.append(ganttview.barsEl, s);
    }
};



mini.Gantt = function () {
    mini.Gantt.superclass.constructor.call(this);

    this.newProject();



    this.ganttView.showCriticalPath = this.showCriticalPath;
}
mini.extend(mini.Gantt, mini.Splitter, {

    allowLinkBars: true,

    width: 450,
    height: 200,

    expandOnLoad: true,
    baselinePosition: "bottom",

    baselineIndex: 0,
    viewModel: "gantt",
    setShowLinkLines: function (value) {
        this.ganttView.showLinkLines = value;
    },
    setViewModel: function (value) {
        this.viewModel = value;
        this.ganttView.setViewModel(value);
    },
    setBaselineIndex: function (value) {
        this.baselineIndex = value;
        this.ganttView.baselineIndex = value;
        this.ganttView.doLayout();
    },
    setBaselinePosition: function (value) {
        this.baselinePosition = value;
        this.ganttView.baselinePosition = value;
        this.ganttView.doLayout();
    },
    refresh: function () {
        this.syncTasks();
        this.doLayout();
    },
    editOnDblClick: false,
    setEditOnDblClick: function (value) {
        this.tableView.editOnDblClick = value;
    },

    data: null,

    headerHeight: 36,
    rowHeight: 21,
    columnWidth: 100,

    tableWidth: "50%",
    splitWidth: 4,
    minViewWidth: 100,

    treeColumn: null,
    columns: null,

    readOnly: false,
    allowDragDrop: false,
    multiSelect: false,

    showDirty: true,

    showGridLines: true,
    timeLines: null,

    showTableView: true,
    showGanttView: true,
    tableViewExpanded: true,
    ganttViewExpanded: true,

    allowResize: true,
    setAllowResize: function (value) {
        this.allowResize = value;
        this.doLayout();
    },

    uiCls: "mini-gantt",
    _create: function () {
        mini.Gantt.superclass._create.call(this);
        this._createTableView();
        this._createGanttView();

        this.pane1.showCollapseButton = true;
        this.pane2.showCollapseButton = true;


        this._resizeEl = mini.append(this._borderEl, '<div class="mini-resizer-trigger" style=""></div>');
        this._Resizer = new mini._Resizer(this);
    },
    tableViewType: "SuperTree",
    _createTableView: function () {
        this.tableView = new mini[this.tableViewType]();
        this.tableView.set({
            headerHeight: this.headerHeight,
            rowHeight: this.rowHeight,
            columnWidth: this.columnWidth,
            allowAlternating: false,
            borderStyle: "border:0;",
            style: "width:100%;height:100%;"


        });
        this.tableView.owner = this;
        this.tableView.render(this.getPaneEl(1));
    },
    ganttViewType: "GanttView",
    _createGanttView: function () {
        this.ganttView = new mini[this.ganttViewType]();
        this.ganttView.set({
            headerHeight: this.headerHeight,
            rowHeight: this.rowHeight,
            style: "width:100%;height:100%"
        });
        this.ganttView.isWorking = mini.createDelegate(this.isWorking, this);
        this.ganttView.owner = this;
        this.ganttView.render(this.getPaneEl(2));
    },
    _initEvents: function () {
        mini.Gantt.superclass._initEvents.call(this);
        var sf = this;

        this.tableView.on("scroll", this.__OnTableViewScroll, this);
        this.ganttView.on("scroll", this.__OnGanttViewScroll, this);

        this.tableView.on("beforeselect", function (e) {
            e.task = e.record;
            this.fire("beforeselect", e);
        }, this);

        this.tableView.on("drawcell", function (e) {
            e.task = e.record;
            this.fire("drawcell", e);
        }, this);


        this.ganttView.on("drawitem", function (e) {
            e.task = e.item;
            this.fire("drawitem", e);
        }, this);


        this.tableView.on("cellbeginedit", this.__OnTableViewCellBeginEdit, this);
        this.tableView.on("cellcommitedit", this.__OnTableViewCellCommitEdit, this);
        this.ganttView.on("itemdragstart", this.__OnGanttViewItemDragStart, this);
        this.ganttView.on("itemdragcomplete", this.__OnGanttViewItemDragComplete, this);


        this.ganttView.on("ScrollToolTipNeeded", this.__OnGanttViewScrollToolTipNeeded, this);
        this.ganttView.on("itemtooltipneeded", this.__OnGanttViewItemToolTipNeeded, this);
        this.ganttView.on("LinkToolTipNeeded", this.__OnGanttViewLinkToolTipNeeded, this);
        this.ganttView.on("ItemDragTipNeeded", this.__OnGanttViewItemDragTipNeeded, this);


        this.tableView.on("cellmousedown", function (e) {
            e.task = e.record;
            this.fire("taskmousedown", e);
        }, this);
        this.tableView.on("cellclick", function (e) {
            e.task = e.record;
            this.fire("taskclick", e);
        }, this);
        this.tableView.on("celldblclick", function (e) {
            e.task = e.record;
            this.fire("taskdblclick", e);
        }, this);

        this.ganttView.on("itemmousedown", function (e) {
            e.task = e.item;
            if (this.multiSelect) {
                if (this.isSelected(e.item)) {

                } else {
                    this.deselectAll();
                }
                this.select(e.item, true, false);
            } else {
                this.deselectAll();
                this.select(e.item, true, false);
            }
            this.fire("taskmousedown", e);
        }, this);
        this.ganttView.on("itemclick", function (e) {
            e.task = e.item;
            this.fire("taskclick", e);
        }, this);
        this.ganttView.on("itemdblclick", function (e) {

            e.task = e.item;
            this.fire("taskdblclick", e);
        }, this);


        this.tableView.on("expand", function (e) {
            e.task = e.node;
            this.fire("expandtask", e);
        }, this);
        this.tableView.on("collapse", function (e) {
            e.task = e.node;
            this.fire("collapsetask", e);
        }, this);

        this.tableView.on("RowDragStart", function (e) {
            e.task = e.record;
            this.fire("taskdragstart", e);
        }, this);
        this.tableView.on("rowdragdrop", function (e) {
            e.tasks = e.records;
            e.targetTask = e.targetRecord;
            this.fire("taskdragdrop", e);

            if (e.cancel == false) {
                this.fire("dodragdrop", e);
            }
            e.cancel = true;
        }, this);

        this.on("beforecollapse", this.__OnBeforeCollapse, this);
        this.on("beforeexpand", this.__OnBeforeExpand, this);

    },
    __OnTableViewScroll: function (e) {
        if (e.direction == "vertical") {


            if (this.showGanttView == true && this.ganttViewExpanded == true) {
                this.ganttView.setScrollTop(this.tableView.scrollTop);
            }


        }
    },
    __OnGanttViewScroll: function (e) {
        if (e.direction == "vertical") {

            if (this.ganttView.refreshScrollComplete) {
            } else {
                if (this.showTableView == true && this.tableViewExpanded == true) {
                    this.tableView.setScrollTop(this.ganttView.scrollTop);
                }
            }
        }
    },
    __OnTableViewCellBeginEdit: function (e) {
        e.task = e.record;
        this.fire("cellbeginedit", e);
    },
    __OnTableViewCellCommitEdit: function (e) {
        e.task = e.record;
        this.fire("cellcommitedit", e);

        if (e.cancel == false) {
            this.fire("aftercellcommitedit", e);
        }
    },
    __OnGanttViewItemDragStart: function (e) {
        this.fire("itemdragstart", e);
    },
    __OnGanttViewItemDragComplete: function (e) {
        this.fire("itemdragcomplete", e);
    },
    __OnGanttViewScrollToolTipNeeded: function (e) {
        e.tooltip = mini.Gantt.ID_Text + '：' + e.item.ID + "<br/>" + mini.Gantt.Name_Text + '：' + e.item.Name;
    },
    __OnGanttViewItemToolTipNeeded: function (e) {
        e.task = e.item;
        var task = e.item;
        function format(date) {
            if (mini.isDate(date)) {
                return date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + "";
            } else {
                return "";
            }
        };
        e.tooltip = "";

        var start = task.Start, finish = task.Finish, duration = task.Duration;
        if (e.baseline) {
            e.tooltip += "<div style='text-align:center;'><b >" + mini.Gantt.Baseline_Text + "</b></div>";
            start = e.baseline.Start;
            finish = e.baseline.Finish;

            if (!mini.isNull(e.baseline.Duration)) {
                duration = e.baseline.Duration;
            }

        } else if (task.Summary) {
            e.tooltip += "<div style='text-align:center;'><b >" + mini.Gantt.Summary_Text + "</b></div>";
        } else if (task.Critical) {
            e.tooltip += "<div style='text-align:center;'><b >" + mini.Gantt.Critical_Text + "</b></div>";
        } else {
            e.tooltip += "<div style='text-align:center;'><b >" + mini.Gantt.Task_Text + "</b></div>";
        }
        e.tooltip += "<div>" + mini.Gantt.Name_Text + "：" + task.Name + "</div>"
                    + "<div ><div style='float:left;'>" + mini.Gantt.PercentComplete_Text + "：<b>" + task.PercentComplete + "%</b></div>"
                    + "<div style='float:right;'>" + mini.Gantt.Duration_Text + "：" + duration + "</div></div>"
                    + "<div style='clear:both;'>" + mini.Gantt.Start_Text + "：" + format(start) + "</div>"
                    + "<div>" + mini.Gantt.Finish_Text + "：" + format(finish) + "</div>";
        this.fire("itemtooltipneeded", e);
    },
    __OnGanttViewLinkToolTipNeeded: function (e) {

        var fromItem = e.fromItem, toItem = e.toItem, link = e.link;
        var tip = "" + mini.Gantt.LinkType_Text + "：" + mini.Gantt.PredecessorLinkType[link.Type].Name
                    + "<br/>" + mini.Gantt.LinkLag_Text + "：" + (link.LinkLag || 0) + ""
                    + "<br/>" + mini.Gantt.From_Text + "：" + fromItem.Name + ""
                    + "<br/>" + mini.Gantt.To_Text + "：" + toItem.Name + ""
        e.tooltip = tip;
        this.fire("linktooltipneeded", e);
    },
    __OnGanttViewItemDragTipNeeded: function (e) {
        var tip = "";
        var item = e.item;
        e.task = item;
        if (!item || !item.Start || !item.Finish) {

        } else {
            var d1 = this.ganttView.bottomTimeScale.tooltip(item.Start, "bottom", this.ganttView.bottomTimeScale.type);
            var d2 = this.ganttView.bottomTimeScale.tooltip(item.Finish, "bottom", this.ganttView.bottomTimeScale.type);
            tip = mini.Gantt.Name_Text + "：" + item.Name
                    + "<br/>" + mini.Gantt.PercentComplete_Text + "：<b>" + item.PercentComplete + "%</b>"
                    + "<br/>" + mini.Gantt.Start_Text + "：<b>" + d1 + "</b>"
                    + "<br/>" + mini.Gantt.Finish_Text + "：<b>" + d2 + "</b>";
        }
        e.tooltip = tip;
        this.fire("TaskDragTipNeeded", e);
    },

    isWorking: function (date, timescale) {
        if (!this.data) return true;
        var type = timescale.type;
        if (
            (type == "day" && timescale.number > 1)
            || type == "week" || type == "month" || type == "quarter" || type == "halfyear"
        ) return true;

        var dayOfWeek = date.getDay(), dateTime = date.getTime();
        if (dayOfWeek == 6 || dayOfWeek == 0) return false;
        return true;
    },


    doLayout: function () {
        if (!this.canLayout()) return;

        this._resizeEl.style.display = this.allowResize ? "" : "none";

        mini.Gantt.superclass.doLayout.call(this);













        if (this.ganttViewExpanded == false || this.showGanttView == false) {

            this.tableView.setShowVScroll(true);
        } else {

            this.tableView.setShowVScroll(false);
        }
    },
    __OnBeforeExpand: function (e) {
        e.cancel = true;
        if (e.paneIndex == 1) {
            this.setTableViewExpanded(true);
        } else {
            this.setGanttViewExpanded(true);
        }
    },
    __OnBeforeCollapse: function (e) {
        e.cancel = true;
        if (e.paneIndex == 1) {
            this.setTableViewExpanded(false);
        } else {
            this.setGanttViewExpanded(false);
        }
    },
    setShowGanttView: function (value) {
        if (this.showGanttView != value) {
            this.showGanttView = value;
            this._allowLayout = false;
            if (value) {
                this.showPane(2);
            } else {
                this.hidePane(2);
            }

            this._doShow();
            this.ganttView.setScrollTop(this.tableView.getScrollTop());
        }
    },
    setShowTableView: function (value) {
        if (this.showTableView != value) {
            this.showTableView = value;
            this._allowLayout = false;
            if (value) {
                this.showPane(1);
            } else {
                this.hidePane(1);
            }
            this._doShow();
            this.tableView.setScrollTop(this.ganttView.getScrollTop());
        }
    },
    setGanttViewExpanded: function (value) {
        if (this.ganttViewExpanded != value) {
            this.ganttViewExpanded = value;
            this._allowLayout = false;
            if (value) {
                this.expandPane(2);
            } else {
                this.collapsePane(2);
            }

            this._doShow();
            this.ganttView.setScrollTop(this.tableView.getScrollTop());
        }
    },
    setTableViewExpanded: function (value) {
        if (this.tableViewExpanded != value) {
            this.tableViewExpanded = value;
            this._allowLayout = false;
            if (value) {
                this.expandPane(1);
            } else {
                this.collapsePane(1);
            }
            this._doShow();
            this.tableView.setScrollTop(this.ganttView.getScrollTop());
        }
    },
    _doShow: function () {

        this.tableViewExpanded = this.pane1.expanded;
        this.ganttViewExpanded = this.pane2.expanded;

        this.showTableView = this.pane1.visible;
        this.showGanttView = this.pane2.visible;


        this._allowLayout = true;

        this.doLayout();

        this.ganttView.doUpdate();
    },
    setTableViewWidth: function (value) {
        this.updatePane(1, { size: value });
    },
    setGanttViewWidth: function (value) {
        this.updatePane(2, { size: value });
    },

    setShowDirty: function (value) {
        if (this.showDirty != value) {
            this.showDirty = value;
            this.tableView.setShowDirty(value);
        }
    },
    setShowCriticalPath: function (value) {
        if (this.showCriticalPath != value) {
            this.showCriticalPath = value;
            this.ganttView.showCriticalPath = value;
            this.orderProject();
        }
    },
    setShowGridLines: function (value) {
        if (this.showGridLines != value) {
            this.showGridLines = value;
            this.ganttView.setShowGridLines(value);
        }
    },
    showLabel: true,
    setShowLabel: function (value) {
        if (this.showLabel != value) {
            this.showLabel = value;
            this.ganttView.setShowLabel(value);
        }
    },
    setTimeLines: function (value) {
        if (this.timeLines != value) {
            this.timeLines = value;
            this.ganttView.setTimeLines(value);
        }
    },
    setRowHeight: function (value) {
        value = parseInt(value);
        if (isNaN(value)) return;
        if (value != this.rowHeight) {
            this.rowHeight = value;
            this.tableView.setRowHeight(value);
            this.ganttView.setRowHeight(value);
        }
    },
    setMultiSelect: function (value) {
        if (this.multiSelect != value) {
            this.multiSelect = value;
            this.tableView.setMultiSelect(value);

        }
    },
    allowUnselect: false,
    setAllowUnselect: function (value) {
        this.allowUnselect = value;
        this.tableView.setAllowUnselect(value);
    },
    getAllowUnselect: function (value) {
        return this.allowUnselect;
    },
    setAllowDragDrop: function (value) {
        if (this.allowDragDrop != value) {
            this.allowDragDrop = value;
            this.tableView.setAllowDragDrop(value);
        }
    },
    scrollIntoView: function (task, toFinish, toTop) {
        this.ganttView.scrollIntoView(task, toFinish);
        if (toTop) {

            this.tableView.scrollIntoView(task);

            this.ganttView.setScrollTop(this.tableView.getScrollTop(), true);
        }
    },
    scrollToDate: function (date, toFinish) {
        this.ganttView.scrollToDate(date, toFinish);
    },
    zoomIn: function () {
        this.ganttView.zoomIn();
        var task = this.getSelected();
        if (task) {
            this.scrollIntoView(task);
        }
    },
    zoomOut: function () {
        this.ganttView.zoomOut();
        var task = this.getSelected();
        if (task) {
            this.scrollIntoView(task);
        }
    },
    setTopTimeScale: function (value) {
        this.ganttView.setTopTimeScale(value);
    },
    setBottomTimeScale: function (value) {
        this.ganttView.setBottomTimeScale(value);
    },


    frozenColumn: function (start, end) {
        this.tableView.frozenColumn(start, end);
    },
    unfrozenColumn: function () {
        this.tableView.unfrozenColumn();
    },
    getViewStartColumn: function () {
        return this.tableView.viewRegion.startColumn;
    },
    getViewEndColumn: function () {
        return this.tableView.viewRegion.endColumn;
    },
    getSelectedColumn: function () {
        var cell = this.tableView.getCurrentCell();
        return cell ? cell.column : null;
    },
    indexOfColumn: function (column) {
        column = this.tableView.getColumn(column);
        return this.tableView.viewColumns.indexOf(column);
    },

    setColumns: function (value) {
        this.tableView.setColumns(value);
    },
    getColumns: function () {
        return this.tableView.getColumns();
    },
    updateColumn: function (column, options) {
        this.tableView.updateColumn(column, options);
    },
    getColumn: function (name) {
        return this.tableView.getColumn(name);
    },
    getColumnAt: function (index) {
        return this.tableView.getColumnAt(index);
    },
    setTreeColumn: function (value) {
        this.tableView.setTreeColumn(value);
    },
    setRowHeight: function (value) {
        if (this.rowHeight != value) {
            this.rowHeight = value;
            this.tableView.setRowHeight(value);
            this.ganttView.setRowHeight(value);
        }
    },
    allowProjectDateRange: false,
    getDateRange: function () {
        var start = this.getStartDate(), finish = this.getFinishDate();
        if (this.allowProjectDateRange == false) {
            var start = null, finish = null;
        }
        var tasks = this.getTaskList();
        for (var i = 0, l = tasks.length; i < l; i++) {
            var node = tasks[i];
            if (node.Start) {
                if (!start || start > node.Start) start = node.Start;
            }
            if (node.Finish) {
                if (!finish || finish < node.Finish) finish = node.Finish;
            }
            if (this.viewModel != "gantt") {
                var bl = this.ganttView.getBaseline(node);
                if (bl) {
                    if (bl.Start) {
                        if (!start || start > bl.Start) start = bl.Start;
                    }
                    if (bl.Finish) {
                        if (!finish || finish < bl.Finish) finish = bl.Finish;
                    }
                }
            }






        }
        if (!start || !finish) return null;

        return [start, finish];
    },
    createDefaultCalendars: function () {
        return eval("[{UID: 1,IsBaseCalendar: 1,BaseCalendarUID:-1,Name: '',WeekDays: [{DayType: 1,DayWorking: 0},{DayType: 2,DayWorking: 1},{DayType: 3,DayWorking: 1},{DayType: 4,DayWorking: 1},{DayType: 5,DayWorking: 1},{DayType: 6,DayWorking: 1},{DayType: 7,DayWorking: 0}],Exceptions:[]}]");
    },
    getTask: function (uid) {
        if (uid === null || uid === undefined) return null;
        uid = typeof uid == "object" ? uid.UID : uid;
        return this._TaskUIDs[uid];
    },
    getTaskAt: function (index) {
        return this.tasks.getAt(index);
    },
    getTaskByID: function (taskID) {
        taskID = parseInt(taskID) - 1;

        return this.getTaskList()[taskID];
    },
    findTasks: function (field, value) {
        return this.tasks.findRecords(field, value);
    },

    eachChild: function (task, fn, scope) {
        this.tasks.eachChild(task, fn, scope);
    },
    cascadeChild: function (task, fn, scope) {
        this.tasks.cascadeChild(task, fn, scope);
    },
    bubbleParent: function (task, fn, scope) {
        this.tasks.bubbleParent(task, fn, scope);
    },

    collapseLevel: function (level, deep) {
        this.tasks.collapseLevel(level, deep);
    },
    expandLevel: function (level, deep) {
        this.tasks.expandLevel(level, deep);
    },
    isExpanded: function (task) {
        if (!task || this.tasks.hasChildNodes(task) == false) return false;
        return this.tasks.isExpandedNode(task);
    },
    collapse: function (node, deep) {
        this.tasks.collapse(node, deep);
    },
    expand: function (node, deep) {
        this.tasks.expand(node, deep);
    },
    toggle: function (node) {
        this.tasks.toggle(node);
    },
    collapseAll: function () {
        this.tasks.collapseAll();
        this.tableView.setScrollTop(0);
        this.ganttView.setScrollTop(0);
    },
    expandAll: function () {
        this.tasks.expandAll();
    },
    newProject: function () {
        var d = new Date();
        var startDate = new Date(d.getFullYear(), d.getMonth(), d.getDate());
        var finishDate = new Date(d.getFullYear(), d.getMonth() + 1, d.getDate());




        this.data = {
            Name: "",
            StartDate: startDate,
            FinishDate: finishDate,
            CalendarUID: "1",
            Calendars: this.createDefaultCalendars(),
            Tasks: [],
            Resources: []
        };
        this._initProject(this.data);
        this.loadTasks([]);
    },
    _initProject: function (project) {
        if (!mini.isDate(project.StartDate)) throw new Error("StartDate must be Date type");
        if (!mini.isDate(project.FinishDate)) throw new Error("FinishDate must be Date type");
        if (project.StartDate >= project.FinishDate) throw new Error("StartDate not >= FinishDate");
        if (!project.CalendarUID || !project.Calendars) {
            project.CalendarUID = "1";
            project.Calendars = this.createDefaultCalendars();
        }
        this.startDate = project.StartDate;
        this.finishDate = project.FinishDate;

        this.rootTaskUID = -1;
        this._TaskUIDs = {};



        this._ResourceUIDs = {};
        var res = project.Resources || [];
        for (var i = 0, l = res.length; i < l; i++) {
            var re = res[i];
            this._ResourceUIDs[re.UID] = re;
        }

        if (!this._Validator) this._Validator = new MyProjectSchedule.Validator(this);
        if (!this._Critical) this._Critical = new MyProjectSchedule.Critical(this);
    },
    getRemovedTasks: function () {
        var tasks = this.tasks.getChanges("removed");
        for (var i = 0, l = tasks.length; i < l; i++) {
            delete tasks[i].children;
        }
        return tasks;
    },
    isChanged: function () {
        var list = this.getTaskList();
        for (var i = 0, l = list.length; i < l; i++) {
            var t = list[i];
            if (t._state) {
                return true;
            }
        }
        var removed = this.getRemovedTasks();
        if (removed.length > 0) return true;
        return false;
    },

    getTaskTree: function () {
        return this.tasks.toTree();
    },
    getTaskList: function () {
        return this.tasks.toArray();
    },
    getChangedTasks: function (rowState, onlyField) {
        var tasks = this.tasks.getChanges(rowState, onlyField);
        return tasks;
    },
    acceptChanges: function () {
        this.tasks.accept();
    },
    parseTasks: function (tasks, taskmap) {
        return tasks;
    },

    _taskParseDate: function (task) {
        if (task.Start && !mini.isDate(task.Start)) {
            task.Start = mini.parseDate(task.Start);
        }
        if (task.Finish && !mini.isDate(task.Finish)) {
            task.Finish = mini.parseDate(task.Finish);
        }

        if (!mini.isDate(task.Start)) {
            task.Start = null;
        }
        if (!mini.isDate(task.Finish)) {
            task.Finish = null;
        }

        var baseline = task.Baseline && task.Baseline[0];
        if (baseline) {
            if (baseline.Start && !mini.isDate(baseline.Start)) {
                baseline.Start = mini.parseDate(baseline.Start);
            }
            if (baseline.Finish && !mini.isDate(baseline.Finish)) {
                baseline.Finish = mini.parseDate(baseline.Finish);
            }
        }
    },

    loadTasks: function (tasks) {



        if (!mini.isArray(tasks)) tasks = [];

        this.parseTasks(tasks, this.data.TASKMAP);
        delete this.data.TASKMAP;

        this.allowTaskModified = false;

        this.data.Tasks = tasks;
        this.tasks = new mini.DataTree();
        this.tasks.expandOnLoad = this.expandOnLoad;
        this.tasks.idField = "UID";
        this.tasks.parentField = "ParentTaskUID";
        this.tasks.loadData(tasks);
        this.tasks.getRootNode().UID = this.rootTaskUID;


        var tasks = this.getTaskList();
        for (var i = 0, l = tasks.length; i < l; i++) {
            var task = tasks[i];
            this._taskParseDate(task);
        }

        this.tableView.setData(this.tasks);
        this.ganttView.setData(this.tasks);




        this.syncTasks();



        var task = this.getTaskAt(0);
        if (task) {
            this.scrollIntoView(task);
        }



        var tasks = this.getTaskList();
        for (var i = 0, l = tasks.length; i < l; i++) {
            var task = tasks[i];

            task._x = task.ID + ":" + task.OutlineNumber;
        }


        this.tasks.on("selectionchanged", function (e) {

        }, this);
        this.tasks.on("datachanged", function (e) {
            this.fire("datachanged", e);
        }, this);

        this.allowTaskModified = true;

    },

    _syncTasks2: function () {


        var nodesField = this.tasks.nodesField;
        var nodes = this.tasks.getRootNode()[nodesField];

        var uids = this._TaskUIDs = {};

        var __TaskID = 1;


        function eachTasks(nodes, parentTaskUID) {
            if (!nodes) return;
            for (var i = 0, l = nodes.length; i < l; i++) {
                var task = nodes[i];

                task["ID"] = __TaskID++;


                task["ParentTaskUID"] = parentTaskUID;

                uids[task.UID] = task;
                var childNodes = task[nodesField];
                if (childNodes != null && childNodes.length > 0) {


                    eachTasks(childNodes, task.UID);
                } else {




                }
            }
        }


        eachTasks(nodes, this.rootTaskUID);

    },
    syncTasks: function (allowRange) {



        var tasks = this.getTaskList();
        this._TaskUIDs = {};
        for (var i = 0, l = tasks.length; i < l; i++) {
            var task = tasks[i];
            this._TaskUIDs[task.UID] = task;
        }

        var rootNodes = this.tasks.getRootNode()[this.tasks.nodesField];

        var sss = new Date();


        this._syncTaskNodes(rootNodes, 1, "", this.rootTaskUID);





        if (this._Validator && allowRange !== false) this._Validator.valid();


        if (allowRange !== false) {

            var dr = this.getDateRange();
            if (dr) {
                this.ganttView.setDateRange(dr[0], dr[1]);

                this.ganttView.doLayout(true);
            }
        }



        for (var i = 0, l = tasks.length; i < l; i++) {
            var task = tasks[i];

            if (task._x != task.ID + ":" + task.OutlineNumber) {

                this.setTaskModified(task, "ID", task._x);
            }
        }



    },
    __TaskID: 1,
    autoSyncSummary: true,
    allowSummaryLink: true,
    _syncTaskNodes: function (nodes, outlineLevel, outlineNumber, parentTaskUID) {
        if (parentTaskUID == this.rootTaskUID) {
            this.__TaskID = 1;

        }

        var event = {},
            nodesField = this.tasks.nodesField;

        var start = null, finish = null, work = 0;
        for (var i = 0, l = nodes.length; i < l; i++) {
            var task = nodes[i];

            task["ID"] = this.__TaskID++;
            task["OutlineLevel"] = outlineLevel;
            task["OutlineNumber"] = outlineNumber + (i + 1);
            task["ParentTaskUID"] = parentTaskUID;

            event.task = task;

            var childNodes = task[nodesField];
            if (childNodes != null && childNodes.length > 0) {



                if (task.Summary != 1) this.setTaskModified(task, "Summary");

                task.Summary = 1;

                var dd = this._syncTaskNodes(childNodes, outlineLevel + 1, task.OutlineNumber + ".", task.UID);
                if (this.autoSyncSummary) {
                    if (dd[0]) task.Start = dd[0];
                    if (dd[1]) {
                        task.Finish = dd[1];
                    }
                    if (dd[2]) task.Work = dd[2];
                }











                this.fire("tasksync", event);
            }
            else {
                if (task.isLeaf === false) {
                } else {

                    if (task.Summary != 0) this.setTaskModified(task, "Summary");

                    task.Summary = 0;
                }

                this.fire("tasksync", event);
            }




            if ((task.Summary == 1 && this.allowSummaryLink == false) || !task.PredecessorLink) {
                task.PredecessorLink = [];
            }
            var links = task.PredecessorLink;

            for (var j = links.length - 1; j >= 0; j--) {
                var link = links[j];
                var preTask = this._TaskUIDs[link.PredecessorUID];

                if (preTask == null) {
                    links.removeAt(j);
                    this.setTaskModified(task, "PredecessorLink");
                }
                else if (this.tasks.isAncestor(task, preTask)
                        || this.tasks.isAncestor(preTask, task)
                ) {

                    if (this.enableValidTasks !== false) {
                        links.removeAt(j);
                        this.setTaskModified(task, "PredecessorLink");
                    }
                }
            }

            if (this.autoSyncSummary) {
                if (task.Start && (!start || start.getTime() > task.Start.getTime())) {
                    start = new Date(task.Start.getTime());
                }
                if (task.Finish && (!finish || finish.getTime() < task.Finish.getTime())) {
                    finish = new Date(task.Finish.getTime());
                }
                if (!isNaN(task.Work)) work += task.Work;
            }
        }
        return this.autoSyncSummary ? [start, finish, work] : null;
    },

    getNextTask: function (task) {
        task = this.getTask(task);
        return this.tasks.getNextNode(task);
    },
    getPrevTask: function (task) {
        task = this.getTask(task);
        return this.tasks.getPrevNode(task);
    },
    getFirstTask: function (parentTask) {
        parentTask = this.getTask(parentTask);
        return this.tasks.getFirstNode(parentTask);
    },
    getLastTask: function (parentTask) {
        parentTask = this.getTask(parentTask);
        return this.tasks.getLastNode(parentTask);
    },
    getParentTask: function (task) {
        task = this.getTask(task);
        if (!task) return null;
        var parentTask = this.tasks.getParentNode(task);
        if (parentTask == this.tasks.getRootNode()) return null;
        return parentTask;
    },
    getChildTasks: function (task, all) {
        return this.tasks.getChildNodes(task, all, false);
    },
    getRoot: function () {
        return this.tasks.getRootNode();
    },
    getAllChildTasks: function (task) {
        return this.getChildTasks(task, true);
    },
    getAncestorTasks: function (task) {
        return this.tasks.getAncestors(task);
    },
    isAncestor: function (parentTask, task) {
        parentTask = this.getTask(parentTask);
        task = this.getTask(task);
        return this.tasks.isAncestor(parentTask, task);
    },
    getViewStartDate: function () {
        return this.ganttView.startDate;
    },
    getViewFinishDate: function () {
        return this.ganttView.finishDate;
    },
    getStartDate: function () {
        return this.data.StartDate;
    },
    getFinishDate: function () {
        return this.data.FinishDate;
    },

    newTask: function () {
        task = {};
        task.UID = UUID();
        task.Name = "";
        task.PercentComplete = 0;
        task.Work = 0;
        task.Weight = 0;
        task.ConstraintType = 0;

        var d = this.ganttView.startDate;
        task.Start = new Date(d.getFullYear(), d.getMonth(), d.getDate());
        task.Finish = new Date(d.getFullYear(), d.getMonth(), d.getDate(), 23, 59, 59);
        task.Duration = 1;
        task.Work = 0;
        var e = { task: task };
        this.fire("taskcreated", e);
        return e.task;
    },


    addTask: function (task, index, targetTask) {

        if (!task || typeof task != "object") return;
        if (index == "add") index = "append";
        if (!index) index = -1;
        targetTask = this.getTask(targetTask);
        if (!targetTask) targetTask = this.tasks.getRootNode();
        if (targetTask == this.tasks.getRootNode() && typeof index == "string") {
            index = "append";
        }


        this._taskParseDate(task);


        var _newTask = this.newTask();
        mini.copyTo(task, mini.copyTo(_newTask, task));


        if (!mini.isNull(task.UID)) this._TaskUIDs[task.UID] = task;

        this.tasks.beginChange();
        this.beginOrder();
        switch (index) {
            case "before":
                index = this.tasks.indexOfNode(targetTask);
                var parentTask = this.tasks.getParentNode(targetTask);
                this.tasks.insertNode(task, index, parentTask);
                break;
            case "after":
                index = this.tasks.indexOfNode(targetTask);
                var parentTask = this.tasks.getParentNode(targetTask);
                this.tasks.insertNode(task, index + 1, parentTask);
                break;
            case "append":
            case "add":
                this.tasks.addNode(task, targetTask);
                break;
            default:
                if (mini.isNumber(index)) {
                    this.tasks.insertNode(task, index, targetTask);
                }
                break;
        }

        this.endOrder();
        this.tasks.endChange();
    },
    acceptTask: function (task) {
        if (!task) return;
        this.tasks.beginChange();
        this.tasks.acceptRecord(task);
        this.cascadeChild(task, function (t) {
            this.tasks.acceptRecord(t);
        }, this);
        this.tasks.endChange();
    },
    addTasks: function (tasks, index, targetTasks) {
        if (!mini.isArray(targetTasks)) {
            targetTasks = [targetTasks];
        }
        if (!mini.isArray(targetTasks) || !mini.isArray(tasks)) return;
        this.tasks.beginChange();

        this.beginOrder();



        for (var i = 0, l = tasks.length; i < l; i++) {
            var task = tasks[i];
            for (var j = 0, k = targetTasks.length; j < k; j++) {
                var targetTask = targetTasks[j];
                targetTask = this.getTask(targetTask);

                task = mini.clone(task);
                this.addTask(task, index, targetTask);
            }
        }


        this.endOrder();

        this.tasks.endChange()
    },
    removeTask: function (task) {
        task = this.getTask(task);
        if (!task) return null;
        if (task.UID == this.rootTaskUID) {
            this.clearTasks();
            return task;
        }
        this.tasks.beginChange();
        this.tasks.removeNode(task);

        this.orderProject();
        this.tasks.endChange();
    },
    clearTasks: function () {
        this.tasks.beginChange();
        this.data.Tasks = [];
        this.tasks.clear();
        this.syncTasks();
        this.tasks.endChange();
    },
    isModifiedField: function (task, field) {
        var task = this.getTask(task);
        if (!task || !field) return;
        return this.tasks.isModified(task, field);
    },
    updateTask: function (task, field, value) {

        var task = this.getTask(task);
        if (!task || !field) return;

        this.tasks.beginChange();

        this.tasks.updateRecord(task, field, value);

        this.orderProject();
        this.tasks.endChange();
    },
    updateTasks: function (tasks, newTask) {
        if (!mini.isArray(tasks) || typeof newTask != "object") return;
        this.tasks.beginChange();
        this.beginOrder();
        for (var i = 0, l = tasks.length; i < l; i++) {
            var task = tasks[i];
            task = this.getTask(task);
            var keyValue = mini.clone(newTask);
            this.tasks.updateRecord(task, keyValue);
        }
        this.endOrder();
        this.tasks.endChange();
    },
    moveTask: function (task, targetTask, action) {
        task = this.getTask(task);
        targetTask = this.getTask(targetTask);
        if (!task || !targetTask || mini.isNull(action)) return;
        this.tasks.beginChange();
        this.tasks.moveNode(task, targetTask, action);
        this.orderProject();
        this.tasks.endChange();
    },
    moveTasks: function (tasks, targetTask, action) {
        targetTask = this.getTask(targetTask);
        if (!tasks || tasks.length == 0 || !targetTask || mini.isNull(action)) return;
        this.tasks.beginChange();

        for (var i = 0, l = tasks.length; i < l; i++) {
            tasks[i] = this.getTask(tasks[i]);
        }
        this.tasks.moveNodes(tasks, targetTask, action);

        this.orderProject();
        this.tasks.endChange();
    },
    upgradeTask: function (task) {
        task = this.getTask(task);
        if (!task) return;
        this.tasks.beginChange();



        this.tasks.upGrade(task);

        this.orderProject();

        this.tasks.endChange();
    },
    downgradeTask: function (task) {
        task = this.getTask(task);
        if (!task) return;
        this.tasks.beginChange();
        this.tasks.downGrade(task);
        this.orderProject();
        this.tasks.endChange();
    },
    moveUpTask: function (task) {
        var parentTask = this.getParentTask(task);
        var prevTask = this.getPrevTask(task);
        if (prevTask) {
            this.moveTask(task, prevTask, "before");
        }
    },
    moveDownTask: function (task) {
        var parentTask = this.getParentTask(task);
        var nextTask = this.getNextTask(task);
        if (nextTask) {
            this.moveTask(task, nextTask, "after");
        }
    },
    removeTasks: function (tasks) {
        if (!mini.isArray(tasks)) return;

        for (var i = 0, l = tasks.length; i < l; i++) {
            tasks[i] = this.getTask(tasks[i]);
        }

        this.tasks.beginChange();
        this.tasks.removeNodes(tasks);
        this.orderProject();
        this.tasks.endChange();

        this.setScrollTop(0);
    },
    setScrollTop: function (value, must) {
        this.tableView.setScrollTop(value, must);
        this.ganttView.setScrollTop(value, must);
    },

    allowLinkLimit: false,
    getPredecessorLink: function (task, preTask) {
        task = this.getTask(task);
        preTask = this.getTask(preTask);
        if (task == null || !preTask) return null;
        var links = task.PredecessorLink;
        if (links != null && links.length > 0) {
            for (var i = 0, l = links.length; i < l; i++) {
                var link = links[i];
                if (link.PredecessorUID == preTask.UID) return link;
            }
        }
        return null;
    },
    getLinkString: function (links) {
        if (typeof links == "string") return links;
        if (!links) links = [];
        var sb = [];
        for (var i = 0, l = links.length; i < l; i++) {
            var link = links[i];
            if (!link.LinkLag) link.LinkLag = 0;
            var preTask = this.getTask(link.PredecessorUID);
            if (!preTask) continue;
            var s = preTask.ID;
            if (link.Type != 1 || link.LinkLag != 0) {
                s += mini.Gantt.PredecessorLinkType[link.Type].Short;
            }
            if (link.LinkLag != 0) {
                if (link.LinkLag > 0) {
                    s += "+";
                }
                s += link.LinkLag;
            }

            if (this.allowLinkLimit) {
                if (!link.Limit) {
                    s = "~" + s;
                }
            }

            sb.push(s);
        }
        return sb.join(',');
    },
    getLinksByString: function (linkString) {

        var links = [];

        if (mini.isArray(linkString)) links = linkString;
        if (typeof linkString == "string") {
            var lss = linkString.split(',');
            for (var i = 0, l = lss.length; i < l; i++) {
                var ls = lss[i];
                try {
                    var PredecessorID = -1;
                    var linkType = -1;
                    var limit = true;
                    var linkLag = 0;

                    var s = ls.trim().toUpperCase();


                    if (s.substring(0, 1) == "~") {
                        limit = false;
                        s = s.substring(1);
                    }


                    PredecessorID = parseInt(s);
                    if (PredecessorID <= 0 || isNaN(PredecessorID)) continue;

                    var preTask = this.getTaskByID(PredecessorID);
                    if (preTask == null) continue;

                    s = s.substring(PredecessorID.toString().length);


                    if (s.indexOf("+") != -1) {
                        var ss = s.split('+');
                        s = ss[0];
                        if (ss.length > 1) {
                            linkLag = parseInt(ss[1]);
                        }
                    }
                    else if (s.indexOf("-") != -1) {
                        var ss = s.split('-');
                        s = ss[0];
                        if (ss.length > 1) {
                            linkLag = -parseInt(ss[1]);
                        }
                    }


                    if (s == "FF") linkType = 0;
                    if (s == "FS" || s == "") linkType = 1;
                    if (s == "SF") linkType = 2;
                    if (s == "SS") linkType = 3;
                    if (linkType == -1) continue;

                    var link = {};
                    link["PredecessorUID"] = preTask["UID"];
                    link["Type"] = linkType;
                    link["LinkLag"] = linkLag;
                    link["Limit"] = limit;

                    links.push(link);
                }
                catch (ex) {

                }
            }
        }
        return links;
    },
    removeLink: function (task, preTask) {
        if (!task) return;
        if (task.TaskUID) {
            preTask = task.PredecessorUID;
            task = task.TaskUID;
        }

        task = this.getTask(task);
        preTask = this.getTask(preTask);
        if (!task || !preTask) return;
        var links = task.PredecessorLink;
        if (links != null) {
            for (var i = links.length - 1; i >= 0; i--) {
                var link = links[i];
                if (link.PredecessorUID == preTask.UID) {
                    links.removeAt(i);
                }
            }
        }

        this._Validator.valid();
        this.setTaskModified(task, "PredecessorLink");
        this.orderProject();
    },

    _checkLinks: function (links, task) {
        for (var i = links.length - 1; i >= 0; i--) {
            var link = links[i];


            var preTask = this.getTask(link.PredecessorUID);
            if (preTask == null) {
                links.removeAt(i);
                continue;
            }

            if (link.Type == null) link.Type = 1;
            if (link.LinkLag == null) link.LinkLag = 0;
            link.TaskUID = task.UID;

        }
    },

    addLink: function (task, link) {
        task = this.getTask(task);
        if (!task || !link) return;

        var oldLinks = task.PredecessorLink;

        try {
            var oldLink = this.getPredecessorLink(task, link.PredecessorUID);
            if (oldLink) throw new Error('不能加入相同的前置关系');

            var links = oldLinks ? oldLinks.clone() : [];
            links.push(link);
            this._checkLinks(links, task);

            task.PredecessorLink = links;
            this._Validator.valid();
            this.setTaskModified(task, "PredecessorLink");
            this.orderProject();
        } catch (ex) {
            task.PredecessorLink = oldLinks;
            throw ex;
        }

    },

    setLinks: function (task, links) {

        task = this.getTask(task);
        links = this.getLinksByString(links);
        if (task == null) return;


        var hashed = {}, _LINKS = [];
        for (var i = 0, l = links.length; i < l; i++) {
            var link = links[i];

            var preTask = this.getTask(link.PredecessorUID);
            if (!preTask && link.PredecessorID) {
                preTask = this.getTaskByID(link.PredecessorID);
            }

            if (!preTask || mini.isNull(link.Type)) continue;

            var preUID = preTask.UID;
            if (hashed[preUID]) continue;

            if (!link.LinkLag) link.LinkLag = 0;

            _LINKS.push(link);
            hashed[preUID] = link;
        }

        links = task.PredecessorLink;

        var s1 = this.getLinkString(links);
        var s2 = this.getLinkString(_LINKS);
        if (s1 == s2) return;
        try {
            task.PredecessorLink = _LINKS;
            this._Validator.valid();

            this.setTaskModified(task, "PredecessorLink");
            this.orderProject();
        }
        catch (ex) {
            task.PredecessorLink = links;
            throw ex;

        }
    },
    setAssignments: function (task, assignments) {
        task = this.getTask(task);
        if (task == null) return;
        if (!mini.isArray(assignments)) assignments = [];
        for (var i = assignments.length - 1; i >= 0; i--) {
            var asi = assignments[i];
            var resourceUID = asi.ResourceUID;
            var resource = this.getResource(resourceUID);
            if (resource == null) {
                assignments.removeAt(i);
            } else {
                resource.TaskUID = task.UID;
            }
        }
        task["Assignments"] = assignments;
        this.setTaskModified(task, "Assignments");
    },


    showCriticalPath: true,
    clearCriticalPath: function () {



    },
    createCriticalPath: function () {

    },


    beginUpdate: function () {
        this.tasks.beginChange();
        this.beginOrder();
    },
    endUpdate: function () {
        this.endOrder();
        this.tasks.endChange();
    },

    _orderCount: 0,
    allowOrderProject: false,
    beginOrder: function () {
        this._orderCount++;
    },
    endOrder: function (raise) {
        this._orderCount--;
        if (this._orderCount < 0) this._orderCount = 0;
        if ((raise !== false && this._orderCount == 0) || raise == true) {
            this._orderCount = 0;

            var tasks = null;
            if (raise && raise !== true) {
                tasks = raise;
            }
            this.orderProject(tasks);
        }
    },
    orderProject: function () {
        this.tasks.beginChange();

        this.syncTasks(false);
        if (this._orderCount == 0) {

            if (this.showCriticalPath) {

                this.createCriticalPath()
            } else {

            }


            var dr = this.getDateRange();
            if (dr) {
                this.ganttView.setDateRange(dr[0], dr[1]);
            }
        }
        this.tasks.endChange();

        this._deferLayout();

    },
    _deferLayout: function () {


        var me = this;
        if (this._layoutTimer) return;
        this._layoutTimer = setTimeout(function () {
            me.doLayout();
            me._layoutTimer = null;
        }, 1);
    },

    setTaskModified: function (task, field, oldValue) {
        if (this.allowTaskModified == false) return;

        if (field && mini.isNull(oldValue)) {
            oldValue = null;
        }
        this.tasks._setModified(task, field, oldValue);
    },


    getStartByCalendar: function (finish, workingDays) {
        return this._Calendar.getStart(finish, workingDays);
    },
    getFinishByCalendar: function (start, workingDays) {
        return this._Calendar.getFinish(start, workingDays);
    },
    getDurationByCalendar: function (start, finish) {
        return this._Calendar.getWorkingDays(start, finish);
    },
    getWorkingDateByCalendar: function (date, isBack) {
        return this._Calendar.getWorkingDate(date, isBack);
    },

    getSelected: function () {







        var cell = this.tableView.getCurrentCell();
        if (cell) {
            return cell.record;
        } else {
            return this.tasks.getSelected()
        }
        return null;
    },
    getSelecteds: function () {
        return this.tasks.getSelecteds()
    },
    isSelected: function (id) {
        return this.tasks.isSelected(id);
    },
    select: function (record, currentCell, selectRecord) {

        if (!record) return;
        if (typeof record == "number") record = this.tasks.getAt(record);
        if (currentCell) {
            var cell = this.tableView.getCurrentCell();
            var column = this.tableView.getViewColumns()[0];
            if (cell) {
                column = cell.column;
            }
            cell = { record: record, column: column };
            this.tableView.setCurrentCell(cell);
        }
        if (selectRecord !== false) {
            this.tasks.select(record);
        }
    },
    deselect: function (record) {


        this.tasks.deselect(record);
    },
    selectAll: function () {
        this.tasks.selectAll();
    },
    deselectAll: function () {

        this.tasks.deselectAll();
    },
    selects: function (records) {
        this.tasks.selects(records);
    },
    deselects: function (records) {
        this.tasks.deselects(records);
    },

    filter: function (fn, scope) {
        this.tasks.filter(fn, scope);

        var that = this;
        setTimeout(function () {

            that.setScrollTop(that.tableView.getScrollTop(), true);
        }, 50);
    },
    clearFilter: function () {
        this.tasks.clearFilter();
    },
    sort: function (fn) {
        this.tasks.sort(fn);
    },
    clearSort: function () {
        this.tasks.clearSort();
    },

    addTaskCls: function (task, cls) {
        this.tableView.addNodeCls(task, cls);
    },
    removeTaskCls: function (task, cls) {
        this.tableView.removeNodeCls(task, cls);
    },

    setTableHeaderMenu: function (menu) {
        menu = mini.getAndCreate(menu);
        this.tableHeaderMenu = menu;
        menu.owner = this;
        mini.on(this.tableView._headerEl, "contextmenu", function (e) {
            var ev = {

                htmlEvent: e,
                cancel: false
            };
            menu.fire("BeforeOpen", ev);
            if (ev.cancel) return false;

            menu.showAtPos(e.pageX, e.pageY);
            return false;
        }, this);
    },
    setTableBodyMenu: function (menu) {
        menu = mini.getAndCreate(menu);
        this.tableBodyMenu = menu;
        menu.owner = this;
        mini.on(this.tableView._viewportEl, "contextmenu", function (e) {
            var ev = {

                htmlEvent: e,
                cancel: false
            };
            menu.fire("BeforeOpen", ev);
            if (ev.cancel) return false;
            menu.showAtPos(e.pageX, e.pageY);
            return false;
        }, this);
    },
    setGanttHeaderMenu: function (menu) {
        menu = mini.getAndCreate(menu);
        this.ganttHeaderMenu = menu;
        menu.owner = this;
        mini.on(this.ganttView._headerEl, "contextmenu", function (e) {
            var ev = {

                htmlEvent: e,
                cancel: false
            };
            menu.fire("BeforeOpen", ev);
            if (ev.cancel) return false;
            menu.showAtPos(e.pageX, e.pageY);
            return false;
        }, this);
    },
    setGanttBodyMenu: function (menu) {
        menu = mini.getAndCreate(menu);
        this.ganttBodyMenu = menu;
        menu.owner = this;
        mini.on(this.ganttView._viewportEl, "contextmenu", function (e) {
            var ev = {

                htmlEvent: e,
                cancel: false
            };
            menu.fire("BeforeOpen", ev);
            if (ev.cancel) return false;
            menu.showAtPos(e.pageX, e.pageY);
            return false;
        }, this);
    },

    getHtmlCallback: function (callback) {
        var that = this,
            options = options || {},
            oldWidth = this.el.style.width,
            oldHeight = this.el.style.height,

            topTimeScale = that.ganttView.topTimeScale,
            bottomTimeScale = that.ganttView.bottomTimeScale;

        var headerHeight = that.tableView.getHeaderHeight(),
            rowsHeight = that.rowHeight * that.getTaskList().length,
            height = headerHeight + rowsHeight + 25,

            scrollTop = that.tableView.getScrollTop(),
            _tableWidth = that.pane1.size,
            tableWidth = that._pane1El.offsetWidth,
            width = tableWidth + that.ganttView.scrollWidth + 50;

        if (!this.ganttViewExpanded || !this.showGanttView) width = width - that.ganttView.scrollWidth + 50;
        if (!this.tableViewExpanded || !this.showTableView) {
            width = width - tableWidth;
            tableWidth = 0;
        }

        that.setTableViewWidth(tableWidth);

        that.setWidth(width);
        that.setHeight(height);

        setTimeout(function () {
            var html = jQuery(that.el).html();


            that.setWidth(oldWidth);
            that.setHeight(oldHeight);
            that.setTableViewWidth(_tableWidth);

            setTimeout(function () {

                that.setScrollTop(scrollTop, true);
            }, 50);

            if (callback) callback(html);

        }, 1000);
    },

    printServer: "",
    printCSS: "",
    print: function (options) {
        if (!this.printServer) { alert("printServer is error"); return }
        if (!this.printCSS) { alert("printCSS is error"); return }


        var that = this,
            options = options || {},
            oldWidth = this.el.style.width,
            oldHeight = this.el.style.height,

            topTimeScale = that.ganttView.topTimeScale,
            bottomTimeScale = that.ganttView.bottomTimeScale;

        var headerHeight = that.tableView.getHeaderHeight(),

            rowsHeight = that.rowHeight * that.tasks.getVisibleRows().length,
            height = headerHeight + rowsHeight + 25,

            scrollTop = that.tableView.getScrollTop(),
            _tableWidth = that.pane1.size,
            tableWidth = that._pane1El.offsetWidth,
            width = tableWidth + that.ganttView.scrollWidth + 50;

        if (!this.ganttViewExpanded || !this.showGanttView) width = width - that.ganttView.scrollWidth + 50;
        if (!this.tableViewExpanded || !this.showTableView) {
            width = width - tableWidth;
            tableWidth = 0;
        }


        that.setTableViewWidth(tableWidth);

        that.setWidth(width);
        that.setHeight(height);

        function submitForm(options) {
            var html = '<form target="_blank"  action="' + options.url + '" method="' + options.type + '" style="display:none;">';
            if (options.data) {
                for (var name in options.data) {
                    var value = options.data[name];
                    html += '<input type="hidden" name=\'' + name + '\' value=\'' + value + '\'/>';
                }
            }
            html += '</form>';

            var jq = $(html).appendTo(document.body);

            jq.submit();

            if (options.complete) setTimeout(function () {
                options.complete();
            }, 3000);
        }


        var imgType = options.type || "png";
        var url = this.printServer;
        var path = this.printServer.split("snapshot.")[0];


        var msgid = mini.loading(mini.Gantt.Printing_Wait, mini.Gantt.Printing_Text);



        var css = '<meta content="text/html; charset=gb2312" http-equiv="Content-Type" />';
        var cssArr = mini.isArray(this.printCSS) ? this.printCSS : [this.printCSS];
        for (var i = 0, l = cssArr.length; i < l; i++) {
            css += ' <link href="' + cssArr[i] + '" rel="stylesheet" type="te' + 'xt/css" />';
        }

        setTimeout(function () {
            var html = jQuery(that.el).html();
            html = '<!DOCTYPE html><html><head>' + css + '</head><body style="margin:0;">' + html + '</body></html>';



            html = html.replace(/\'/g, "");

            submitForm({
                url: url,
                data: { html: html, width: width, height: height, type: imgType },
                type: 'post',
                complete: function () {
                    mini.hideMessageBox(msgid);
                }
            });


























            that.setWidth(oldWidth);
            that.setHeight(oldHeight);
            that.setTableViewWidth(_tableWidth);

            setTimeout(function () {

                that.setScrollTop(scrollTop, true);
            }, 50);

        }, 1000);
    }





});
mini.regClass(mini.Gantt, "gantt");


mini.Gantt.PredecessorLinkType = [
    { ID: 0, Name: 'Finish-Finish(FF)', Short: 'FF' },
    { ID: 1, Name: 'Finish-Start(FS)', Short: 'FS' },
    { ID: 2, Name: 'Start-Finish(SF)', Short: 'SF' },
    { ID: 3, Name: 'Start-Start(SS)', Short: 'SS' }
];

mini.Gantt.ConstraintType = [
    { ID: 0, Name: 'The sooner the better' },
    { ID: 1, Name: 'The later the better' },
    { ID: 2, Name: 'Must be begin in' },
    { ID: 3, Name: 'Must be completed in' },
    { ID: 4, Name: 'Beginning no earlier than ...' },
    { ID: 5, Name: 'Beginning no later than ...' },
    { ID: 6, Name: 'Completed no earlier than ...' },
    { ID: 7, Name: 'Completed no later than ...' }
];

mini.copyTo(mini.Gantt, {
    ID_Text: "ID",
    Name_Text: "Name",
    PercentComplete_Text: "Progress",
    Duration_Text: "Duration",
    Start_Text: "Start",
    Finish_Text: "Finish",
    Critical_Text: "Critical",

    PredecessorLink_Text: "PredecessorLink",
    Work_Text: "Work",
    Priority_Text: "Priority",
    Weight_Text: "Weight",
    OutlineNumber_Text: "OutlineNumber",
    OutlineLevel_Text: "OutlineLevel",
    ActualStart_Text: "ActualStart",
    ActualFinish_Text: "ActualFinish",
    WBS_Text: "WBS",
    ConstraintType_Text: "ConstraintType",
    ConstraintDate_Text: "ConstraintDate",
    Department_Text: "Department",
    Principal_Text: "Principal",
    Assignments_Text: "Assignments",

    DeleteLink: 'Whether or not to delete this link?',

    Summary_Text: "Summary",
    Task_Text: "Task",
    Baseline_Text: "Baseline",
    LinkType_Text: "LinkType",
    LinkLag_Text: "LinkLag",
    From_Text: "From",
    To_Text: "To",

    Goto_Text: "Goto",
    UpGrade_Text: "UpGrade",
    DownGrade_Text: "DownGrade",
    Add_Text: "Add Task",
    Edit_Text: "Edit Task",
    Remove_Text: "Remove Task",
    ZoomIn_Text: "ZoomIn",
    ZoomOut_Text: "ZoomOut",
    Deselect_Text: "Un Select",
    Split_Text: "Split Task",

    NoCalendarID: "No calendar UID.",
    WeekDayError: "WeekDay error",
    ExceptionsError: "Exception date error",
    PredecessorError: "The relationship between task loop",
    SummaryPredecessorError: "The pre task of a summary task ({0}) \"{1}\" must be SS or FS",
    ManualCritical_Text: "Critical tasks (manual)",
    NoCalendar: "No project calendar was found.",
    NoCurrentCalendar: "Must have current project calendar",
    Printing_Wait: "Please print the Gantt chart, later...",
    Printing_Text: "Print Gantt chart"


});




PlusGantt = mini.Gantt;





MyProjectSchedule = function (project) {
    this.project = project;

    project.on("cellbeginedit", this.__OnCellBeginEdit, this);
    project.on("aftercellcommitedit", this.__OnCellCommitEdit, this);
    project.on("itemdragstart", this.__OnItemDragStart, this);
    project.on("itemdragcomplete", this.__OnItemDragComplete, this);
    project.on("dodragdrop", this.__OnDoTaskDragDrop, this);
    project.set({
        readOnly: false,
        allowDragDrop: true
    });
}
MyProjectSchedule.prototype = {
    __OnDoTaskDragDrop: function (e) {
        if (this.project.scheduleEnabled === false) return;

        var dragRecords = e.tasks, targetRecord = e.targetTask, action = e.action;
        this.project.moveTasks(dragRecords, targetRecord, action);
    },
    __OnCellBeginEdit: function (e) {
        if (this.project.scheduleEnabled === false) return;

        var task = e.record, field = e.field;
        if (task.Summary && task.FixedDate != 1) {
            if (field == 'Start' || field == 'Finish' || field == 'Duration') {
                if (this.project.autoSyncSummary) {
                    e.cancel = true;
                }
            }
        }
        if (field == "Start" || field == "Finish"
            || field == "ActualStart" || field == "ActualFinish"
            || field == "ConstraintDate"
        ) {
            if (!mini.isDate(e.value) && e.editor) {
                e.editor.setViewDate(e.sender.getStartDate());
            }
        }
    },
    __OnCellCommitEdit: function (e) {
        if (this.project.scheduleEnabled === false) return;

        e.cancel = true;
        var task = e.record, field = e.field, value = e.value, oldValue = task[field], column = e.column;

        if (mini.isEquals(oldValue, value)) return;

        try {
            if (column.displayField) {
                var o = {};
                o[column.field] = e.value;
                o[column.displayField] = e.text;
                this.project.updateTask(task, o);
            } else {
                this.project.updateTask(task, field, value);
            }
        } catch (ex) {

            alert(ex.message);
        }
    },
    __OnItemDragStart: function (e) {
        if (this.project.scheduleEnabled === false) return;

        if (e.action == "start") {
            e.cancel = true;
        }
    },
    __OnItemDragComplete: function (e) {
        if (this.project.scheduleEnabled === false) return;

        var action = e.action, value = e.value, task = e.item;
        var sss = new Date();
        if (action == "finish") {

            this.project.updateTask(task, "Finish", value);
        }
        if (action == "percentcomplete") {
            this.project.updateTask(task, "PercentComplete", value);
        }
        if (action == "move") {
            this.project.updateTask(task, "Start", value);
        }

    }
};

MyProjectSchedule.Calendar = function (project) {
    this.project = project;
    this.calendar = project.getProjectCalendar();

    this.validCalendar(this.calendar);

    this.WeekDays = this.calendar["WeekDays"];
    this.Exceptions = this.calendar["Exceptions"];




    mini.sort(this.WeekDays, function (a, b) {
        return a.DayType > b.DayType;
    });



    this.caches = {};
}
MyProjectSchedule.Calendar.prototype = {
    validCalendar: function (calendar) {
        if (calendar.UID == null) {

            throw new Error(mini.Gantt.NoCalendarID);
        }
        var weekDays = calendar["WeekDays"];
        var exceptions = calendar["Exceptions"];
        if (weekDays == null || weekDays.length != 7) {

            throw new Error(mini.Gantt.WeekDayError);
        }
        if (exceptions == null) {
            calendar["Exceptions"] = exceptions = [];
        }

        var workingDay = false;
        for (var i = 0; i < 7; i++) {
            var weekday = weekDays[i];
            var dayType = parseInt(weekday["DayType"]);
            var dayWorking = parseInt(weekday["DayWorking"]);
            if ((dayWorking != 0 && dayWorking != 1)
                    || dayType < 1 || dayType > 7
                ) {

                throw new Error(mini.Gantt.WeekDayError);
            }
            if (dayWorking == 1) {
                workingDay = true;
            }
        }

        if (workingDay == false) throw new Error(mini.Gantt.WeekDayError);
        for (var i = 0, l = exceptions.length; i < l; i++) {
            var ex = exceptions[i];
            var dayType = parseInt(ex["DayType"]);
            var dayWorking = parseInt(ex["DayWorking"]);
            if ((dayWorking != 0 && dayWorking != 1)
                    || dayType != 0
                ) {

                throw new Error(mini.Gantt.ExceptionsError);
            }
            if (dayWorking == 1) {
                var tp = ex["TimePeriod"];
                if (tp == null || !mini.isDate(tp["FromDate"]) || !mini.isDate(tp["ToDate"])) {

                    throw new Error(mini.Gantt.ExceptionsError);
                }
                var fd = tp["FromDate"];
                var td = tp["ToDate"];
                tp["FromDate"] = mini.clearTime(fd);
                tp["ToDate"] = mini.maxTime(td);
            }
        }
    },

    isWorkingDate: function (date) {
        var weekday = this.getDay(date.getDay(), date);
        return weekday.DayWorking == 1;
    },

    getDay: function (dayOfWeek, date) {
        var cacheid = "getDay$" + date.getTime() + dayOfWeek;
        var cache = this.caches[cacheid];
        if (cache) return cache;

        var weekday = this.WeekDays[dayOfWeek];

        if (date != null) {

            var time = date.getTime();
            for (var i = 0, l = this.Exceptions.length; i < l; i++) {
                var ex = this.Exceptions[i];
                var tp = ex["TimePeriod"];
                var fromtime = tp["FromDate"].getTime();
                var totime = tp["ToDate"].getTime();

                if (fromtime <= time && time <= totime) {
                    weekday = ex;
                    break;
                }
            }
        }
        this.caches[cacheid] = weekday;
        return weekday;
    },

    getStart: function (finish, workingDays) {
        if (workingDays <= 0) return new Date(finish.getTime());

        var cacheid = "getstart" + finish.getTime() + workingDays;
        var cache = this.caches[cacheid];
        if (cache) {
            return new Date(cache);
        }

        var date = new Date(finish.getFullYear(), finish.getMonth(), finish.getDate());
        while (workingDays > 0) {
            var isWorking = this.isWorkingDate(date);
            if (isWorking) {
                workingDays--;
                if (workingDays == 0) break;
            }
            date = new Date(date.getFullYear(), date.getMonth(), date.getDate() - 1);

        }

        this.caches[cacheid] = date.getTime();
        return date;
    },
    getFinish: function (start, workingDays) {
        if (workingDays <= 0) return new Date(start.getTime());

        var cacheid = "getfinish" + start.getTime() + workingDays;
        var cache = this.caches[cacheid];
        if (cache) {
            return new Date(cache);
        }

        var date = new Date(start.getFullYear(), start.getMonth(), start.getDate());

        while (workingDays > 0) {
            var isWorking = this.isWorkingDate(date);
            if (isWorking) {
                workingDays--;
                if (workingDays == 0) break;
            }
            date = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1);


        }

        var date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59);
        this.caches[cacheid] = date.getTime();
        return date;
    },

    getWorkingDays: function (start, finish) {
        if (start.getTime() == finish.getTime()) return 0;

        var cacheid = "getWorkingDays" + start.getTime() + finish.getTime();
        var cache = this.caches[cacheid];
        if (cache !== undefined) {
            return cache;
        }

        var isF = start > finish;
        if (isF) {
            var t = start;
            start = finish;
            finish = start;
        }

        start = new Date(start.getFullYear(), start.getMonth(), start.getDate());
        finish = new Date(finish.getFullYear(), finish.getMonth(), finish.getDate(), 23, 59, 59);



        var days = 0;
        var finishTime = finish.getTime();
        for (var date = start; date.getTime() < finishTime; ) {
            var isWorking = this.isWorkingDate(date);
            if (isWorking) {
                days++;
            }
            date = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1);


        }

        this.caches[cacheid] = days;
        return isF ? -days : days;
    },

    getWorkingDate: function (date, isBack) {
        var cacheid = "getWorkingDate" + date.getTime() + isBack;
        var cache = this.caches[cacheid];
        if (cache) {
            return new Date(cache);
        }

        date = new Date(date.getFullYear(), date.getMonth(), date.getDate());

        var day = isBack ? 1 : -1;
        while (true) {
            var isWorking = this.isWorkingDate(date);
            if (isWorking) {
                break;
            }
            date = new Date(date.getFullYear(), date.getMonth(), date.getDate() + day);

        }
        date = isBack ? date : new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59);
        this.caches[cacheid] = date.getTime();
        return date;
    },
    getWorkingStartDate: function (date, days) {
        if (days == 0) return date;
        var cacheid = "getWorkingStartDate" + date.getTime() + days;
        var cache = this.caches[cacheid];
        if (cache) {
            return new Date(cache);
        }

        date = new Date(date.getFullYear(), date.getMonth(), date.getDate());

        var dayAdd = days > 0 ? 1 : -1;
        while (true) {
            if (days == 0) break;

            date = new Date(date.getFullYear(), date.getMonth(), date.getDate() + dayAdd);


            var isWorking = this.isWorkingDate(date);

            if (isWorking) {
                days -= dayAdd;
            }
        }

        this.caches[cacheid] = date.getTime();
        return date;
    }

}

MyProjectSchedule.Validator = function (project) {
    this.project = project;
}
MyProjectSchedule.Validator.prototype = {

    createSuccessorTasks: function () {
        var tasks = this.project.getTaskList();
        if (tasks == null) return;
        for (var i = 0, l = tasks.length; i < l; i++) {
            var t = tasks[i];
            t.SuccessorTasks = [];
        }
        for (var i = 0, l = tasks.length; i < l; i++) {
            var t = tasks[i];
            var lks = t.PredecessorLink;
            if (lks != null && lks.length > 0) {
                for (var j = 0, k = lks.length; j < k; j++) {
                    var lk = lks[j];
                    var task = this.project.getTask(lk.PredecessorUID);
                    if (task != null) {
                        task.SuccessorTasks.push(t);
                    }
                }
            }
        }
    },
    clearSuccessorTasks: function () {
        var tasks = this.project.getTaskList();
        for (var i = 0, l = tasks.length; i < l; i++) {
            var t = tasks[i];
            delete t.SuccessorTasks;
        }
    },


    valid: function () {
        var tasks = this.project.getTaskList();
        this.validTasks(tasks);
    },
    validTasks: function (tasks) {

        if (this.project.enableValidTasks === false) return;

        this.validedTasks = {};
        tasks = tasks.clone();

        this.createSuccessorTasks();

        try {
            for (var i = 0, l = tasks.length; i < l; i++) {
                var linkChains = {};
                var task = tasks[i];


                this.validTask(task, linkChains);
            }
        }
        finally {
            this.clearSuccessorTasks();
        }
    },
    validTask: function (task, linkChains) {

        var taskUID = task.UID;

        if (linkChains[taskUID] != null) {


            throw new Error(mini.Gantt.PredecessorError);

        }


        if (this.validedTasks[taskUID] != null) return;

        linkChains[taskUID] = task;


        this.validTaskProperties(task);


        linkChains[taskUID + "toSuccessor"] = task;
        var SuccessorTasks = task.SuccessorTasks;
        if (SuccessorTasks != null && SuccessorTasks.length > 0) {
            for (var i = 0, l = SuccessorTasks.length; i < l; i++) {
                var t = SuccessorTasks[i];
                this.validTask(t, linkChains);
                delete linkChains[t.UID];
            }
        }
        delete linkChains[taskUID + "toSuccessor"];


        linkChains[taskUID + "toParent"] = task;
        var parentTask = this.project.getParentTask(taskUID);
        if (parentTask && parentTask.UID != this.project.rootTaskUID) {
            if (!linkChains[parentTask.UID + "toChildren"]) {
                this.validTask(parentTask, linkChains);
                delete linkChains[parentTask.UID];
            }
        }
        delete linkChains[taskUID + "toParent"];


        linkChains[taskUID + "toChildren"] = task;
        var children = task[this.project.tasks.nodesField];
        if (children && children.length > 0) {
            var isChildrenUp = false;
            for (var i = 0, l = children.length; i < l; i++) {
                var childTask = children[i];
                if (linkChains[childTask.UID + "toParent"]) {
                    isChildrenUp = true;
                    break;
                }
            }


            if (!isChildrenUp) {
                for (var i = 0, l = children.length; i < l; i++) {
                    var childTask = children[i];
                    this.validTask(childTask, linkChains, false);
                    delete linkChains[childTask.UID];
                }
            }
        }
        delete linkChains[taskUID + "toChildren"];

        this.validedTasks[taskUID] = task;
    },


































    validTaskProperties: function (task) {

        if (task.Name === null || task.Name === undefined) task.Name = "";

        task.Duration = parseInt(task.Duration);
        task.PercentComplete = parseFloat(task.PercentComplete);

        if (isNaN(task.Duration)) task.Duration = 0;
        if (isNaN(task.PercentComplete)) task.PercentComplete = 0;
        if (isNaN(task.Work)) task.Work = 0;

        if (task.PercentComplete < 0) task.PercentComplete = 0;
        if (task.PercentComplete > 100) task.PercentComplete = 100;







        if (isNaN(task.Critical)) task.Critical = 0;
        if (this.project.keeyConstraint) {
            if (isNaN(task.ConstraintType)) task.ConstraintType = 0;
        } else {
            if (isNaN(task.ConstraintType) || !task.ConstraintDate) task.ConstraintType = 0;
        }

        if (task.ConstraintDate) {
            var cd = task.ConstraintDate;
            task.ConstraintDate = new Date(cd.getFullYear(), cd.getMonth(), cd.getDate());
        }

        if (!mini.isDate(task.Start)) task.Start = null;
        if (!mini.isDate(task.Finish)) task.Finish = null;

        if (!mini.isDate(task.ActualStart)) task.ActualStart = null;
        if (!mini.isDate(task.ActualFinish)) task.ActualFinish = null;

        task.FixedDate = parseInt(task.FixedDate);
        if (isNaN(task.FixedDate)) task.FixedDate = 0;

        var children = task[this.project.tasks.nodesField]

        var links = task.PredecessorLink;
        if (links && links.length > 0) {
            var taskUID = task.UID;

            for (var i = links.length - 1; i >= 0; i--) {
                var link = links[i];
                link.Type = parseInt(link.Type);
                link.LinkLag = parseInt(link.LinkLag);
                if (isNaN(link.LinkLag)) link.LinkLag = 0;

                link.TaskUID = task.UID;

                var preTaskUID = link.PredecessorUID;


                var preTask = this.project.getTask(preTaskUID);
                if (!preTask) {
                    links.removeAt(i);
                    continue;
                }


                if (this.project.isAncestor(taskUID, preTaskUID)
                    || this.project.isAncestor(preTaskUID, taskUID)) {
                    links.removeAt(i);
                    continue;
                }









                if (task.Summary && (link.Type == 0 || link.Type == 2)) {


                    alert(String.format(mini.Gantt.SummaryPredecessorError, task.ID, task.Name));
                    links.removeAt(i);
                }


            }
        }








    },

    isFixedTask: function (task) {
        return !!task.Summary && !!task.FixedDate;
    },
    isLimitTask: function (task) {
        return !(task.ConstraintType == 0 || task.ConstraintType == 1 || !task.ConstraintDate);
    },
    validLimit: function (task) {


        var fixed = this.isFixedTask(task), limit = this.isLimitTask(task);
        if (!fixed && !limit) return;

        if (fixed) {

        }

        if (limit) {

        }

    }
}

MyProjectSchedule.PercentComplete = function (project) {
    this.project = project;
}
MyProjectSchedule.PercentComplete.prototype = {
    syncComplete: function (task) {
        this.syncParentComplete(task);
        this.syncChildrenComplete(task);
    },
    syncParentComplete: function (task) {
        var percentCompleteProperty = "Duration";

        var taskUID = task.UID;
        var parentTask = this.project.getParentTask(taskUID);
        if (parentTask != null && parentTask.UID != this.project.rootTaskUID) {
            var _PercentComplete = parentTask.PercentComplete;

            var cs = this.getChildrenAll(parentTask);
            var allDuration = 0, completeDuration = 0;
            for (var i = 0, l = cs.length; i < l; i++) {
                var c = cs[i];

                var duration = parseInt(c[percentCompleteProperty]);
                if (isNaN(duration)) duration = 0;
                var percentComplete = parseFloat(c["PercentComplete"]);
                if (isNaN(percentComplete)) percentComplete = 0;

                allDuration += duration;
                completeDuration += duration * percentComplete / 100;
            }
            parentTask["PercentComplete"] = parseInt(completeDuration / allDuration * 100);
            if (isNaN(parentTask["PercentComplete"])) parentTask["PercentComplete"] = 0;
            this.syncParentComplete(parentTask);

            if (_PercentComplete != parentTask.PercentComplete) {
                this.project.setTaskModified(parentTask, "PercentComplete");
            }
        }


    },
    syncChildrenComplete: function (task) {
        var percentCompleteProperty = "Duration";
        var children = this.getChildrenAll(task);

        var allDuration = 0, completeDuration = 0;
        for (var i = 0, l = children.length; i < l; i++) {
            var c = children[i];
            var duration = parseInt(c[percentCompleteProperty]);
            allDuration += duration;
        }
        completeDuration = allDuration * parseInt(task["PercentComplete"]) / 100;

        var isCompleteAll = allDuration == completeDuration;

        for (var i = 0, l = children.length; i < l; i++) {
            var c = children[i];
            var _PercentComplete = c.PercentComplete;

            var duration = parseInt(c[percentCompleteProperty]);
            if (isNaN(duration)) duration = 0;

            if (completeDuration <= 0) {
                c["PercentComplete"] = 0;
            }
            else {
                var d = completeDuration - duration;
                if (d >= 0) c["PercentComplete"] = 100;
                else {
                    c["PercentComplete"] = parseInt(completeDuration / duration * 100);

                    if (isNaN(c["PercentComplete"])) c["PercentComplete"] = 0;
                }
                completeDuration = d;
            }


            if (isCompleteAll) {
                c["PercentComplete"] = 100;
            }

            if (_PercentComplete != c.PercentComplete) {
                this.project.setTaskModified(c, "PercentComplete");
            }
        }


        for (var i = 0, l = children.length; i < l; i++) {
            var c = children[i];
            this.syncParentComplete(c);
        }
    },

    getChildrenAll: function (task) {
        var children = this.project.getChildTasks(task, true);
        var nodes = [];
        for (var i = 0, l = children.length; i < l; i++) {
            var c = children[i];
            if (c.Summary == 0) {
                nodes.push(c);
            }
        }
        return nodes;
    }
}



MyProjectSchedule.Critical = function (project) {
    this.project = project;
}
MyProjectSchedule.Critical.prototype = {
    clearCritical: function () {
        this.Tasks = this.project.getTaskList();
        this.clearCriticalTasks(this.Tasks);
    },
    createCritical: function () {
        this.nodesField = this.project.tasks.nodesField;
        this.Tasks = this.project.getTaskList();
        this.StartDate = this.project.getStartDate();
        this.FinishDate = this.project.getFinishDate();
        this.Calendar = this.project._Calendar;

        var tasks = this.Tasks;







        var olds = {};
        for (var i = 0, l = tasks.length; i < l; i++) {
            var task = tasks[i];
            olds[task.UID] = task.Critical;
        }

        this.doCreateCritical();


        for (var i = 0, l = tasks.length; i < l; i++) {
            var task = tasks[i];
            if (olds[task.UID] !== task.Critical) {
                this.project.setTaskModified(task, "Critical");
            }
        }
    },
    doCreateCritical: function () {

        var tasks = this.Tasks;
        this.clearCriticalTasks(tasks);


        var lastTasks = this.getLastTasks();
        var chains = this.getTaskChains(lastTasks);




        for (var i = 0, l = chains.length; i < l; i++) {
            var chain = chains[i];
            for (var j = 0, k = chain.length; j < k; j++) {
                var task = chain[j];
                if (task.Name == "1") {

                }
                var taskDays = task.Duration;

                var PredecessorIndex = j + 1;
                if (0 <= PredecessorIndex && PredecessorIndex <= k - 1) {
                    var preTask = chain[PredecessorIndex];
                    var preStart = mini.cloneDate(preTask.Start);
                    var preFinish = mini.cloneDate(preTask.Finish);
                    if (!preStart || !preFinish) continue;

                    var link = this.project.getPredecessorLink(task, preTask);
                    var linkType = link.Type;
                    switch (linkType) {
                        case 0:
                            task.EarlyFinish = preFinish;
                            task.EarlyStart = this.Calendar.getStart(task.EarlyFinish, taskDays);
                            break;
                        case 1:
                            preFinish.setDate(preFinish.getDate() + 1);
                            task.EarlyStart = this.Calendar.getWorkingDate(preFinish, true);
                            task.EarlyFinish = this.Calendar.getFinish(task.EarlyStart, taskDays);
                            break;
                        case 2:
                            preStart.setDate(preStart.getDate() - 1);
                            task.EarlyFinish = this.Calendar.getWorkingDate(preStart, false);
                            task.EarlyStart = this.Calendar.getStart(task.EarlyFinish, taskDays);
                            break;
                        case 3:
                            task.EarlyStart = preStart;
                            task.EarlyFinish = this.Calendar.getFinish(task.EarlyStart, taskDays);
                            break;
                    }


                    var LinkLag = parseInt(link.LinkLag);
                    if (isNaN(LinkLag)) LinkLag = 0;
                    if (LinkLag != 0) {
                        task.EarlyStart = this.Calendar.getWorkingStartDate(task.EarlyStart, LinkLag);
                        task.EarlyFinish = this.Calendar.getFinish(task.EarlyStart, taskDays);
                    }

                }
                else {
                    task.EarlyStart = task.Start;
                    task.EarlyFinish = task.Finish;
                }



                var SuccessorIndex = j - 1;
                if (0 <= SuccessorIndex && SuccessorIndex <= k - 1) {
                    var succTask = chain[SuccessorIndex];
                    var succStart = mini.cloneDate(succTask.Start);
                    var succFinish = mini.cloneDate(succTask.Finish);
                    if (!succStart || !succFinish) continue;

                    var link = this.project.getPredecessorLink(succTask, task);
                    var linkType = link.Type;


                    var LinkLag = parseInt(link.LinkLag);
                    if (isNaN(LinkLag)) LinkLag = 0;

                    switch (linkType) {
                        case 0:
                            task.LateFinish = succFinish;
                            task.LateStart = this.Calendar.getStart(task.LateFinish, taskDays);
                            break;
                        case 1:
                            succStart.setDate(succStart.getDate() - 1);
                            task.LateFinish = this.Calendar.getWorkingDate(succStart, false);
                            task.LateStart = this.Calendar.getStart(task.LateFinish, taskDays);
                            break;
                        case 2:
                            succFinish.setDate(succFinish.getDate() + 1);
                            task.LateStart = this.Calendar.getWorkingDate(succFinish, true);
                            task.LateFinish = this.Calendar.getFinish(task.LateStart, taskDays);
                            break;
                        case 3:
                            task.LateStart = succStart;
                            task.LateFinish = this.Calendar.getFinish(task.LateStart, taskDays);
                            break;
                    }


                    var LinkLag = parseInt(link.LinkLag);
                    if (isNaN(LinkLag)) LinkLag = 0;
                    if (LinkLag != 0) {
                        task.LateStart = this.Calendar.getWorkingStartDate(task.LateStart, -LinkLag);
                        task.LateFinish = this.Calendar.getFinish(task.LateStart, taskDays);
                    }
                }
                else {
                    task.LateStart = task.Start;
                    task.LateFinish = task.Finish;
                }
            }

            var criticalDifference = (this.project.criticalDifference || 0) * (1000 * 60 * 60 * 24);


            for (var j = 0, k = chain.length; j < k; j++) {
                var task = chain[j];
                if (task.Name == "确定项目范围") {

                }
                if (task.Critical == 1) continue;


                var EarlyStart = task.EarlyStart;
                var LateStart = task.LateStart;
                if (!EarlyStart || !LateStart) continue;


                if (EarlyStart.getTime() + criticalDifference >= LateStart.getTime()) {
                    task.Critical = 1;
                }



                var SuccessorIndex = j - 1;
                if (0 > SuccessorIndex || SuccessorIndex > k - 1) {
                    task.Critical = 1;
                }

                if (task.Milestone != null && task.Milestone == 1) {
                    task.Critical = 1;
                }
                if (task.Critical == null || task.Critical == 0) {
                    break;
                }
            }
        }


    },
    chains: null,
    chain: null,
    getTaskChains: function (tasks) {
        this.chains = [];
        this.chain = [];

        for (var i = 0, l = tasks.length; i < l; i++) {
            var task = tasks[i];
            this.createTaskChain(task);
        }

        return this.chains;
    },

    clearCriticalTasks: function (tasks) {
        for (var i = 0, l = tasks.length; i < l; i++) {
            var task = tasks[i];
            delete task.EarlyStart;
            delete task.EarlyFinish;
            delete task.LateStart;
            delete task.LateFinish;
            task.Critical = 0;
        }
    },

    createTaskChain: function (task) {
        if (task == null || task.Start == null || task.Finish == null) return;
        this.chain.add(task);

        var links = task.PredecessorLink;
        if (links != null && links.length > 0) {
            for (var i = 0, l = links.length; i < l; i++) {
                var link = links[i];
                var preTask = this.project.getTask(link.PredecessorUID);
                this.createTaskChain(preTask);
            }
        } else {
            var chain2 = this.chain.clone();

            this.chains.add(chain2);
        }
        this.chain.removeAt(this.chain.length - 1);
    },
    getLastTasks: function () {
        var lastTasks = [];
        var tasks = this.Tasks;


        var lastTime = -1;
        for (var i = 0, l = tasks.length; i < l; i++) {
            var task = tasks[i];
            if (task == null || task.Finish == null) continue;
            var time = task.Finish.getTime();

            if (time > lastTime) {
                lastTime = time;
            }
        }


        for (var i = 0, l = tasks.length; i < l; i++) {
            var task = tasks[i];
            if (task == null || task.Finish == null) continue;
            var time = task.Finish.getTime();

            if (time == lastTime) {
                lastTasks.add(task);
            }
        }

        return lastTasks;
    }
}

